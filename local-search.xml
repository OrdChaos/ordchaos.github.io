<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>别样（咬牙切齿）的16岁生日</title>
    <link href="/posts/cc4d8334/"/>
    <url>/posts/cc4d8334/</url>
    
    <content type="html"><![CDATA[<p>无语住了。</p><span id="more"></span><p>前几天都一直好好的，结果23号一整天头都在疼，晚上测体温测得37.8℃，但是以前也有吹空调吹到这个温度结果去医院啥事没有的情况，所以没有在意。</p><p>24号，生日当天起床开始难受，哪哪都难受，包括但不限于头昏、头痛、身上起水泡。</p><p>但原本定下来要去外公外婆家里过生日的，所以还是先去了。</p><p><img src="https://img.ordchaos.com/img/2024/08/effb65e61222e94c00259795d7cce521.jpeg" alt="蛋糕还是好吃的" /></p><p>下午去了医院，你猜怎么着，得水痘了哈哈（</p><p>立马住院，家都没有回（悲）</p><p>分到了77床，感觉不是很吉利<span class="heimu" title="你知道的太多了">数字命理学还在发力！！！还在发力！！！</span></p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2024/08/a9ac3001844f10ca8fb2ed9bdf8651c6.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2024/08/e196dab23b0adfbaad264689661378c0.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2024/08/e4567ba19b2474e3bf7cbbfb34a7fc50.jpg" alt="" /></div></div></div><p>每日生活都是吃饭、吊水、照光、湿敷。</p><p>今天出院啦（喜）</p><p>但是要在家隔离七天才可以去学校（</p><p>有点无语了。</p>]]></content>
    
    
    <categories>
      
      <category>个人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人</tag>
      
      <tag>日常</tag>
      
      <tag>生日</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无服务器AI摘要后端——OrdChaosGPT</title>
    <link href="/posts/fd9dafa1/"/>
    <url>/posts/fd9dafa1/</url>
    
    <content type="html"><![CDATA[<p>时隔一年，终于抽出来时间完全重写了AI摘要的后端。</p><span id="more"></span><h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>TianliGPT的文章摘要很好用，但是本来会能够根据content保证摘要不重复生成，现在不行了，不知道为什么。（我知道现在改为用url鉴别了，但是我的js最开始我就自己改过了，没有更新）</p><p>于是每刷新一次摘要就重新生成一次，token余额哗哗掉。</p><p>想着与其重新改一遍js，不如全权改为自己的版本，于是就有了这个项目。</p><p>现在本文（以及其它文章）开头的摘要就是来自OrdChaosGPT的了。</p><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>大概是TianliGPT的下位代替品</p><p>使用阿里云通义千问（qwen-long）作为摘要生成引擎，Vercel部署，MySQL数据库持久化数据储存</p><p>优势是无服务器（？真的是优势吗）</p><p>缺点是稳定性（至少我不提供SLA保证）与速度（依据文章长度与网速，获取到摘要的时间平均约10秒）</p><p>仓库地址：<a href="https://github.com/OrdChaos/ordchaosgpt-cloud-function">ordchaosgpt-cloud-function</a></p><h2 id="经历"><a class="markdownIt-Anchor" href="#经历"></a> 经历</h2><p>最开始还是想着用rust写一个服务端跑在docker上。</p><p>服务端倒是好写：</p><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><code class="hljs rust"><span class="hljs-keyword">use</span> actix_web::&#123;post, web, App, HttpServer, Responder, HttpResponse, HttpRequest&#125;;<br><span class="hljs-keyword">use</span> serde::&#123;Deserialize, Serialize&#125;;<br><span class="hljs-keyword">use</span> std::path::Path;<br><span class="hljs-keyword">use</span> std::fs;<br><span class="hljs-keyword">use</span> reqwest::Client;<br><span class="hljs-keyword">use</span> serde_json::json;<br><br><span class="hljs-meta">#[derive(Serialize, Deserialize)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SummaryRequest</span> &#123;<br>    content: <span class="hljs-type">String</span>,<br>    url: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-meta">#[derive(Serialize, Deserialize)]</span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SummaryResponse</span> &#123;<br>    url: <span class="hljs-type">String</span>,<br>    summary: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">AppState</span> &#123;<br>    auth_token: <span class="hljs-type">String</span>,<br>&#125;<br><br><span class="hljs-keyword">const</span> SUMMARY_DIR: &amp;<span class="hljs-type">str</span> = <span class="hljs-string">&quot;summaries&quot;</span>;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">is_valid_referer</span>(referer: <span class="hljs-type">Option</span>&lt;&amp;<span class="hljs-type">str</span>&gt;) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">bool</span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(ref_url) = referer &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">valid_domains</span> = <span class="hljs-built_in">vec!</span>[<br>            <span class="hljs-string">&quot;.ordchaos.com&quot;</span>,<br>            <span class="hljs-string">&quot;.ordchaos.top&quot;</span>,<br>            <span class="hljs-string">&quot;.ordchaos.eu.org&quot;</span>,<br>        ];<br>        <span class="hljs-keyword">return</span> valid_domains.<span class="hljs-title function_ invoke__">iter</span>().<span class="hljs-title function_ invoke__">any</span>(|domain| ref_url.<span class="hljs-title function_ invoke__">ends_with</span>(domain));<br>    &#125;<br>    <span class="hljs-literal">false</span><br>&#125;<br><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">generate_summary</span>(content: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Result</span>&lt;<span class="hljs-type">String</span>, <span class="hljs-type">Box</span>&lt;<span class="hljs-keyword">dyn</span> std::error::Error&gt;&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">api_key</span> = <span class="hljs-string">&quot;*******************************&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">api_url</span> = <span class="hljs-string">&quot;https://dashscope.aliyuncs.com/compatible-mode/v1&quot;</span>;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">client</span> = Client::<span class="hljs-title function_ invoke__">new</span>();<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">request_body</span> = json!(&#123;<br>        <span class="hljs-string">&quot;model&quot;</span>: <span class="hljs-string">&quot;qwen-long&quot;</span>,<br>        <span class="hljs-string">&quot;messages&quot;</span>: [<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;system&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-string">&quot;You are a helpful summary generator.&quot;</span>&#125;,<br>            &#123;<span class="hljs-string">&quot;role&quot;</span>: <span class="hljs-string">&quot;user&quot;</span>, <span class="hljs-string">&quot;content&quot;</span>: <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;请为以下内容用中文生成长度为150汉字左右的摘要，摘要只有一个自然段，且只给出摘要即可，不要说其他任何话: &#123;&#125;&quot;</span>, content)&#125;<br>        ],<br>        <span class="hljs-string">&quot;temperature&quot;</span>: <span class="hljs-number">0.8</span>,<br>        <span class="hljs-string">&quot;top_p&quot;</span>: <span class="hljs-number">0.8</span><br>    &#125;);<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">response</span> = client<br>        .<span class="hljs-title function_ invoke__">post</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;/chat/completions&quot;</span>, api_url))<br>        .<span class="hljs-title function_ invoke__">header</span>(<span class="hljs-string">&quot;Authorization&quot;</span>, <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;Bearer &#123;&#125;&quot;</span>, api_key))<br>        .<span class="hljs-title function_ invoke__">json</span>(&amp;request_body)<br>        .<span class="hljs-title function_ invoke__">send</span>()<br>        .<span class="hljs-keyword">await</span>?;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">response_json</span>: serde_json::Value = response.<span class="hljs-title function_ invoke__">json</span>().<span class="hljs-keyword">await</span>?;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">summary</span> = response_json[<span class="hljs-string">&quot;choices&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;message&quot;</span>][<span class="hljs-string">&quot;content&quot;</span>]<br>        .<span class="hljs-title function_ invoke__">as_str</span>()<br>        .<span class="hljs-title function_ invoke__">unwrap_or</span>(<span class="hljs-string">&quot;摘要生成失败：返回格式不正确&quot;</span>)<br>        .<span class="hljs-title function_ invoke__">to_string</span>();<br><br>    <span class="hljs-title function_ invoke__">Ok</span>(summary.<span class="hljs-title function_ invoke__">trim</span>().<span class="hljs-title function_ invoke__">to_string</span>())<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">save_summary</span>(abbrlink: &amp;<span class="hljs-type">str</span>, summary_data: &amp;SummaryResponse) <span class="hljs-punctuation">-&gt;</span> std::io::<span class="hljs-type">Result</span>&lt;()&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">summary_path</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;/&#123;&#125;.json&quot;</span>, SUMMARY_DIR, abbrlink);<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">json_data</span> = serde_json::<span class="hljs-title function_ invoke__">to_string</span>(summary_data)?;<br>    fs::<span class="hljs-title function_ invoke__">write</span>(&amp;summary_path, &amp;json_data)?;<br>    <span class="hljs-title function_ invoke__">Ok</span>(())<br>&#125;<br><br><span class="hljs-keyword">fn</span> <span class="hljs-title function_">load_summary</span>(abbrlink: &amp;<span class="hljs-type">str</span>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-type">Option</span>&lt;SummaryResponse&gt; &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">summary_path</span> = <span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;&#123;&#125;/&#123;&#125;.json&quot;</span>, SUMMARY_DIR, abbrlink);<br>    <span class="hljs-keyword">if</span> Path::<span class="hljs-title function_ invoke__">new</span>(&amp;summary_path).<span class="hljs-title function_ invoke__">exists</span>() &#123;<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(json_data) = fs::<span class="hljs-title function_ invoke__">read_to_string</span>(&amp;summary_path) &#123;<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Ok</span>(summary) = serde_json::<span class="hljs-title function_ invoke__">from_str</span>(&amp;json_data) &#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-title function_ invoke__">Some</span>(summary);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-literal">None</span><br>&#125;<br><br><span class="hljs-meta">#[post(<span class="hljs-string">&quot;/generate-summary&quot;</span>)]</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">generate_summary_handler</span>(<br>    data: web::Data&lt;AppState&gt;,<br>    req: HttpRequest,<br>    summary_request: web::Json&lt;SummaryRequest&gt;<br>) <span class="hljs-punctuation">-&gt;</span> <span class="hljs-keyword">impl</span> <span class="hljs-title class_">Responder</span> &#123;<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(auth_header) = req.<span class="hljs-title function_ invoke__">headers</span>().<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;Authorization&quot;</span>) &#123;<br>        <span class="hljs-keyword">let</span> <span class="hljs-variable">token</span> = auth_header.<span class="hljs-title function_ invoke__">to_str</span>().<span class="hljs-title function_ invoke__">unwrap_or</span>(<span class="hljs-string">&quot;&quot;</span>).<span class="hljs-title function_ invoke__">trim_start_matches</span>(<span class="hljs-string">&quot;Bearer &quot;</span>);<br>        <span class="hljs-keyword">if</span> token != data.auth_token &#123;<br>            <span class="hljs-keyword">return</span> HttpResponse::<span class="hljs-title function_ invoke__">Unauthorized</span>().<span class="hljs-title function_ invoke__">body</span>(<span class="hljs-string">&quot;鉴权失败：Token不正确&quot;</span>);<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> HttpResponse::<span class="hljs-title function_ invoke__">Unauthorized</span>().<span class="hljs-title function_ invoke__">body</span>(<span class="hljs-string">&quot;鉴权失败：缺失Token&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">referer</span> = req.<span class="hljs-title function_ invoke__">headers</span>().<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;Referer&quot;</span>).<span class="hljs-title function_ invoke__">and_then</span>(|v| v.<span class="hljs-title function_ invoke__">to_str</span>().<span class="hljs-title function_ invoke__">ok</span>());<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">origin</span> = req.<span class="hljs-title function_ invoke__">headers</span>().<span class="hljs-title function_ invoke__">get</span>(<span class="hljs-string">&quot;Origin&quot;</span>).<span class="hljs-title function_ invoke__">and_then</span>(|v| v.<span class="hljs-title function_ invoke__">to_str</span>().<span class="hljs-title function_ invoke__">ok</span>());<br>    <span class="hljs-keyword">if</span> !<span class="hljs-title function_ invoke__">is_valid_referer</span>(referer) &amp;&amp; !<span class="hljs-title function_ invoke__">is_valid_referer</span>(origin) &#123;<br>        <span class="hljs-keyword">return</span> HttpResponse::<span class="hljs-title function_ invoke__">Forbidden</span>().<span class="hljs-title function_ invoke__">body</span>(<span class="hljs-string">&quot;拒绝生成摘要：来源不正确&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">abbrlink</span> = summary_request.url<br>        .<span class="hljs-title function_ invoke__">split</span>(<span class="hljs-string">&#x27;/&#x27;</span>)<br>        .<span class="hljs-title function_ invoke__">filter</span>(|&amp;segment| !segment.<span class="hljs-title function_ invoke__">is_empty</span>())<br>        .<span class="hljs-title function_ invoke__">last</span>()<br>        .<span class="hljs-title function_ invoke__">unwrap_or</span>(<span class="hljs-string">&quot;&quot;</span>);<br><br>    <span class="hljs-keyword">if</span> abbrlink.<span class="hljs-title function_ invoke__">is_empty</span>() &#123;<br>        <span class="hljs-keyword">return</span> HttpResponse::<span class="hljs-title function_ invoke__">BadRequest</span>().<span class="hljs-title function_ invoke__">body</span>(<span class="hljs-string">&quot;Invalid URL format&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Some</span>(existing_summary) = <span class="hljs-title function_ invoke__">load_summary</span>(abbrlink) &#123;<br>        <span class="hljs-keyword">return</span> HttpResponse::<span class="hljs-title function_ invoke__">Ok</span>().<span class="hljs-title function_ invoke__">json</span>(existing_summary);<br>    &#125;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">summary</span> = <span class="hljs-keyword">match</span> <span class="hljs-title function_ invoke__">generate_summary</span>(&amp;summary_request.content).<span class="hljs-keyword">await</span> &#123;<br>        <span class="hljs-title function_ invoke__">Ok</span>(summary) =&gt; summary,<br>        <span class="hljs-title function_ invoke__">Err</span>(_) =&gt; <span class="hljs-keyword">return</span> HttpResponse::<span class="hljs-title function_ invoke__">InternalServerError</span>().<span class="hljs-title function_ invoke__">body</span>(<span class="hljs-string">&quot;摘要生成失败&quot;</span>),<br>    &#125;;<br><br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">summary_data</span> = SummaryResponse &#123;<br>        url: summary_request.url.<span class="hljs-title function_ invoke__">clone</span>(),<br>        summary: summary.<span class="hljs-title function_ invoke__">clone</span>(),<br>    &#125;;<br><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">let</span> <span class="hljs-variable">Err</span>(err) = <span class="hljs-title function_ invoke__">save_summary</span>(abbrlink, &amp;summary_data) &#123;<br>        <span class="hljs-keyword">return</span> HttpResponse::<span class="hljs-title function_ invoke__">InternalServerError</span>().<span class="hljs-title function_ invoke__">body</span>(<span class="hljs-built_in">format!</span>(<span class="hljs-string">&quot;存储摘要失败： &#123;&#125;&quot;</span>, err));<br>    &#125;<br><br>    HttpResponse::<span class="hljs-title function_ invoke__">Ok</span>().<span class="hljs-title function_ invoke__">json</span>(summary_data)<br>&#125;<br><br><span class="hljs-meta">#[actix_web::main]</span><br><span class="hljs-keyword">async</span> <span class="hljs-keyword">fn</span> <span class="hljs-title function_">main</span>() <span class="hljs-punctuation">-&gt;</span> std::io::<span class="hljs-type">Result</span>&lt;()&gt; &#123;<br>    fs::<span class="hljs-title function_ invoke__">create_dir_all</span>(SUMMARY_DIR)?;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable">auth_token</span> = std::env::<span class="hljs-title function_ invoke__">var</span>(<span class="hljs-string">&quot;AUTH_TOKEN&quot;</span>).<span class="hljs-title function_ invoke__">expect</span>(<span class="hljs-string">&quot;AUTH_TOKEN 未被设置&quot;</span>);<br><br>    <span class="hljs-built_in">println!</span>(<span class="hljs-string">&quot;服务端已经在 http://localhost:11451 开启&quot;</span>);<br><br>    HttpServer::<span class="hljs-title function_ invoke__">new</span>(<span class="hljs-keyword">move</span> || &#123;<br>        App::<span class="hljs-title function_ invoke__">new</span>()<br>            .<span class="hljs-title function_ invoke__">app_data</span>(web::Data::<span class="hljs-title function_ invoke__">new</span>(AppState &#123;<br>                auth_token: auth_token.<span class="hljs-title function_ invoke__">clone</span>(),<br>            &#125;))<br>            .<span class="hljs-title function_ invoke__">service</span>(generate_summary_handler)<br>    &#125;)<br>    .<span class="hljs-title function_ invoke__">bind</span>(<span class="hljs-string">&quot;127.0.0.1:11451&quot;</span>)?<br>    .<span class="hljs-title function_ invoke__">run</span>()<br>    .<span class="hljs-keyword">await</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（有兴趣就拿去用吧，标识原作者就好）</p><p>结果部署docker的时候服务器炸了，原因未知。</p><p>所以想着还是别再折腾我那辣鸡服务器了，遂转为用JavaScript写云函数，主打一个Serverless.</p><p>没什么好说的，主要是第一次写不太熟练，本身还是挺简单的。</p><p>遇到的问题是MongoDB没连上，无奈改为MySQL<span class="heimu" title="你知道的太多了">结果用的还是服务器上的数据库</span>。</p><h2 id="部署"><a class="markdownIt-Anchor" href="#部署"></a> 部署</h2><p>如果你想使用的话，前往<a href="https://github.com/OrdChaos/ordchaosgpt-cloud-function">这个项目的仓库</a>参考<code>readme.md</code>即可。</p><p>部署非常简单，有手就行，要求自备MySQL数据库。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>写了一上午的JS（</p><p>那就这样，886</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>javascript</tag>
      
      <tag>AI</tag>
      
      <tag>npm</tag>
      
      <tag>vercel</tag>
      
      <tag>无服务器</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——分块、线段树</title>
    <link href="/posts/6e841aef/"/>
    <url>/posts/6e841aef/</url>
    
    <content type="html"><![CDATA[<p>继续备赛CSP-S，这次解决一下此前让人<span class="heimu" title="你知道的太多了">只有我</span>闻之色变的线段树。</p><p>当然，在此之前，先来看看比较简单的分块。</p><span id="more"></span><p>不过在此之前，先理一理这两种数据结构（？）的适用范围。</p><p>（注：本文是对于<a href="https://oi-wiki.org/">OI WIKI</a>即其它内容写作而来的学习笔记，内容可能稍显一致，但绝非抄袭/洗稿等，欢迎对比）</p><h2 id="分块"><a class="markdownIt-Anchor" href="#分块"></a> 分块</h2><p>具体而言，分块并不是数据结构，而是一种思想。</p><p>在一次同时以相同操作处理大量数据时，不单独处理而进行统筹操作，一次性完成处理。</p><p>这使得其可以用于快速计算类似区间和的问题。</p><p>比之线段树其更为简单，当然，随数据量上升而渐进的复杂度就是相应的代价。</p><p>不过在数据量不大时显然分块更能帮助我们快速解决问题。</p><h3 id="原理"><a class="markdownIt-Anchor" href="#原理"></a> 原理</h3><p>想象我们有一组共<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个数据，记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">x_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">x_{n-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.638891em;vertical-align:-0.208331em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span>。</p><p>现在，我们希望得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ a,b \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>范围内的区间和。</p><p>如果线性存储，那么对于每次询问操作，都需要进行<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mi>b</mi><mo>−</mo><mi>a</mi><mo>+</mo><mn>1</mn><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left( b-a+1 \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>次求和，是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( n \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>级别的时间复杂度。</p><p>于是开始分块。将数据分为每<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi></mrow><annotation encoding="application/x-tex">y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>个一组，记为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>z</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">z_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>z</mi><mrow><mfrac><mi>n</mi><mi>y</mi></mfrac><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">z_{\frac{n}{y}-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.91858em;vertical-align:-0.4880199999999999em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33408000000000004em;"><span style="top:-2.85em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.4880199999999999em;"><span></span></span></span></span></span></span></span></span></span>（其中<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>z</mi><mi>i</mi></msub><mo>=</mo><msubsup><mo>∑</mo><mrow><mi>j</mi><mo>=</mo><mi>i</mi><mi>y</mi></mrow><mrow><mi>i</mi><mi>y</mi><mo>+</mo><mi>y</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>x</mi><mi>j</mi></msub></mrow><annotation encoding="application/x-tex">z_i=\sum_{j=iy}^{iy+y-1}{x_j}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.400382em;vertical-align:-0.43581800000000004em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.964564em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.2029000000000005em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.43581800000000004em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.311664em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span></span>）<sup id="fnref:1" class="footnote-ref"><a href="#fn:1" rel="footnote"><span class="hint--top hint--rounded" aria-label="本文内的除法均为整数除法。">[1]</span></a></sup>：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><munder><mrow><msub><mi>x</mi><mn>0</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>2</mn></msub><mo separator="true">,</mo><msub><mi>x</mi><mn>3</mn></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>y</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><mo stretchy="true">⏟</mo></munder></mo><msub><mi>z</mi><mn>0</mn></msub></munder><mo separator="true">,</mo><munder><mo><munder><mrow><msub><mi>x</mi><mi>y</mi></msub><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>y</mi><mo>+</mo><mn>1</mn></mrow></msub><mo separator="true">,</mo><mi mathvariant="normal">.</mi></mrow><mo stretchy="true">⏟</mo></munder></mo><mrow><msub><mi>z</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>z</mi><mn>2</mn></msub><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow></munder><mi mathvariant="normal">.</mi><munder><mo><munder><mrow><mi mathvariant="normal">.</mi><mo separator="true">,</mo><msub><mi>x</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><mo stretchy="true">⏟</mo></munder></mo><msub><mi>z</mi><mrow><mfrac><mi>n</mi><mi>y</mi></mfrac><mo>−</mo><mn>1</mn></mrow></msub></munder></mrow><annotation encoding="application/x-tex">\underset{z_0}{\underbrace{x_0,x_1,x_2,x_3,...,x_{y-1}}},\underset{z_1,z_2...}{\underbrace{x_y,x_{y+1},.}}.\underset{z_{\frac{n}{y}-1}}{\underbrace{.,x_{n-1}}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.517531em;vertical-align:-2.086971em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43056000000000005em;"><span style="top:-1.4658920000000002em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999994em;"><span class="svg-align" style="top:-2.065892em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.934108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.734208em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43056000000000005em;"><span style="top:-1.465892em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mpunct mtight">,</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31731428571428577em;"><span style="top:-2.357em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span><span class="mord mtight">.</span><span class="mord mtight">.</span><span class="mord mtight">.</span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999994em;"><span class="svg-align" style="top:-2.065892em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.934108em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.770216em;"><span></span></span></span></span></span></span><span class="mord">.</span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999983em;"><span style="top:-1.543669em;margin-left:0em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3447999999999999em;"><span style="top:-2.760828571428571em;margin-left:-0.04398em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size1 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8175600000000001em;"><span style="top:-2.468em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.387em;"><span class="pstrut" style="height:3em;"></span><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.72644em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size1 size6"></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7580571428571429em;"><span></span></span></span></span></span></span></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span><span class="mop"><span class="mord munder"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.43055999999999994em;"><span class="svg-align" style="top:-2.143669em;"><span class="pstrut" style="height:3em;"></span><span class="stretchy" style="height:0.548em;min-width:1.6em;"><span class="brace-left" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMinYMin slice'><path d='M0 6l6-6h17c12.688 0 19.313.3 20 1 4 4 7.313 8.3 10 13 35.313 51.3 80.813 93.8 136.5 127.5 55.688 33.7 117.188 55.8 184.5 66.5.688 0 2 .3 4 1 18.688 2.7 76 4.3 172 5h399450v120H429l-6-1c-124.688-8-235-61.7-331-161C60.687 138.7 32.312 99.3 7 54L0 41V6z'/></svg></span><span class="brace-center" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMidYMin slice'><path d='M199572 214c100.7 8.3 195.3 44 280 108 55.3 42 101.7 93 139 153l9 14c2.7-4 5.7-8.7 9-14 53.3-86.7 123.7-153 211-199 66.7-36 137.3-56.3 212-62h199568v120H200432c-178.3 11.7-311.7 78.3-403 201-6 8-9.7 12-11 12-.7.7-6.7 1-18 1s-17.3-.3-18-1c-1.3 0-5-4-11-12-44.7-59.3-101.3-106.3-170-141s-145.3-54.3-229-60H0V214z'/></svg></span><span class="brace-right" style="height:0.548em;"><svg width='400em' height='0.548em' viewBox='0 0 400000 548' preserveAspectRatio='xMaxYMin slice'><path d='M399994 0l6 6v35l-6 11c-56 104-135.3 181.3-238 232-57.3 28.7-117 45-179 50H-300V214h399897c43.3-7 81-15 113-26 100.7-33 179.7-91 237-174 2.7-5 6-9 10-13 .7-1 7.3-1 20-1h17z'/></svg></span></span></span><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">.</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.301108em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.208331em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8563310000000001em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.086971em;"><span></span></span></span></span></span></span></span></span></span></span></p><p>此时，对于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ a,b \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>的区间和，可以很容易想到求法（一般而言最后一块不会是完整块，不过无伤大雅）：</p><ul><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">x_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在同一块内，遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">x_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>求和。</li><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">x_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不在同一块内，区间和为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mi>a</mi></mrow><mrow><mfrac><mi>a</mi><mi>y</mi></mfrac><mi>y</mi><mo>+</mo><mi>y</mi><mo>−</mo><mn>1</mn></mrow></msubsup><msub><mi>x</mi><mi>i</mi></msub><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mfrac><mi>a</mi><mi>y</mi></mfrac><mo>+</mo><mn>1</mn></mrow><mrow><mfrac><mi>b</mi><mi>y</mi></mfrac><mo>−</mo><mn>1</mn></mrow></msubsup><mrow><msub><mi>z</mi><mi>i</mi></msub><mo>+</mo><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mfrac><mi>b</mi><mi>y</mi></mfrac><mi>y</mi></mrow><mi>b</mi></msubsup><msub><mi>x</mi><mi>i</mi></msub></mrow></mrow><annotation encoding="application/x-tex">\sum_{i=a}^{\frac{a}{y}y+y-1}{x_i}+\sum_{i=\frac{a}{y}+1}^{\frac{b}{y}-1}{z_i+\sum_{i=\frac{b}{y}y}^b{x_i}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.443764em;vertical-align:-0.27686399999999994em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.1669em;"><span style="top:-2.7231360000000002em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mathdefault mtight">a</span></span></span></span><span style="top:-3.68282em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.27686399999999994em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.9365699999999997em;vertical-align:-0.6377299999999999em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2988399999999998em;"><span style="top:-2.70072em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6915428571428572em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span><span style="top:-3.68282em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8800285714285714em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6373em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:-0.04398em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.9890079999999999em;"><span style="top:-2.70029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight"><span class="mopen nulldelimiter sizing reset-size3 size6"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8800285714285714em;"><span style="top:-2.656em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.2255000000000003em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line mtight" style="border-bottom-width:0.049em;"></span></span><span style="top:-3.384em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.48288571428571425em;"><span></span></span></span></span></span><span class="mclose nulldelimiter sizing reset-size3 size6"></span></span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.5029em;margin-right:0.05em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.6377299999999999em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.31166399999999994em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span></span></span>，即包含了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">x_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的不完整块与中间的完整块。</li></ul><p>只要在建块的时候进行预处理就可以通过分块节省大量时间（单次操作时间复杂度变为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mfrac><mi>n</mi><mi>y</mi></mfrac><mo>+</mo><mi>y</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left( \frac{n}{y}+y \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span>）</p><p>利用基本不等式<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi><mo>+</mo><mi>b</mi><mo>⩾</mo><mn>2</mn><msqrt><mrow><mi>a</mi><mi>b</mi></mrow></msqrt></mrow><annotation encoding="application/x-tex">a+b\geqslant 2\sqrt{ab}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83111em;vertical-align:-0.13667em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.10777999999999999em;"></span><span class="mord">2</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.93222em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span></span></span><span style="top:-2.89222em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.10777999999999999em;"><span></span></span></span></span></span></span></span></span>可以得知，当且仅当<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mi>n</mi><mi>y</mi></mfrac><mo>=</mo><mi>y</mi></mrow><annotation encoding="application/x-tex">\frac{n}{y}=y</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1764999999999999em;vertical-align:-0.481108em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span></span></span></span>时，<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">(</mo><mfrac><mi>n</mi><mi>y</mi></mfrac><mo>+</mo><mi>y</mi><mo fence="true">)</mo></mrow><annotation encoding="application/x-tex">\left( \frac{n}{y}+y \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.80002em;vertical-align:-0.65002em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.695392em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">y</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.481108em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span></span></span></span>取最小值<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">2\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord">2</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>。也就是说，当每个块大小为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msqrt><mi>n</mi></msqrt></mrow><annotation encoding="application/x-tex">\sqrt{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.04em;vertical-align:-0.23972em;"></span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span></span></span></span>时，单次操作得到最小时间复杂度<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><msqrt><mi>n</mi></msqrt><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(\sqrt{n} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.05028em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord sqrt"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8002800000000001em;"><span class="svg-align" style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="mord" style="padding-left:0.833em;"><span class="mord mathdefault">n</span></span></span><span style="top:-2.76028em;"><span class="pstrut" style="height:3em;"></span><span class="hide-tail" style="min-width:0.853em;height:1.08em;"><svg width='400em' height='1.08em' viewBox='0 0 400000 1080' preserveAspectRatio='xMinYMin slice'><path d='M95,702c-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14c0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54c44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10s173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429c69,-144,104.5,-217.7,106.5,-221c5.3,-9.3,12,-14,20,-14H400000v40H845.2724s-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7c-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z M834 80H400000v40H845z'/></svg></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.23972em;"><span></span></span></span></span></span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>。</p><p>于是我们可以尝试开始建块。</p><h3 id="建块"><a class="markdownIt-Anchor" href="#建块"></a> 建块</h3><p>首先，定义数据结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">blocks</span> &#123;<br>vector&lt;T&gt; datas;<br>vector&lt;T&gt; sums;<br><span class="hljs-type">size_t</span> s;<br><br><span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>用向量存储数据，用<code>s</code>来存储每一块的大小。</p><p>然后，建块：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//...</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">blocks</span> &#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(vector&lt;T&gt; d, <span class="hljs-type">size_t</span> ss)</span> </span>&#123;<br><span class="hljs-type">size_t</span> length = d.<span class="hljs-built_in">size</span>();<br><br>datas.<span class="hljs-built_in">clear</span>();<br>sums.<span class="hljs-built_in">clear</span>();<br>datas.<span class="hljs-built_in">resize</span>(length);<br><br>T sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; length;i++) &#123;<br>datas[i] = d[i];<br>sum += d[i];<br>cnt++;<br><span class="hljs-keyword">if</span>(cnt == ss) &#123;<br>sums.<span class="hljs-built_in">push_back</span>(sum);<br>cnt = <span class="hljs-number">0</span>;<br>sum = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(cnt != <span class="hljs-number">0</span>) sums.<span class="hljs-built_in">push_back</span>(sum);<br><br>s = ss;<br>&#125;<br><br><span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>在建块时计算每一块的区间和并存储即可（别忘了可能有的不完整块）。</p><p>以及根据由基本不等式得到的结论，块大小<code>s</code>一般为<code>size_t(sqrt(d.size()))</code></p><p>对于求区间和操作，依照原理一节所述操作即可。</p><p>如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//...</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">blocks</span> &#123;<br><span class="hljs-comment">//...</span><br><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end)</span> </span>&#123;<br>            <span class="hljs-type">size_t</span> block_begin = begin / s;<br>            <span class="hljs-type">size_t</span> block_end = end / s;<br><br>            T sum = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-comment">//在同一块里吗？</span><br>            <span class="hljs-keyword">if</span>(block_begin == block_end) &#123;<br>                <span class="hljs-comment">//如果在，线性遍历求和即可</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin;i &lt;= end;i++) &#123;<br>                    sum += datas[i];<br>                &#125;<br><br>                <span class="hljs-keyword">return</span> sum;<br>            &#125;<br><br>            <span class="hljs-comment">//如果不在，分别计算左、中、右三部分</span><br>            <span class="hljs-comment">//左</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin;i &lt; (block_begin + <span class="hljs-number">1</span>) * s;i++) &#123;<br>                sum += datas[i];<br>            &#125;<br><br>            <span class="hljs-comment">//右（注意小于等于）</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_end * s;i &lt;= end;i++) &#123;<br>                sum += datas[i];<br>            &#125;<br><br>            <span class="hljs-comment">//中</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_begin + <span class="hljs-number">1</span>;i &lt; block_end;i++) &#123;<br>                sum += sums[i];<br>            &#125;<br><br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br><br><span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="更改"><a class="markdownIt-Anchor" href="#更改"></a> 更改</h3><p>存入了数据后，我们自然希望能够自由地更改存入的数据。</p><p>对于区间内的修改操作，同样分为两类（以修改区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ a,b\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>为例）：</p><ul><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">x_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>在同一块内，遍历<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">x_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>赋值（需要重新计算区间和）。</li><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">x_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>不在同一块内，遍历包含了<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>a</mi></msub></mrow><annotation encoding="application/x-tex">x_a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>x</mi><mi>b</mi></msub></mrow><annotation encoding="application/x-tex">x_b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.33610799999999996em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">b</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>的两个不完整块赋值（同上），以及修改中间完整块的区间和即可（无需修改数据本身，具体内容如下代码）。</li></ul><p>问题在于，修改了包含数个整块的数据的值以后，计算修改范围内的完整块内的区间和时可能会导致结果未正确更新。此时需要引入新结构：懒惰标记（lazy marker）。</p><p>对每一个块建立懒惰标记，在查询时通过懒惰标记累计增量更新即可。</p><p>所以我们有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">blocks</span> &#123;<br>vector&lt;T&gt; datas;<br>vector&lt;T&gt; sums;<br>vector&lt;T&gt; lazy_markers; <span class="hljs-comment">//引入懒惰标记</span><br><span class="hljs-type">size_t</span> s;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(vector&lt;T&gt; d, <span class="hljs-type">size_t</span> ss)</span> </span>&#123;<br><span class="hljs-type">size_t</span> length = d.<span class="hljs-built_in">size</span>();<br><br>datas.<span class="hljs-built_in">clear</span>();<br>sums.<span class="hljs-built_in">clear</span>();<br>lazy_markers.<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">//清空懒惰标记</span><br>datas.<span class="hljs-built_in">resize</span>(length);<br><br>T sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> cnt = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>;i &lt; length;i++) &#123;<br>datas[i] = d[i];<br>sum += d[i];<br>cnt++;<br><span class="hljs-keyword">if</span>(cnt == ss) &#123;<br>sums.<span class="hljs-built_in">push_back</span>(sum);<br>lazy_markers.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//与sums一一对应</span><br>cnt = <span class="hljs-number">0</span>;<br>sum = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(cnt != <span class="hljs-number">0</span>) &#123;<br>sums.<span class="hljs-built_in">push_back</span>(sum);<br>lazy_markers.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>); <span class="hljs-comment">//同理，与sums一一对应</span><br>&#125;<br><br>s = ss;<br>&#125;<br><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end)</span> </span>&#123;<br>            <span class="hljs-type">size_t</span> block_begin = begin / s;<br>            <span class="hljs-type">size_t</span> block_end = end / s;<br><br>            T sum = <span class="hljs-number">0</span>;<br><br>            <span class="hljs-keyword">if</span>(block_begin == block_end) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin;i &lt;= end;i++) &#123;<br>                    sum += datas[i] + lazy_marker[block_begin]; <span class="hljs-comment">//增加懒惰标记内的增量</span><br>                &#125;<br><br>                <span class="hljs-keyword">return</span> sum;<br>            &#125;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin;i &lt; (block_begin + <span class="hljs-number">1</span>) * s;i++) &#123;<br>                sum += datas[i] + lazy_marker[block_begin]; <span class="hljs-comment">//增加懒惰标记内的增量</span><br>            &#125;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_end * s;i &lt;= end;i++) &#123;<br>                sum += datas[i] + lazy_marker[block_end]; <span class="hljs-comment">//增加懒惰标记内的增量</span><br>            &#125;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_begin + <span class="hljs-number">1</span>;i &lt; block_end;i++) &#123;<br>                sum += sums[i];<span class="hljs-comment">//区间和已被改变，无需考虑增量</span><br>            &#125;<br><br>            <span class="hljs-keyword">return</span> sum;<br>        &#125;<br><br><span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><p>由此，对于增量，我们可以有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//...</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">blocks</span> &#123;<br><span class="hljs-comment">//...</span><br><br>    <span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//...</span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end, T value)</span> </span>&#123;<br>            <span class="hljs-comment">//在同一块里吗？</span><br>            <span class="hljs-keyword">if</span>(block_begin == block_end) &#123;<br>                <span class="hljs-comment">//如果在，线性遍历更新即可</span><br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin;i &lt;= end;i++) &#123;<br>                    datas[i] += value;<br>                    sums[block_begin] += value; <span class="hljs-comment">//更新区间和</span><br>                &#125;<br><br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br><span class="hljs-comment">//如果不在，分别更新左、中、右部分</span><br><span class="hljs-comment">//左</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin;i &lt; (block_begin + <span class="hljs-number">1</span>) * s;i++) &#123;<br>datas[i] += value;<br>sums[block_begin] += value; <span class="hljs-comment">//更新区间和</span><br>&#125;<br><br>            <span class="hljs-comment">//右（注意小于等于）</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_end * s;i &lt;= end;i++) &#123;<br>                datas[i] += value;<br>                sums[block_end] += value; <span class="hljs-comment">//更新区间和</span><br>            &#125;<br><br>            <span class="hljs-comment">//中</span><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_begin + <span class="hljs-number">1</span>;i &lt; block_end;i++) &#123;<br>                sums[i] += value * s; <span class="hljs-comment">//更新区间和</span><br>                lazy_marker[i] += value; <span class="hljs-comment">//更新懒惰标记</span><br>            &#125;<br>&#125;<br><br><span class="hljs-comment">//...</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="比较"><a class="markdownIt-Anchor" href="#比较"></a> 比较</h3><p>当我们希望得到区间最小/最大值时，同样可以采取分块的思想。</p><p>相信根据懒惰标记的方法也能想到，只需要再添加两个向量用于维护区间最小/最大值即可。</p><p>原理仍然一致，这里不重复给出。</p><p>以下是完整的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">blocks</span> &#123;<br>vector&lt;T&gt; datas;<br>vector&lt;T&gt; sums;<br>vector&lt;T&gt; lazy_markers;<br>    vector&lt;T&gt; maxs; <span class="hljs-comment">//维护区间最大值</span><br>    vector&lt;T&gt; mins; <span class="hljs-comment">//维护区间最小值</span><br><span class="hljs-type">size_t</span> s;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(vector&lt;T&gt; d, <span class="hljs-type">size_t</span> ss)</span> </span>&#123;<br><span class="hljs-type">size_t</span> length = d.<span class="hljs-built_in">size</span>();<br><br>datas.<span class="hljs-built_in">clear</span>();<br>sums.<span class="hljs-built_in">clear</span>();<br>lazy_markers.<span class="hljs-built_in">clear</span>();<br>        maxs.<span class="hljs-built_in">clear</span>();<br>        mins.<span class="hljs-built_in">clear</span>();<br>datas.<span class="hljs-built_in">resize</span>(length);<br><br>T sum = <span class="hljs-number">0</span>;<br><span class="hljs-type">size_t</span> cnt = <span class="hljs-number">0</span>;<br>        T max_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">min</span>(); <span class="hljs-comment">//当作负无穷</span><br>        T min_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">max</span>(); <span class="hljs-comment">//当作正无穷</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; length; i++) &#123;<br>datas[i] = d[i];<br>sum += d[i];<br>            max_val = <span class="hljs-built_in">max</span>(max_val, d[i]);<br>            min_val = <span class="hljs-built_in">min</span>(min_val, d[i]);<br>            cnt++;<br><span class="hljs-keyword">if</span>(cnt == ss) &#123;<br>sums.<span class="hljs-built_in">push_back</span>(sum);<br>lazy_markers.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>                maxs.<span class="hljs-built_in">push_back</span>(max_val);<br>                mins.<span class="hljs-built_in">push_back</span>(min_val);<br>                max_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">min</span>();<br>                min_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">max</span>();<br>sum = <span class="hljs-number">0</span>;<br>                cnt = <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(cnt != <span class="hljs-number">0</span>) &#123;<br>sums.<span class="hljs-built_in">push_back</span>(sum);<br>lazy_markers.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br>            maxs.<span class="hljs-built_in">push_back</span>(max_val);<br>            mins.<span class="hljs-built_in">push_back</span>(min_val);<br>&#125;<br><br>s = ss;<br>&#125;<br><br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">//构造函数</span><br>        <span class="hljs-built_in">blocks</span>(<span class="hljs-type">const</span> vector&lt;T&gt;&amp; d, <span class="hljs-type">size_t</span> ss) &#123;<br>            <span class="hljs-built_in">build</span>(d, ss);<br>        &#125;<br><br><span class="hljs-comment">//query不变</span><br><br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end, T value)</span> </span>&#123;<br>            <span class="hljs-type">size_t</span> block_begin = begin / s;<br>            <span class="hljs-type">size_t</span> block_end = end / s;<br><br>            <span class="hljs-comment">//重新计算最大/最小值</span><br>            T max_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">min</span>();<br>            T min_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">max</span>();<br><br>            <span class="hljs-keyword">if</span>(block_begin == block_end) &#123;<br>                <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin; i &lt;= end; i++) &#123;<br>                    datas[i] += value;<br>                    sums[block_begin] += value;<br>                    max_val = <span class="hljs-built_in">max</span>(max_val, datas[i]);<br>                    min_val = <span class="hljs-built_in">min</span>(min_val, datas[i]);<br>                &#125;<br>                <span class="hljs-comment">//更新最大/最小值</span><br>                maxs[block_begin] = <span class="hljs-built_in">max</span>(maxs[block_begin], max_val);<br>                mins[block_begin] = <span class="hljs-built_in">min</span>(mins[block_begin], min_val);<br>                <span class="hljs-keyword">return</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin; i &lt; (block_begin + <span class="hljs-number">1</span>) * s; i++) &#123;<br>                datas[i] += value;<br>                sums[block_begin] += value;<br>                max_val = <span class="hljs-built_in">max</span>(max_val, datas[i]);<br>                min_val = <span class="hljs-built_in">min</span>(min_val, datas[i]);<br>            &#125;<br>            maxs[block_begin] = <span class="hljs-built_in">max</span>(maxs[block_begin], max_val);<br>            mins[block_begin] = <span class="hljs-built_in">min</span>(mins[block_begin], min_val);<br><br>            max_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">min</span>();<br>            min_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">max</span>();<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_end * s; i &lt;= end; i++) &#123;<br>                datas[i] += value;<br>                sums[block_end] += value;<br>                max_val = <span class="hljs-built_in">max</span>(max_val, datas[i]);<br>                min_val = <span class="hljs-built_in">min</span>(min_val, datas[i]);<br>            &#125;<br>            maxs[block_end] = <span class="hljs-built_in">max</span>(maxs[block_end], max_val);<br>            mins[block_end] = <span class="hljs-built_in">min</span>(mins[block_end], min_val);<br><br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_begin + <span class="hljs-number">1</span>; i &lt; block_end; i++) &#123;<br>                sums[i] += value * s;<br>                lazy_markers[i] += value;<br>                maxs[i] += value;<br>                mins[i] += value;<br>            &#125;<br>        &#125;<br><br>    <span class="hljs-comment">//与query和update相同的结构：是否在同一块内-&gt;计算，query_min同理</span><br>    <span class="hljs-function">T <span class="hljs-title">query_max</span><span class="hljs-params">(<span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end)</span> </span>&#123;<br>        <span class="hljs-type">size_t</span> block_begin = begin / s;<br>        <span class="hljs-type">size_t</span> block_end = end / s;<br><br>        T max_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">min</span>();<br><br>        <span class="hljs-keyword">if</span>(block_begin == block_end) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin; i &lt;= end; i++) &#123;<br>                max_val = <span class="hljs-built_in">max</span>(max_val, datas[i] + lazy_markers[block_begin]); <span class="hljs-comment">//注意处理懒惰标记的影响，以下同理</span><br>            &#125;<br>            <span class="hljs-keyword">return</span> max_val;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin; i &lt; (block_begin + <span class="hljs-number">1</span>) * s; i++) &#123;<br>            max_val = <span class="hljs-built_in">max</span>(max_val, datas[i] + lazy_markers[block_begin]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_end * s; i &lt;= end; i++) &#123;<br>            max_val = <span class="hljs-built_in">max</span>(max_val, datas[i] + lazy_markers[block_end]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_begin + <span class="hljs-number">1</span>; i &lt; block_end; i++) &#123;<br>            max_val = <span class="hljs-built_in">max</span>(max_val, maxs[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> max_val;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">query_min</span><span class="hljs-params">(<span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end)</span> </span>&#123;<br>        <span class="hljs-type">size_t</span> block_begin = begin / s;<br>        <span class="hljs-type">size_t</span> block_end = end / s;<br><br>        T min_val = numeric_limits&lt;T&gt;::<span class="hljs-built_in">max</span>();<br><br>        <span class="hljs-keyword">if</span>(block_begin == block_end) &#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin; i &lt;= end; i++) &#123;<br>                min_val = <span class="hljs-built_in">min</span>(min_val, datas[i] + lazy_markers[block_begin]);<br>            &#125;<br>            <span class="hljs-keyword">return</span> min_val;<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = begin; i &lt; (block_begin + <span class="hljs-number">1</span>) * s; i++) &#123;<br>            min_val = <span class="hljs-built_in">min</span>(min_val, datas[i] + lazy_markers[block_begin]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_end * s; i &lt;= end; i++) &#123;<br>            min_val = <span class="hljs-built_in">min</span>(min_val, datas[i] + lazy_markers[block_end]);<br>        &#125;<br><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">size_t</span> i = block_begin + <span class="hljs-number">1</span>; i &lt; block_end; i++) &#123;<br>            min_val = <span class="hljs-built_in">min</span>(min_val, mins[i]);<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> min_val;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>一般而言，不会有题目同时要求进行数据变更、求区间和、求最值。</p><p>如果有，更推荐写线段树，毕竟分块拓展到这种程度也不简单了。</p><p>最后，对于懒惰标记的影响范围：</p><ul><li>赋值时：由update方法确定<strong>区间和</strong>的懒惰标记（datas、maxs、mins；不完整块直接线性增加）。</li><li>使用时：只对<strong>完整区间</strong>内的<strong>datas</strong>（换句话说，第三个循环/遍历中间块的循环内的datas）数据增加<strong>该块的懒惰标记</strong>；在query、query_max、query_min内使用。</li></ul><h3 id="例题"><a class="markdownIt-Anchor" href="#例题"></a> 例题</h3><p>如上文，几乎没有同时要求进行数据变更、求区间和、求最值的例题。</p><p>这里随便放一道看看得了。</p><p>题目来自洛谷<a href="https://www.luogu.com.cn/problem/P1816">P1816 忠诚</a></p><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>老管家是一个聪明能干的人。他为财主工作了整整<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>10</mn></mrow><annotation encoding="application/x-tex">10</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">0</span></span></span></span>年。财主为了让自已账目更加清楚，要求管家每天记<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>次账。由于管家聪明能干，因而管家总是让财主十分满意。但是由于一些人的挑拨，财主还是对管家产生了怀疑。于是他决定用一种特别的方法来判断管家的忠诚，他把每次的账目按<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn><mo separator="true">,</mo><mn>2</mn><mo separator="true">,</mo><mn>3</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi></mrow><annotation encoding="application/x-tex">1,2,3,...</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">.</span><span class="mord">.</span><span class="mord">.</span></span></span></span>编号，然后不定时的问管家问题，问题是这样的：在<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>a</mi></mrow><annotation encoding="application/x-tex">a</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span></span></span>到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>b</mi></mrow><annotation encoding="application/x-tex">b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span></span></span></span>号账中最少的一笔是多少？为了让管家没时间作假，他总是一次问多个问题。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>输入中第一行有两个数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>表示有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>笔账和<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个问题。</p><p>第二行为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>个数，分别是账目的钱数。</p><p>后面<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>行分别是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个问题，每行有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn></mrow><annotation encoding="application/x-tex">2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span></span></span>个数字说明开始结束的账目编号。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>在一行中输出每个问题的答案，以一个空格分割。</p><h4 id="输入样例"><a class="markdownIt-Anchor" href="#输入样例"></a> 输入样例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">10 3<br>1 2 3 4 5 6 7 8 9 10<br>2 7<br>3 9<br>1 10<br></code></pre></td></tr></table></figure><h4 id="输出样例"><a class="markdownIt-Anchor" href="#输出样例"></a> 输出样例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">2 3 1<br></code></pre></td></tr></table></figure><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><p>上文重复了多遍建块以及各种操作的代码，故而这里只给出<code>main</code>函数。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">//blocks相关</span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> m, n;<br>    cin &gt;&gt; m &gt;&gt; n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(m)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; ++i) &#123;<br>        cin &gt;&gt; data[i];<br>    &#125;<br><br>    <span class="hljs-function">blocks&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(data, <span class="hljs-type">size_t</span>(sqrt(data.size())))</span></span>;<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; results;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; ++i) &#123;<br>        <span class="hljs-type">int</span> a, c;<br>        cin &gt;&gt; a &gt;&gt; c;<br>        results.<span class="hljs-built_in">push_back</span>(b.<span class="hljs-built_in">query_min</span>(a - <span class="hljs-number">1</span>, c - <span class="hljs-number">1</span>));<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> result : results) &#123;<br>        cout &lt;&lt; result &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h3><p>再次申明：分块是一种思想而不是数据结构，故而用法绝对不止这些。</p><p>在同时处理大量数据时，不妨考虑一下分块。</p><h2 id="线段树"><a class="markdownIt-Anchor" href="#线段树"></a> 线段树</h2><p>线段树是用来维护区间信息的<strong>数据结构</strong>。</p><p>相比于分块而言，线段树的结构更为细化，可以精确的控制数据的索引范围，而无需对于不完整部分进行遍历。</p><h3 id="原理-2"><a class="markdownIt-Anchor" href="#原理-2"></a> 原理</h3><blockquote><p>线段树将每个长度不为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>1</mn></mrow><annotation encoding="application/x-tex">1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>的区间划分成左右两个区间递归求解，把整个线段划分为一个树形结构，通过合并左右两区间信息来求得该区间的信息。这种数据结构可以方便的进行大部分的区间操作。<br />——<a href="https://oi-wiki.org/ds/seg/">OI WIKI - 线段树</a></p></blockquote><p>看到这段话之后有没有想起什么？</p><p>没错，是递归。通过递归就可以不断细化每一个左、右子树，直至叶节点为止。</p><h3 id="建树"><a class="markdownIt-Anchor" href="#建树"></a> 建树</h3><p>首先建立数据结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SegTree</span> &#123;<br>vector&lt;T&gt; datas;<br>vector&lt;T&gt; lazy_markers; <span class="hljs-comment">//懒惰标记，应该没忘记吧</span><br><span class="hljs-type">size_t</span> length;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后考虑递归建树即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//是SegTree的成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(vector&lt;T&gt; &amp;d, <span class="hljs-type">size_t</span> node, <span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(begin == end) &#123; <span class="hljs-comment">//是叶节点</span><br>datas[node] = d[begin];<br>&#125;<br><span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//不是叶节点</span><br><span class="hljs-type">size_t</span> mid = (begin + end) / <span class="hljs-number">2</span>;<br><span class="hljs-built_in">build</span>(d, node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, begin, mid);    <span class="hljs-comment">//左子树</span><br><span class="hljs-built_in">build</span>(d, node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>, mid + <span class="hljs-number">1</span>, end);  <span class="hljs-comment">//右子树</span><br>datas[node] = datas[node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] + datas[node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>];<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span>:<br><span class="hljs-built_in">SegTree</span>(vector&lt;T&gt; &amp;d) &#123; <span class="hljs-comment">//构造函数</span><br>datas.<span class="hljs-built_in">clear</span>();<br>lazy_markers.<span class="hljs-built_in">clear</span>();<br>length = d.<span class="hljs-built_in">size</span>();<br><br>datas.<span class="hljs-built_in">resize</span>(length * <span class="hljs-number">4</span>);<br>lazy_markers.<span class="hljs-built_in">resize</span>(length * <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br><br><span class="hljs-built_in">build</span>(d, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>可能会有人认为完全二叉树的左右子节点应该是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi></mrow><annotation encoding="application/x-tex">2n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span></span></span></span>与<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>n</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2n+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，但对于<code>0base</code>的数组而言，显然<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mo>×</mo><mn>0</mn><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">2\times 0=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">×</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span>代表不了子节点。</p><h3 id="查询区间和"><a class="markdownIt-Anchor" href="#查询区间和"></a> 查询/区间和</h3><p>为何线段树由于分块？答案就在这里。</p><p>来看看这张图（备好草稿纸，照着下面的流程对着图自己想象一下）：</p><p><img src="https://img.ordchaos.com/img/2024/08/79b1b7f18647e1f5596bc89cdfd11b29.png" alt="" /></p><p>根据<code>build</code>方法，对<code>&#123;1, 2, 3, 4, 5&#125;</code>建树，可以得到这样的一棵完全二叉树。</p><p>若我们希望得到<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>b</mi><mo separator="true">,</mo><mi>e</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ b,e\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>的区间和，流程如下：</p><ul><li><ol><li>将目前区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>s</mi><mo separator="true">,</mo><mi>t</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ s,t\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>设置为<strong>整个区间</strong>；</li></ol></li><li><ol start="2"><li>目前区间是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>b</mi><mo separator="true">,</mo><mi>e</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ b,e\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>的子区间吗？如果是，返回目前区间的区间和；如果不是且<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>b</mi><mo separator="true">,</mo><mi>e</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ b,e\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>与目前区间<strong>有交区间</strong>，继续。</li></ol></li><li><ol start="3"><li><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mi>i</mi><mi>d</mi><mo>=</mo><mfrac><mrow><mi>s</mi><mo>+</mo><mi>t</mi></mrow><mn>2</mn></mfrac></mrow><annotation encoding="application/x-tex">mid=\frac{s+t}{2}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.169556em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.824556em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">s</span><span class="mbin mtight">+</span><span class="mord mathdefault mtight">t</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>，由此将<strong>目前区间</strong>划分为左区间（左子树；右子树同理）<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>s</mi><mo separator="true">,</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ s,mid\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">s</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>与右区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo stretchy="false">[</mo><mi>m</mi><mi>i</mi><mi>d</mi><mo>+</mo><mn>1</mn><mo separator="true">,</mo><mi>t</mi><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">[mid+1,t]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathdefault">m</span><span class="mord mathdefault">i</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">t</span><span class="mclose">]</span></span></span></span>；</li></ol></li><li><ol start="4"><li>递归查找左区间与右区间，返回左区间返回值与右区间返回值之和。</li></ol></li></ul><p>这样可以方便快速地将待查区间划分为尽可能大的不同区间，而这些区间的区间和已经被储存，就不需要遍历以获取区间和了。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//是SegTree的成员函数</span><br><span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">size_t</span> node, <span class="hljs-type">size_t</span> begin_now, <span class="hljs-type">size_t</span> end_now, <span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(begin_now &gt; end || end_now &lt; begin) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>; <span class="hljs-comment">//不在查找范围内，返回0</span><br><span class="hljs-keyword">if</span>(begin_now &gt;= begin &amp;&amp; end_now &lt;= end) <span class="hljs-keyword">return</span> datas[node]; <span class="hljs-comment">//目前区间是目标区间的子区间，返回区间和</span><br><br><span class="hljs-type">size_t</span> mid = (begin_now + end_now) / <span class="hljs-number">2</span>;<br>T left_res = <span class="hljs-built_in">query</span>(node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, begin_now, mid, begin, end);       <span class="hljs-comment">//左区间</span><br>T right_res = <span class="hljs-built_in">query</span>(node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>, mid + <span class="hljs-number">1</span>, end_now, begin, end);  <span class="hljs-comment">//右区间</span><br><span class="hljs-keyword">return</span> left_res + right_res;<br>&#125;<br></code></pre></td></tr></table></figure><p>调用时使用<code>this-&gt;query(0, 0, length - 1, b, e)</code>即可。</p><h3 id="修改"><a class="markdownIt-Anchor" href="#修改"></a> 修改</h3><p>利用懒惰标记即可，这里的懒惰标记表明“这个区间内的所有元素都应当加上懒惰标记”。</p><p>换句话说，你会发现懒惰标记与线段树的大小与结构一模一样。对于节点<code>node</code>，其懒惰标记就存在<code>lazy_markers[node]</code>里。</p><p>因此流程实际上与求区间和是一模一样的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//是SegTree的成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">size_t</span> node, <span class="hljs-type">size_t</span> begin_now, <span class="hljs-type">size_t</span> end_now, <span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end, T value)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(begin_now &gt; end || end_now &lt; begin) <span class="hljs-keyword">return</span>;<br><span class="hljs-keyword">if</span>(begin_now &gt;= begin &amp;&amp; end_now &lt;= end) &#123;<br>datas[node] += (end_now - begin_now + <span class="hljs-number">1</span>) * value; <span class="hljs-comment">//区间和增加</span><br><span class="hljs-keyword">if</span>(begin_now != end_now) &#123;<br>lazy_markers[node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += value; <span class="hljs-comment">//设置左右区间的懒惰标记（即整个区间）</span><br>lazy_markers[node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] += value;<br>&#125;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-type">size_t</span> mid = (begin_now + end_now) / <span class="hljs-number">2</span>;<br><span class="hljs-built_in">update</span>(node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, begin_now, mid, begin, end, value);          <span class="hljs-comment">//左区间</span><br><span class="hljs-built_in">update</span>(node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>, mid + <span class="hljs-number">1</span>, end_now, begin, end, value);      <span class="hljs-comment">//右区间</span><br>datas[node] = datas[node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] + datas[node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>]; <span class="hljs-comment">//当前区间</span><br>&#125;<br></code></pre></td></tr></table></figure><p>为了应用懒惰标记，我们也需要一个方法，这个方法将当前节点的懒惰标记加载当前节点的值上，然后设置其左右子节点的懒惰标记（<strong>传递懒惰标记</strong>）</p><p>那就写呗：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//是SegTree的成员函数</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">size_t</span> node, <span class="hljs-type">size_t</span> begin_now, <span class="hljs-type">size_t</span> end_now)</span> </span>&#123; <span class="hljs-comment">//在使用时传递区间大小</span><br><span class="hljs-keyword">if</span>(lazy_markers[node] != <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//需要更新</span><br>datas[node] += (end_now - begin_now + <span class="hljs-number">1</span>) * lazy_markers[node];<br><span class="hljs-keyword">if</span>(begin_now != end_now) &#123; <span class="hljs-comment">//不是叶节点</span><br>lazy_markers[<span class="hljs-number">2</span> * node + <span class="hljs-number">1</span>] += lazy_markers[node];<br>lazy_markers[<span class="hljs-number">2</span> * node + <span class="hljs-number">2</span>] += lazy_markers[node];<br>&#125;<br>lazy_markers[node] = <span class="hljs-number">0</span>; <span class="hljs-comment">//释放</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>你会发现这个操作是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>O</mi><mrow><mo fence="true">(</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">O\left(1 \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>的。</p><p>Without thinking twice，在每次<code>query</code>与<code>update</code>以前调用即可。</p><h3 id="比较-2"><a class="markdownIt-Anchor" href="#比较-2"></a> 比较</h3><p>不像分块那么复杂，只需要修改维护<code>datas</code>的规则，我们就可以轻松进行对最小/最大值的查询。</p><p>当前对<code>datas</code>的维护规则是：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi>s</mi><mrow><mo fence="true">[</mo><mi>i</mi><mo fence="true">]</mo></mrow><mo>=</mo><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi>s</mi><mrow><mo fence="true">[</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn><mo fence="true">]</mo></mrow><mo>+</mo><mi>d</mi><mi>a</mi><mi>t</mi><mi>a</mi><mi>s</mi><mrow><mo fence="true">[</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>2</mn><mo fence="true">]</mo></mrow></mrow><annotation encoding="application/x-tex">datas\left[i \right]=datas\left[2i+1 \right]+datas\left[2i+2 \right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">i</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">]</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">a</span><span class="mord mathdefault">t</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>，将<code>sum</code>改为<code>min</code>或者<code>max</code>即可得到最值。（懒惰标记的维护不变）</p><p>代码就不放了。</p><h3 id="例题-2"><a class="markdownIt-Anchor" href="#例题-2"></a> 例题</h3><p>来一道模板吧！</p><p>题目来自洛谷<a href="https://www.luogu.com.cn/problem/P3372">P3372 【模板】线段树 1</a></p><h4 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h4><p>如题，已知一个数列，你需要进行下面两种操作：</p><ul><li>将某区间每一个数加上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span>。</li><li>求出某区间每一个数的和。</li></ul><h4 id="输入格式-2"><a class="markdownIt-Anchor" href="#输入格式-2"></a> 输入格式</h4><p>第一行包含两个整数<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi><mo separator="true">,</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">m,n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span></span></span></span>，分别表示该数列数字的个数和操作的总个数。</p><p>第二行包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>个用空格分隔的整数，其中第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>个数字表示数列第<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi></mrow><annotation encoding="application/x-tex">i</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span></span></span></span>项的初始值。</p><p>接下来<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span>行每行包含<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>3</mn></mrow><annotation encoding="application/x-tex">3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span></span></span></span>或<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>4</mn></mrow><annotation encoding="application/x-tex">4</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span></span></span>个整数，表示一个操作，具体如下：</p><ul><li><code>1 x y k</code> 将区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ x,y\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>内每个数加上<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>k</mi></mrow><annotation encoding="application/x-tex">k</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span></span></li><li><code>2 x y</code> 输出区间<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo fence="true">[</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo fence="true">]</mo></mrow><annotation encoding="application/x-tex">\left[ x,y\right]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">[</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose delimcenter" style="top:0em;">]</span></span></span></span></span>内每个数的和</li></ul><h4 id="输出格式-2"><a class="markdownIt-Anchor" href="#输出格式-2"></a> 输出格式</h4><p>输出包含若干行整数，即为所有操作 2 的结果。</p><h4 id="输入样例-2"><a class="markdownIt-Anchor" href="#输入样例-2"></a> 输入样例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">5 5<br>1 5 4 2 3<br>2 2 4<br>1 2 3 2<br>2 3 4<br>1 1 5 1<br>2 1 4<br></code></pre></td></tr></table></figure><h4 id="输出样例-2"><a class="markdownIt-Anchor" href="#输出样例-2"></a> 输出样例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">11<br>8<br>20<br></code></pre></td></tr></table></figure><h4 id="题解-2"><a class="markdownIt-Anchor" href="#题解-2"></a> 题解</h4><p>套！！！模！！！板！！！</p><p>注！！！意！！！开！！！<code>long long</code>！！！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SegTree</span> &#123;<br>vector&lt;T&gt; datas;<br>vector&lt;T&gt; lazy_markers;<br><span class="hljs-type">size_t</span> length;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">build</span><span class="hljs-params">(vector&lt;T&gt; &amp;d, <span class="hljs-type">size_t</span> node, <span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(begin == end) &#123;<br>    datas[node] = d[begin];<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-type">size_t</span> mid = (begin + end) / <span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">build</span>(d, node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, begin, mid);<br>    <span class="hljs-built_in">build</span>(d, node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>, mid + <span class="hljs-number">1</span>, end);<br>    datas[node] = datas[node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] + datas[node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>];<br>    &#125;<br>    &#125;<br>    <br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">size_t</span> node, <span class="hljs-type">size_t</span> begin_now, <span class="hljs-type">size_t</span> end_now, <span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end)</span> </span>&#123;<br>        <span class="hljs-built_in">push</span>(node, begin_now, end_now);<br>        <span class="hljs-keyword">if</span>(begin_now &gt; end || end_now &lt; begin) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span>(begin_now &gt;= begin &amp;&amp; end_now &lt;= end) <span class="hljs-keyword">return</span> datas[node];<br><br>        <span class="hljs-type">size_t</span> mid = (begin_now + end_now) / <span class="hljs-number">2</span>;<br>        T left_res = <span class="hljs-built_in">query</span>(node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, begin_now, mid, begin, end);<br>        T right_res = <span class="hljs-built_in">query</span>(node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>, mid + <span class="hljs-number">1</span>, end_now, begin, end);<br>        <span class="hljs-keyword">return</span> left_res + right_res;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">size_t</span> node, <span class="hljs-type">size_t</span> begin_now, <span class="hljs-type">size_t</span> end_now, <span class="hljs-type">size_t</span> begin, <span class="hljs-type">size_t</span> end, T value)</span> </span>&#123;<br>        <span class="hljs-built_in">push</span>(node, begin_now, end_now);<br>        <span class="hljs-keyword">if</span>(begin_now &gt; end || end_now &lt; begin) <span class="hljs-keyword">return</span>;<br>        <span class="hljs-keyword">if</span>(begin_now &gt;= begin &amp;&amp; end_now &lt;= end) &#123;<br>            datas[node] += (end_now - begin_now + <span class="hljs-number">1</span>) * value;<br>            <span class="hljs-keyword">if</span>(begin_now != end_now) &#123;<br>                lazy_markers[node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += value;<br>                lazy_markers[node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>] += value;<br>            &#125;<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br><br>        <span class="hljs-type">size_t</span> mid = (begin_now + end_now) / <span class="hljs-number">2</span>;<br>        <span class="hljs-built_in">update</span>(node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>, begin_now, mid, begin, end, value);<br>        <span class="hljs-built_in">update</span>(node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>, mid + <span class="hljs-number">1</span>, end_now, begin, end, value);<br>        datas[node] = datas[node * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] + datas[node * <span class="hljs-number">2</span> + <span class="hljs-number">2</span>];<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">size_t</span> node, <span class="hljs-type">size_t</span> begin_now, <span class="hljs-type">size_t</span> end_now)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(lazy_markers[node] != <span class="hljs-number">0</span>) &#123;<br>            datas[node] += (end_now - begin_now + <span class="hljs-number">1</span>) * lazy_markers[node];<br>            <span class="hljs-keyword">if</span>(begin_now != end_now) &#123;<br>                lazy_markers[<span class="hljs-number">2</span> * node + <span class="hljs-number">1</span>] += lazy_markers[node];<br>                lazy_markers[<span class="hljs-number">2</span> * node + <span class="hljs-number">2</span>] += lazy_markers[node];<br>            &#125;<br>            lazy_markers[node] = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">SegTree</span>(vector&lt;T&gt; &amp;d) &#123;<br>    datas.<span class="hljs-built_in">clear</span>();<br>    lazy_markers.<span class="hljs-built_in">clear</span>();<br>    length = d.<span class="hljs-built_in">size</span>();<br>    <br>    datas.<span class="hljs-built_in">resize</span>(length * <span class="hljs-number">4</span>);<br>    lazy_markers.<span class="hljs-built_in">resize</span>(length * <span class="hljs-number">4</span>, <span class="hljs-number">0</span>);<br>    <br>    <span class="hljs-built_in">build</span>(d, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>);<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">update</span><span class="hljs-params">(<span class="hljs-type">size_t</span> l, <span class="hljs-type">size_t</span> r, T value)</span> </span>&#123;<br>            <span class="hljs-built_in">update</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>, l, r, value);<br>        &#125;<br><br>        <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">size_t</span> l, <span class="hljs-type">size_t</span> r)</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, length - <span class="hljs-number">1</span>, l, r);<br>        &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> n, m;<br>    cin &gt;&gt; n &gt;&gt; m;<br><br>    <span class="hljs-function">vector&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">data</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> &amp;in : data) &#123;<br>        cin &gt;&gt; in;<br>    &#125;<br><br>    <span class="hljs-function">SegTree&lt;<span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; <span class="hljs-title">tree</span><span class="hljs-params">(data)</span></span>;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> turn = <span class="hljs-number">0</span>; turn &lt; m; turn++) &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> opt;<br>        cin &gt;&gt; opt;<br><br>        <span class="hljs-keyword">if</span>(opt == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> x, y, k;<br>            cin &gt;&gt; x &gt;&gt; y &gt;&gt; k;<br>            x--;<br>            y--;<br>            tree.<span class="hljs-built_in">update</span>(x, y, k);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> x, y;<br>            cin &gt;&gt; x &gt;&gt; y;<br>            x--;<br>            y--;<br>            cout &lt;&lt; tree.<span class="hljs-built_in">query</span>(x, y) &lt;&lt; endl;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>把全站所有小节标题由<code>h3</code>改成<code>h2</code>了，其它依次上升。</p><p>主要是<code>h5</code>比正文还小了。</p><p>以及总算是一知半解（？）地弄会了线段树。</p><p>这下可以做绿题（？）了哈哈。</p><h2 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h2><section class="footnotes"><div class="footnote-list"><ol><li><span id="fn:1" class="footnote-text"><span>本文内的除法均为整数除法。<a href="#fnref:1" rev="footnote" class="footnote-backref"> ↩</a></span></span></li></ol></div></section>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——STL模板库之数据结构</title>
    <link href="/posts/8752b65a/"/>
    <url>/posts/8752b65a/</url>
    
    <content type="html"><![CDATA[<p>如题，CSP-S备赛中，复习一下STL库的用法节省时间。</p><span id="more"></span><p>内容不会太详细到原理，只知道用法就好。</p><h2 id="向量vector"><a class="markdownIt-Anchor" href="#向量vector"></a> 向量（Vector）</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><ul><li>向量是STL中的一种动态数组，索引（下标）从0开始。</li><li>向量使用连续的内存块来存储元素，这使得它们在访问和迭代方面非常高效。</li><li>使用向量类型前，需要引入<code>vector</code>头文件</li></ul><h3 id="操作"><a class="markdownIt-Anchor" href="#操作"></a> 操作</h3><p>使用以下代码创建存储<code>type</code>类型变量，名为<code>vec</code>的向量：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::vector&lt;type&gt; vec; <span class="hljs-comment">//其中没有任何元素</span><br></code></pre></td></tr></table></figure><p>当然，可以进行更细致的初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">//创建一个包含10个元素的向量，默认初始化为0</span><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">5</span>)</span></span>; <span class="hljs-comment">//创建一个包含10个元素的向量，初始化为5</span><br>std::vector&lt;<span class="hljs-type">int</span>&gt; v3 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>&#125;; <span class="hljs-comment">//使用列表初始化</span><br></code></pre></td></tr></table></figure><p>而后，可以进行加入、插入、删除、清空、访问、获取元素数量等操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">type</span> &#123;<br>    <span class="hljs-type">int</span> temp;<br>    <span class="hljs-built_in">type</span>(<span class="hljs-type">int</span> t) : <span class="hljs-built_in">temp</span>(t) &#123;&#125;<br>&#125;;<br><br>std::vector&lt;type&gt; vec;<br><span class="hljs-type">int</span> var;<br><span class="hljs-type">size_t</span> offset;<br><br>vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">type</span>(var)); <span class="hljs-comment">//在末尾添加一个值为var的元素</span><br>vec.<span class="hljs-built_in">emplace_back</span>(var); <span class="hljs-comment">//同上，但是不重复进行构造，使得不需要进行多余的拷贝操作，节省时间</span><br>vec.<span class="hljs-built_in">insert</span>(vec.<span class="hljs-built_in">begin</span>() + offset, <span class="hljs-built_in">type</span>(var)); <span class="hljs-comment">//在第(offset + 1)个位置插入值为var的元素，注意使用迭代器而非索引</span><br>vec.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">//删除最后一个元素</span><br>vec.<span class="hljs-built_in">erase</span>(vec.<span class="hljs-built_in">begin</span>() + offset); <span class="hljs-comment">//删除第(offset + 1)个位置的元素，注意同样使用迭代器而非索引</span><br>vec.<span class="hljs-built_in">clear</span>(); <span class="hljs-comment">//删除所有元素</span><br>vec[offset] <span class="hljs-comment">//访问第(offset + 1)个位置的元素</span><br>vec.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">//获取元素数量</span><br></code></pre></td></tr></table></figure><h3 id="用例"><a class="markdownIt-Anchor" href="#用例"></a> 用例</h3><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>你被邀请参加一个图书仓库管理系统的编程挑战。系统需要处理一系列指令，对图书仓库进行操作。仓库开始时为空，你需要根据以下指令类型操作图书仓库：</p><ul><li><code>A S</code> 向仓库最后添加一本名为<code>S</code>的图书。</li><li><code>D</code> 从仓库中移除最后一本图书（如果仓库非空）,如果仓库为空，则输出<code>Warehouse is empty</code>。</li><li><code>C</code> 清空仓库中所有图书。</li><li><code>I X S</code> 在仓库中的第<code>X</code>个位置（从<code>1</code>开始计数）插入一本名为<code>S</code>的图书。如果<code>X</code>大于当前图书总数，将图书添加到仓库末尾。</li><li><code>Q</code> 查询并返回当前仓库中图书的总数。</li><li><code>P X</code> 输出第<code>X</code>个位置（从<code>1</code>开始计数）的图书名称。如果位置<code>X</code>超出范围，则输出<code>Invalid Position</code>。</li></ul><h4 id="输入描述"><a class="markdownIt-Anchor" href="#输入描述"></a> 输入描述</h4><p>第一行包含一个整数<code>N</code>(1≤N≤10<sup>5</sup>)，表示指令的数量。<br />接下来的<code>N</code>行，每行包含一个指令，按照上述格式给出。</p><h4 id="输出描述"><a class="markdownIt-Anchor" href="#输出描述"></a> 输出描述</h4><p>对于每个查询指令（<code>Q</code>），输出当前仓库中图书的总数。<br />对于每个位置查询指令（<code>P</code>），输出该位置的图书名称或<code>Invalid Position</code>。</p><h4 id="样例输入"><a class="markdownIt-Anchor" href="#样例输入"></a> 样例输入</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell">10<br>D<br>A Harry Potter<br>A The Great Gatsby<br>Q<br>I 2 To Kill a Mockingbird<br>Q<br>D<br>Q<br>P 1<br>P 3<br></code></pre></td></tr></table></figure><h4 id="样例输出"><a class="markdownIt-Anchor" href="#样例输出"></a> 样例输出</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell">Warehouse is empty<br>2<br>3<br>2<br>Harry Potter<br>Invalid Position<br></code></pre></td></tr></table></figure><h4 id="题解"><a class="markdownIt-Anchor" href="#题解"></a> 题解</h4><p>没什么难度的模拟，直接写就好了。</p><p>难点不在向量，而在输入与字符串分割。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> command_count;<br>    cin&gt;&gt;command_count;<br>    cin.<span class="hljs-built_in">ignore</span>();<br><br>    vector&lt;string&gt; books;<br>    vector&lt;string&gt; log;<br><br>    string command;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; command_count; i++) &#123;<br>        <span class="hljs-built_in">getline</span>(cin, command);<br>        <span class="hljs-type">char</span> action = command[<span class="hljs-number">0</span>];<br>        <span class="hljs-type">size_t</span> space_index, position;<br>        string book_name;<br><br>        <span class="hljs-keyword">switch</span>(action) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;A&#x27;</span>:<br>                book_name = command.<span class="hljs-built_in">substr</span>(<span class="hljs-number">2</span>);<br>                books.<span class="hljs-built_in">push_back</span>(book_name);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;D&#x27;</span>:<br>                <span class="hljs-keyword">if</span>(books.<span class="hljs-built_in">empty</span>()) log.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Warehouse is empty&quot;</span>);<br><span class="hljs-keyword">else</span> books.<span class="hljs-built_in">pop_back</span>();<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;C&#x27;</span>:<br>                books.<span class="hljs-built_in">clear</span>();<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;Q&#x27;</span>:<br>                log.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">to_string</span>(books.<span class="hljs-built_in">size</span>()));<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;P&#x27;</span>:<br>                position = <span class="hljs-built_in">stoi</span>(command.<span class="hljs-built_in">substr</span>(<span class="hljs-number">2</span>));<br>                <span class="hljs-keyword">if</span>(position &lt;= <span class="hljs-number">0</span> || position &gt; books.<span class="hljs-built_in">size</span>()) log.<span class="hljs-built_in">push_back</span>(<span class="hljs-string">&quot;Invalid Position&quot;</span>);<br>                <span class="hljs-keyword">else</span> log.<span class="hljs-built_in">push_back</span>(books[position - <span class="hljs-number">1</span>]);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;I&#x27;</span>:<br>                space_index = command.<span class="hljs-built_in">find</span>(<span class="hljs-string">&#x27; &#x27;</span>, <span class="hljs-number">2</span>);<br>                position = <span class="hljs-built_in">stoi</span>(command.<span class="hljs-built_in">substr</span>(<span class="hljs-number">2</span>, space_index - <span class="hljs-number">2</span>));<br>                book_name = command.<span class="hljs-built_in">substr</span>(space_index + <span class="hljs-number">1</span>);<br>                <span class="hljs-keyword">if</span>(position &gt; books.<span class="hljs-built_in">size</span>()) books.<span class="hljs-built_in">push_back</span>(book_name);<br>                <span class="hljs-keyword">else</span> books.<span class="hljs-built_in">insert</span>(books.<span class="hljs-built_in">begin</span>() + position - <span class="hljs-number">1</span>, book_name);<br>                <span class="hljs-keyword">break</span>;<br><br>            <span class="hljs-keyword">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">const</span> <span class="hljs-keyword">auto</span> entry : log) &#123;<br>        cout&lt;&lt;entry&lt;&lt;endl;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列queue"><a class="markdownIt-Anchor" href="#队列queue"></a> 队列（Queue）</h2><h3 id="介绍-2"><a class="markdownIt-Anchor" href="#介绍-2"></a> 介绍</h3><ul><li>队列是一种先进先出（FIFO）的数据结构。</li><li>使用队列类型前，需要引入<code>queue</code>头文件。</li></ul><h3 id="操作-2"><a class="markdownIt-Anchor" href="#操作-2"></a> 操作</h3><p>使用以下代码创建存储<code>type</code>类型变量，名为<code>q</code>的队列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;type&gt; q;<br></code></pre></td></tr></table></figure><p>可以进行加入、移除、访问、获取元素数量等操作（注意没有清空，所有类型的队列都没有）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::queue&lt;<span class="hljs-type">int</span>&gt; q;<br><span class="hljs-type">int</span> var;<br><br>q.<span class="hljs-built_in">push</span>(var); <span class="hljs-comment">// 在末尾添加一个值为var的元素</span><br>q.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 移除第一个元素</span><br>q.<span class="hljs-built_in">front</span>(); <span class="hljs-comment">// 访问第一个元素</span><br>q.<span class="hljs-built_in">back</span>(); <span class="hljs-comment">// 访问最后一个元素</span><br>q.<span class="hljs-built_in">empty</span>(); <span class="hljs-comment">// 判断队列是否为空</span><br>q.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 获取元素数量</span><br></code></pre></td></tr></table></figure><h3 id="用例-2"><a class="markdownIt-Anchor" href="#用例-2"></a> 用例</h3><p>此前写过两篇关于队列实现的文章（<a href="https://www.ordchaos.com/posts/da7075f0/">C++ 数组实现队列</a>与<a href="https://www.ordchaos.com/posts/6270475f/">C++ 链表实现队列</a>），可以看看。</p><p>问题、题解可以参考其中的“解决问题”部分。</p><p>这里给出使用STL队列的题解：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; q;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) q.<span class="hljs-built_in">push</span>(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;!q.<span class="hljs-built_in">empty</span>();i++) &#123;<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> temp = q.<span class="hljs-built_in">front</span>();<br>            q.<span class="hljs-built_in">pop</span>();<br>            q.<span class="hljs-built_in">push</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            cout&lt;&lt;q.<span class="hljs-built_in">front</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            q.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="双端队列deque"><a class="markdownIt-Anchor" href="#双端队列deque"></a> 双端队列（Deque）</h3><h4 id="介绍-3"><a class="markdownIt-Anchor" href="#介绍-3"></a> 介绍</h4><ul><li>双端队列（Deque）是一种可以在两端进行插入和删除操作的队列。</li><li>使用双端队列类型前，需要引入<code>deque</code>头文件。</li></ul><h4 id="操作-3"><a class="markdownIt-Anchor" href="#操作-3"></a> 操作</h4><p>使用以下代码创建存储<code>type</code>类型变量，名为<code>dq</code>的双端队列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::deque&lt;type&gt; dq;<br></code></pre></td></tr></table></figure><p>同样，可以进行在两端加入、移除、访问、获取元素数量等操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::deque&lt;<span class="hljs-type">int</span>&gt; dq;<br><span class="hljs-type">int</span> var;<br><br>dq.<span class="hljs-built_in">push_back</span>(var); <span class="hljs-comment">// 在末尾添加一个值为var的元素</span><br>dq.<span class="hljs-built_in">push_front</span>(var); <span class="hljs-comment">// 在开头添加一个值为var的元素</span><br>dq.<span class="hljs-built_in">pop_back</span>(); <span class="hljs-comment">// 移除最后一个元素</span><br>dq.<span class="hljs-built_in">pop_front</span>(); <span class="hljs-comment">// 移除第一个元素</span><br>dq.<span class="hljs-built_in">front</span>(); <span class="hljs-comment">// 访问第一个元素</span><br>dq.<span class="hljs-built_in">back</span>(); <span class="hljs-comment">// 访问最后一个元素</span><br>dq.<span class="hljs-built_in">empty</span>(); <span class="hljs-comment">// 判断队列是否为空</span><br>dq.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 获取元素数量</span><br></code></pre></td></tr></table></figure><h3 id="优先队列priority-queue或堆heap"><a class="markdownIt-Anchor" href="#优先队列priority-queue或堆heap"></a> 优先队列（Priority Queue）或堆（Heap）</h3><h4 id="介绍-4"><a class="markdownIt-Anchor" href="#介绍-4"></a> 介绍</h4><ul><li>优先队列（Priority Queue）是一种每次取出具有最高优先级元素的数据结构，一般按照从大到小的顺序存储（即大根堆）。</li><li>使用优先队列类型前，需要引入<code>queue</code>头文件。</li></ul><p>更多内容可以看看这篇<a href="https://www.ordchaos.com/posts/fab451a5/">堆</a></p><h4 id="操作-4"><a class="markdownIt-Anchor" href="#操作-4"></a> 操作</h4><p>使用以下代码创建存储<code>type</code>类型变量，名为<code>pq</code>的优先队列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::priority_queue&lt;type&gt; pq;<br></code></pre></td></tr></table></figure><p>可以进行加入、移除、访问、获取元素数量等操作：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::priority_queue&lt;<span class="hljs-type">int</span>&gt; pq;<br><span class="hljs-type">int</span> var;<br><br>pq.<span class="hljs-built_in">push</span>(var); <span class="hljs-comment">// 插入一个值为var的元素</span><br>pq.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">// 移除具有最高优先级的元素</span><br>pq.<span class="hljs-built_in">top</span>(); <span class="hljs-comment">// 访问具有最高优先级的元素</span><br>pq.<span class="hljs-built_in">empty</span>(); <span class="hljs-comment">// 判断优先队列是否为空</span><br>pq.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 获取元素数量</span><br></code></pre></td></tr></table></figure><p>也可以优先级，如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span> <span class="hljs-comment">//引入std::greater</span></span><br><br>std::priority_queue&lt;<span class="hljs-type">int</span>, std::vector&lt;<span class="hljs-type">int</span>&gt;, std::greater&lt;<span class="hljs-type">int</span>&gt;&gt; pq_min_heap; <span class="hljs-comment">//自定义优先级，得到小根堆</span><br></code></pre></td></tr></table></figure><p>对于自定义类型，有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">type</span> &#123;<br>    <span class="hljs-type">int</span> value;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">compare</span> &#123;<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> type&amp; a, <span class="hljs-type">const</span> type&amp; b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a.value &gt; b.value;<br>    &#125;<br>&#125;<br><br>std::priority_queue&lt;type, std::vector&lt;type&gt;, compare&gt; <span class="hljs-comment">//自定义根据type.value决定的优先级，得到小根堆</span><br></code></pre></td></tr></table></figure><h4 id="用例-3"><a class="markdownIt-Anchor" href="#用例-3"></a> 用例</h4><p>可以查看<a href="https://www.ordchaos.com/posts/fab451a5/#%E5%BA%94%E7%94%A8">这里</a>获取题目与题解，这里只给出使用优先队列的写法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    priority_queue&lt;<span class="hljs-type">int</span>, vector&lt;<span class="hljs-type">int</span>&gt;, greater&lt;<span class="hljs-type">int</span>&gt;&gt; min_heap;<br>    <span class="hljs-type">int</span> temp;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++) &#123;<br>        cin&gt;&gt;temp;<br>        min_heap.<span class="hljs-built_in">push</span>(temp);<br>    &#125;<br><br>    <span class="hljs-type">int</span> power = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(min_heap.<span class="hljs-built_in">size</span>() &gt; <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> quick1 = min_heap.<span class="hljs-built_in">top</span>();<br>        min_heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> quick2 = min_heap.<span class="hljs-built_in">top</span>();<br>        min_heap.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">int</span> combined = quick1 + quick2;<br>        power += combined;<br>        min_heap.<span class="hljs-built_in">push</span>(combined);<br>    &#125;<br><br>    cout&lt;&lt;power&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="键值对map"><a class="markdownIt-Anchor" href="#键值对map"></a> 键值对（Map）</h2><h3 id="介绍-5"><a class="markdownIt-Anchor" href="#介绍-5"></a> 介绍</h3><ul><li>顾名思义，一个键与一个值一一对应，通过键快速查找值。</li><li><code>map</code>通过红黑树实现。</li><li>使用键值对类型前，需要引入<code>map</code>头文件。</li><li>对于自定义类型的键，需要重载<code>&lt;</code>操作符（键值对自带排序）。</li></ul><h3 id="操作-5"><a class="markdownIt-Anchor" href="#操作-5"></a> 操作</h3><p>使用以下代码创建键类型为<code>KeyType</code>，值类型为<code>ValueType</code>，名为<code>mp</code>的键值对：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::map&lt;KeyType, ValueType&gt; mp;<br></code></pre></td></tr></table></figure><p>可以进行插入、删除、访问、查找、获取元素数量等操作（由于键的唯一性，不支持修改操作，可以先删除再插入）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::map&lt;<span class="hljs-type">int</span>, std::string&gt; mp; <span class="hljs-comment">//键为int，值为string</span><br><br>mp[<span class="hljs-number">1</span>] = <span class="hljs-string">&quot;one&quot;</span>; <span class="hljs-comment">// 插入键为1，值为&quot;one&quot;的元素（直接赋值，无需插入）</span><br>mp.<span class="hljs-built_in">erase</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 删除键为1的元素</span><br>mp[<span class="hljs-number">1</span>] <span class="hljs-comment">// 访问键为1的元素</span><br>mp.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 查找键为1的元素，返回一个迭代器</span><br>mp.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 获取元素数量</span><br></code></pre></td></tr></table></figure><h3 id="哈希表版本不排序"><a class="markdownIt-Anchor" href="#哈希表版本不排序"></a> 哈希表版本/不排序</h3><h4 id="介绍-6"><a class="markdownIt-Anchor" href="#介绍-6"></a> 介绍</h4><ul><li>利用桶函数实现，相比键值对它不会排序，速度快一些。</li><li>使用上与键值对无区别（需引入<code>unordered_map</code>头文件），但内存利用率不够高。</li><li>对于自定义类型的键，需要重载哈希函数。</li></ul><h4 id="操作-6"><a class="markdownIt-Anchor" href="#操作-6"></a> 操作</h4><p>使用以下代码创建键类型为<code>KeyType</code>，值类型为<code>ValueType</code>，名为<code>ump</code>的不排序键值对：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unordered_map&lt;KeyType, ValueType&gt; ump;<br></code></pre></td></tr></table></figure><p>对于自定义类型的键：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">KeyType</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    std::string name;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> KeyType &amp;other) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> id == other.id &amp;&amp; name == other.name;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">namespace</span> std &#123;<br>    <span class="hljs-keyword">template</span>&lt;&gt;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">hash</span>&lt;KeyType&gt; &#123;<br>        <span class="hljs-function">std::<span class="hljs-type">size_t</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> KeyType&amp; k)</span> <span class="hljs-type">const</span> </span>&#123;<br>            <span class="hljs-keyword">using</span> std::hash;<br>            <span class="hljs-keyword">using</span> std::<span class="hljs-type">size_t</span>;<br>            <span class="hljs-keyword">using</span> std::string;<br><br>            <span class="hljs-keyword">return</span> ((<span class="hljs-built_in">hash</span>&lt;<span class="hljs-type">int</span>&gt;()(k.id)<br>                     ^ (<span class="hljs-built_in">hash</span>&lt;string&gt;()(k.name) &lt;&lt; <span class="hljs-number">1</span>)) &gt;&gt; <span class="hljs-number">1</span>); <span class="hljs-comment">//自定义哈希函数即可，使用任何你喜欢的算法。</span><br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>其它的不变。</p><h2 id="集合set"><a class="markdownIt-Anchor" href="#集合set"></a> 集合（Set）</h2><h3 id="介绍-7"><a class="markdownIt-Anchor" href="#介绍-7"></a> 介绍</h3><ul><li>集合是一种不包含重复元素的数据结构（集合的互斥性）。</li><li>使用集合类型前，需要引入<code>set</code>头文件。</li><li>对于自定义类型，需要重载<code>&lt;</code>操作符（集合自带排序）。</li></ul><h3 id="操作-7"><a class="markdownIt-Anchor" href="#操作-7"></a> 操作</h3><p>使用以下代码创建存储<code>type</code>类型变量，名为<code>s</code>的集合：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;type&gt; s;<br></code></pre></td></tr></table></figure><p>可以进行插入、删除、访问、查找、获取元素数量等操作（由于集合的互斥性，不支持修改操作，可以先删除再插入）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::set&lt;<span class="hljs-type">int</span>&gt; s;<br><br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 插入元素1</span><br>s.<span class="hljs-built_in">erase</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 删除元素1</span><br>s.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 查找元素1，返回一个迭代器</span><br>s.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">// 获取元素数量</span><br></code></pre></td></tr></table></figure><h3 id="哈希表版本不排序-2"><a class="markdownIt-Anchor" href="#哈希表版本不排序-2"></a> 哈希表版本/不排序</h3><h4 id="介绍-8"><a class="markdownIt-Anchor" href="#介绍-8"></a> 介绍</h4><ul><li>引用<code>unordered_set</code>以使用。</li><li>同样，速度更快，内存利用率下降。</li><li>个人感觉这个更接近于数学意义上的集合（无序性）。</li><li>对于自定义类型，需要重载<code>==</code>操作符与哈希函数。</li></ul><h4 id="操作-8"><a class="markdownIt-Anchor" href="#操作-8"></a> 操作</h4><p>使用以下代码创建存储<code>type</code>类型变量，名为<code>us</code>的不排序集合：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::unordered_set&lt;type&gt; us;<br></code></pre></td></tr></table></figure><p>对于自定义类型：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">type</span> &#123;<br>    <span class="hljs-type">int</span> id;<br>    std::string name;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> type &amp;other) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> id == other.id &amp;&amp; name == other.name;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">namespace</span> std &#123;<br>    <span class="hljs-keyword">template</span>&lt;&gt;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">hash</span>&lt;type&gt; &#123;<br>        <span class="hljs-function">std::<span class="hljs-type">size_t</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> type &amp;myType)</span> <span class="hljs-type">const</span> </span>&#123;<br>            <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">hash</span>&lt;<span class="hljs-type">int</span>&gt;()(type.id) ^ std::<span class="hljs-built_in">hash</span>&lt;std::string&gt;()(type.name);<br>        &#125;<br>    &#125;;<br>&#125;<br></code></pre></td></tr></table></figure><p>其它的不变。</p><h2 id="补充"><a class="markdownIt-Anchor" href="#补充"></a> 补充</h2><p>除了粗暴的重载，<code>unordered_map</code>与<code>unordered_set</code>都可以通过自定义的哈希函数进行构造。</p><p>参考以下内容：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">type</span> &#123;<br>    <span class="hljs-type">int</span> a;<br>    std::string b;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> MyStruct &amp;other) <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> a == other.a &amp;&amp; b == other.b;<br>    &#125;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TypeHash</span> &#123;<br>    <span class="hljs-function">std::<span class="hljs-type">size_t</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">const</span> type &amp;s)</span> <span class="hljs-type">const</span> </span>&#123;<br>        std::<span class="hljs-type">size_t</span> h1 = std::<span class="hljs-built_in">hash</span>&lt;<span class="hljs-type">int</span>&gt;()(s.a);<br>        std::<span class="hljs-type">size_t</span> h2 = std::<span class="hljs-built_in">hash</span>&lt;std::string&gt;()(s.b);<br>        <span class="hljs-keyword">return</span> h1 ^ (h2 &lt;&lt; <span class="hljs-number">1</span>); <span class="hljs-comment">//或者使用其他组合哈希的方法</span><br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">//使用以下方法构造：</span><br>std::unordered_map&lt;type, ValueType, TypeHash&gt; ump;<br>std::unordered_set&lt;type, TypeHash&gt; us;<br></code></pre></td></tr></table></figure><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>没什么可说的……<span class="heimu" title="你知道的太多了">What can I say?</span>马上升高二了。</p><p>最后一次CSP与NOIP，加油！</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github Action定时重启邮件服务</title>
    <link href="/posts/e9c784c5/"/>
    <url>/posts/e9c784c5/</url>
    
    <content type="html"><![CDATA[<p>主要是邮件服务器的容器经常崩溃，所以尝试设置定时任务来解决这个问题。</p><span id="more"></span><h2 id="情景引入"><a class="markdownIt-Anchor" href="#情景引入"></a> 情景引入</h2><p>邮件服务器性能羸弱，无法胜任设置定时任务这样的重担，所以只能用一些盘外招试试了。</p><p>有关于邮件服务器搭建，参考这篇文章：<a href="https://www.ordchaos.com/posts/3b90dbec/">自托管 E-mail ，宝宝喜欢妈妈爱</a></p><h2 id="设置-action"><a class="markdownIt-Anchor" href="#设置-action"></a> 设置 Action</h2><p>那么首先，本着轻量化的原则，新建一个仓库拿来干这种事：</p><p><img src="https://img.ordchaos.com/img/2024/02/5e1a07ea1593440507e3e0bdb6c80c3b.png" alt="" /></p><p><img src="https://img.ordchaos.com/img/2024/02/9eb9df8cc12a4331e3cb95ccc902c52a.png" alt="" /></p><p>然后切到Action页面：</p><p><img src="https://img.ordchaos.com/img/2024/02/a94c8d5c7c4026bb49bda5a0fc93e9d3.png" alt="" /></p><p>选择新建一个空白模板：</p><p><img src="https://img.ordchaos.com/img/2024/02/235b3a988d6ae333547c22e3bf7cdcc1.png" alt="" /></p><p><img src="https://img.ordchaos.com/img/2024/02/d3bc49ec763c91aa05cf79e84e4006b8.png" alt="" /></p><p>修改Action名称、内容并设置定时，参考我的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs ymal"># This is a basic workflow to help you get started with Actions<br><br>name: REMX<br><br># Controls when the workflow will run<br>on:<br>  # Triggers the workflow on push or pull request events but only for the &quot;main&quot; branch<br>  push:<br>    branches: [ &quot;main&quot; ]<br>  schedule:<br>    - cron: &quot;0 20 * * *&quot;<br><br>  # Allows you to run this workflow manually from the Actions tab<br>  workflow_dispatch:<br><br># A workflow run is made up of one or more jobs that can run sequentially or in parallel<br>jobs:<br>  # This workflow contains a single job called &quot;build&quot;<br>  build:<br>    # The type of runner that the job will run on<br>    runs-on: ubuntu-latest<br><br>    # Steps represent a sequence of tasks that will be executed as part of the job<br>    steps:<br>      - name: Checkout Codes<br>        uses: actions/checkout@v3<br><br>      - name: Restart MX Service<br>        uses: garygrossgarten/github-action-ssh@release<br>        with:<br>          command: ./restart.sh<br>          host: $&#123;&#123; secrets.HOST &#125;&#125;<br>          username: root<br>          password: $&#123;&#123; secrets.PASSWORD &#125;&#125;<br><br>      - name: Finish<br>        run: echo &quot;Action Finish&quot;<br></code></pre></td></tr></table></figure><p>SSH相关配置自行查看<a href="https://github.com/marketplace/actions/run-ssh-command">官方文档</a>，<code>restart.sh</code>内容填写重启docker指令即可。</p><p>可参考以下内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br>cd /mailu<br>docker-compose down<br>docker-compose up -d<br></code></pre></td></tr></table></figure><p>保存，然后去设置Secret：</p><p><img src="https://img.ordchaos.com/img/2024/02/265d26f043a2d554f2fe8a74ad1b1e36.png" alt="" /></p><p>分别设置服务器地址、密码等即可：</p><p><img src="https://img.ordchaos.com/img/2024/02/dfc32309634675e5cb5269692da37c13.png" alt="" /></p><p>大功告成！</p><h2 id="结语"><a class="markdownIt-Anchor" href="#结语"></a> 结语</h2><p>上高中之后就没写博文了……</p><p>除夕赶出一篇博文，祝新年快乐！！！</p><p>也迟来的祝博客两周年快乐！！！</p><h2 id="2024212-更新"><a class="markdownIt-Anchor" href="#2024212-更新"></a> 2024.2.12 更新</h2><p>经评论<a href="https://alampy.com/">@极地萤火(橙子)</a>提醒，增加自动推送commit同时记录log功能。</p><p>首先，进入仓库设置：</p><p><img src="https://img.ordchaos.com/img/2024/02/c4c3600448c97ba96934e025554e40d9.png" alt="" /></p><p>选择Action选项卡：</p><p><img src="https://img.ordchaos.com/img/2024/02/6dd35d54352e8f341f6d4f21e076f78a.png" alt="" /></p><p>修改访问权限为读写：</p><p><img src="https://img.ordchaos.com/img/2024/02/9eef169d5e8f617e4f61b2da73185d6d.png" alt="" /></p><p>保存即可。</p><p>然后，修改Action内容，增加推流部分：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs ymal">- name: Update log.txt<br>  run: |<br>    var=`date +%Y%m%d%H%M`<br>    echo $var | tee -a log.txt<br><br>- name: Commit<br>  run: |<br>    git config --global user.name &#x27;username&#x27;<br>    git config --global user.email &#x27;youremail@example.com&#x27;<br>    git add log.txt<br>    var=`date +%Y%m%d%H%M`<br>    git commit -m $var<br>    git push origin main<br></code></pre></td></tr></table></figure><p>记得将信息改为自己的github用户名与邮箱。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>白嫖</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>年中总结，及进16岁生贺</title>
    <link href="/posts/95bd9bb8/"/>
    <url>/posts/95bd9bb8/</url>
    
    <content type="html"><![CDATA[<p>又是一年生日了，回想上次生日<span class="heimu" title="说了跟没说一样">，好像还是在上次一样</span>，那时还是在初三开学前的补课。补课放学的很早，五点就回家了。当时在超市里买了一根价值14块大洋的钟薛糕……</p><p>说起来真的像是发生在昨天。</p><h2 id="1~2月"><a class="markdownIt-Anchor" href="#1~2月"></a> 1~2月</h2><p>经过了疫情的洗礼，九年级下学期的开学总算是如期而至，但紧随而来便是对二月调考的紧张。原本武汉是只有元调、四调的，不过由于众所周知的疫情因素，元调从原定的1月4号挪到了2月21号。让我们过了一个安心的元旦和一个安心的寒假。</p><p>但该来的还是要来，二调总归也是调考，压迫感并未消失，只是转移到了一个月后。故而新学期伊始，我们就全身心投入到了复习之中。那时我的心里总会浮现出七年级刚开学时班主任在班里说的话，她告诉我们三年很短，元调很重要。初听不知话中意，而现在，已为语中人。</p><p>二调的成绩中规中矩吧，523分（523/600），随后便立下了四调要进步15分的目标。但那时我还不知道，这个目标永远没有机会达成了。</p><h2 id="3~4月"><a class="markdownIt-Anchor" href="#3~4月"></a> 3~4月</h2><p>二调完了就是四调，没什么可说的，该复习复习，该上新课上新课。伴随着一本又一本教材被翻至最后一课、最后一面，初中即将毕业的感受才开始从心中滋生。不论是Graduation还是“从这里出发”，课本中的一句句话，一段段文章都正提醒着我们即将分别的事实。</p><p>四调成绩说实话，很不好，只有508。以至于我的母亲对我这个分数不抱什么期望了，也便没有如同二调结束后那样跑前跑后地签各种约。也正因如此，已然退休的她只能在家里独自心焦，这是我的问题。</p><h2 id="5~6月"><a class="markdownIt-Anchor" href="#5~6月"></a> 5~6月</h2><p>五月有各个区自己的五调，六月便是全武汉市的中考。志愿早在五月九日便截至提交，在此之前，我终于说服了我的父母为我填写武钢三中为第一志愿。“说服”，无奈的选择，毕竟要说二调成绩勉强足够的话，四调成绩面对钢三简直就是依托答辩。但我仍然坚定的选择了这条路，算是对自己的压迫吧，同时也伴随着一股气，一股不服输的精神。</p><p>五调前举行了理化生实验考试，和八年级的地理生物一样，采用机考的形式。没什么难度，几乎全班满分通过，只有3人被扣了1分。加上由于疫情取消的体育中考，近乎就是给每个人送了80分。</p><p>六月初，抽了一个上午，我们全班在学校里拍了毕业照。学校不大，很快就走遍了整个校园。伴随着感慨，拍完室外照后回班，我们齐心协力在十分钟内办好了一面黑板报。站在黑板报前，我们拍了最后的几张照片。</p><p>中考日以前，最后一个在校日，是一个周六。老师在上午或看自习，或做最后的查漏补缺。而下午，老师开了一场动员会，给每个人发了一块粽子玩偶。既代表端午将临，亦有一举高中之意。一场班会结束，打扫完教室，离开学校，颇有一种或解脱、或不舍的情愫。</p><p><img src="https://img.ordchaos.com/img/2023/08/6099e101fa1e501ee9e50a3a1a7bf2a9.jpg" alt="" /></p><p>中考前一天，周一，下午我便前往了考点处。每个文化课老师都在考点门口，为我们一张张派发着准考证。面对那一句句叮嘱，我明白，不能当做是像以前那样的老生常谈了。</p><p>中考结束的那一天，考完历史道法的上午。连续更改了两道选择题的我放下了手中的笔，一根根地把中性笔、2B铅笔、涂卡笔以及橡皮擦、垫板、准考证装入了文具袋。走回休息室，再和全班同学及老师走出了考场。此时此刻，心中只有解脱，无暇再顾及其它。</p><p>随后就是<a href="https://www.ordchaos.com/posts/c2e7460a/">毕业旅行</a>了，很愉快的出行经历，也为初中三年画上了一个圆满的句号。</p><p><img src="https://img.ordchaos.com/img/2023/07/d2352d5a89443272b242dc2d485012cf.jpg" alt="" /></p><h2 id="7~8月"><a class="markdownIt-Anchor" href="#7~8月"></a> 7~8月</h2><p>七月一号一早，昨天刚从青岛回到家的我点进了武汉招考网，惊心动魄的输入姓名、报名号和身份证号。按下蓝色按钮的那一刻，时间仿佛凝滞。好在接下来引入眼帘的数字令我终于放下了心，614分（614/680），是我最高的一次了。</p><p>毫无疑问的被钢三录取，之后是钢三的夏令营，一直到七月二十一。食堂很美味，与同学相处得很愉快，校园环境很好，近乎无可挑剔了。</p><p><img src="https://img.ordchaos.com/img/2023/08/94e829ac385fbe31768f1ee61242fe69.jpg" alt="" /></p><p>八月，很放松的一个月，这个月一直在玩master duel和原神，开始了摆烂状态（笑）</p><p>直到今天，我的生日为止，一切都很放松。</p><h2 id="未来"><a class="markdownIt-Anchor" href="#未来"></a> 未来……</h2><p>马上就是钢三的军训了，再之后就是开学，祝我一路顺利吧！</p><p>也希望三年后的暑假能像现在一样无忧无虑。</p><p>Happy Birthday for Me!</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/08/f1d85bc861f2ece841d0a9335b8a158c.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/08/8cb70d4e7a728e4284bb74654f2a1cda.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/08/853a55642896ca6df431184a4f348297.jpg" alt="" /></div></div></div><p>顺便晒一下毕业纪念册！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/08/e566af9ac33c10341d308ef6f57b8e04.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/08/9547b00a63868888107ab63ff5beb3d6.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/08/dd88f12c1f3f1b3df62efef0487cb224.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/08/5c82d2f53e97b62d26870ace1b70ef2a.jpg" alt="" /></div></div></div>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>个人</tag>
      
      <tag>生日</tag>
      
      <tag>总结</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数字生命卡开箱——来自《流浪地球II》</title>
    <link href="/posts/b3d3143c/"/>
    <url>/posts/b3d3143c/</url>
    
    <content type="html"><![CDATA[<p>过年档的电影，看完就买了周边。历经半年，终于到手啦！哈哈！</p><span id="more"></span><p>《流浪地球II》的官方周边产品大部分都是赛凡做的。怎么说呢……我买的数字生命卡是第二批，看到很多第一批的都有程度不一的瑕疵。不过我这个就还好，没有什么大问题，看来还是有在改进运输和包装质量。</p><p>到手差不多就是这么些东西：</p><p><img src="https://img.ordchaos.com/img/2023/07/1eb5ea21897bcf46876b164f10f7e7f5.jpg" alt="" /></p><p>其它周边什么的就不多说了，重头戏还是数字生命卡。</p><h2 id="数字生命卡"><a class="markdownIt-Anchor" href="#数字生命卡"></a> 数字生命卡</h2><p>只说外观的话，看起来金属感不是很强，喷个漆观感应该会好一些，但我不会（</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/04fea4d017486394e5f4e74c65da142c.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/fdf1ef85b582bd1377910ba05c44f103.jpg" alt="" /></div></div></div><p>别的道具倒是挺还原的，比如说袋子。</p><p>别的也没什么可说的了，毕竟这也就是一个128G的U盘和一个读卡器而已。</p><h2 id="其它"><a class="markdownIt-Anchor" href="#其它"></a> 其它</h2><p>不说什么了，放几张图吧。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/c951c925b05f52336a35e7e15d18b85f.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/4579c559da29d7b53d5ef0b661368067.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/86f32e7d676f188ec1fa9d18c3e5fb98.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/8a1f33737209f5978494e9220725d876.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/495badd6356fb1dba5fbe634fbeaca3a.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/729b18b9ed8d6bd8f2a686ff5d447819.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/ac1edd6a5369af89fdf36da162dde1ff.jpg" alt="" /></div></div></div><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>不是很好评价赛凡的产品了……</p><p>我只能说我能接受这个做工，但的确，赛凡的破事很难让我提起好感。</p><p>就这样，886！</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>电影</tag>
      
      <tag>开箱</tag>
      
      <tag>科技</tag>
      
      <tag>U盘</tag>
      
      <tag>周边</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>文章AI摘要？太酷啦！</title>
    <link href="/posts/ec8c9790/"/>
    <url>/posts/ec8c9790/</url>
    
    <content type="html"><![CDATA[<p>看了HEO的<a href="https://blog.zhheo.com/p/ec57d8b2.html">如何让博客支持AI摘要，使用TianliGPT自动生成文章的AI摘要</a>，甚是手痒……整一个！</p><span id="more"></span><h2 id="前情提要"><a class="markdownIt-Anchor" href="#前情提要"></a> 前情提要</h2><p>的确，我可以直接把HEO现成的部署方案拿来用，但我是一个有追求的人（雾。事实上，直接使用这种解决方案得到的摘要栏与我博客的设计风格并不是很搭，这就要求我自己写一个前端<span class="heimu" title="你知道的太多了">后端是不可能的，这辈子也不可能的</span>。</p><p>好，开干！但首先，第一个问题出现了：我博客的设计风格本身就不太统一。首页的说说轮播和说说页面的数量统计用了fluid主题自带的info，而友链朋友圈页面又没有，直接使用了圆角矩形承载统计信息。</p><p>为了解决这个问题，我需要用一样东西代替info标签。经过再三深思熟虑，我选用圆角矩形统一替换info.</p><p>而后便有了枯燥的漫长（？）css编写时间：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.ocxqntcontainer</span> &#123;<br>    <span class="hljs-attribute">display</span>: flex;<br>    <span class="hljs-attribute">align-items</span>: center;<br>    <span class="hljs-attribute">justify-content</span>: center;<br>    <span class="hljs-attribute">height</span>: auto;<br>&#125;<br><br><span class="hljs-selector-tag">div</span><span class="hljs-selector-class">.ocxqnt</span> &#123;<br>    <span class="hljs-attribute">border</span>: <span class="hljs-number">1px</span> solid <span class="hljs-number">#e9e9e9</span>;<br>    <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">padding</span>: <span class="hljs-number">1rem</span>;<br>    <span class="hljs-attribute">text-align</span>: left;<br>    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;<br>&#125;<br><br><span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.memos-t</span> &#123;<br>    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">1rem</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>就这样，圆角矩形大功告成。</p><h2 id="摘要部署"><a class="markdownIt-Anchor" href="#摘要部署"></a> 摘要部署</h2><p>现在这个步骤就变得很简单了，对于我用的fluid主题，编辑<code>layout/post.ejs</code>即可，在<code>article</code>标签中，类为<code>markdown-body</code>的<code>div</code>标签之前加入以下内容：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">i</span><span class="hljs-selector-class">.icon-ordchaos-blog-robot</span>, <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.ocxq-ai-title</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css"><span class="hljs-attribute">font-size</span>: <span class="hljs-number">1.2em</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">span</span><span class="hljs-selector-class">.ocxq-ai-warn</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-class">.ocxq-ai-text</span><span class="hljs-selector-class">.typing</span><span class="hljs-selector-pseudo">::after</span> &#123;</span><br><span class="language-css"><span class="hljs-attribute">content</span>: <span class="hljs-string">&quot;_&quot;</span>;</span><br><span class="language-css"><span class="hljs-attribute">margin-left</span>: <span class="hljs-number">2px</span>;</span><br><span class="language-css"><span class="hljs-attribute">animation</span>: blink <span class="hljs-number">0.7s</span> infinite;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><br><span class="language-css">  <span class="hljs-keyword">@keyframes</span> blink &#123;</span><br><span class="language-css"><span class="hljs-number">50%</span> &#123;</span><br><span class="language-css">  <span class="hljs-attribute">opacity</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">&#125;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> tianliGPT_postSelector = <span class="hljs-string">&#x27;#board .post-content .markdown-body&#x27;</span>;</span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> tianliGPT_key = <span class="hljs-string">&#x27;5Q5mpqRK5DkwT1X9Gi5e&#x27;</span>;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ocxqntcontainer&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ocxqnt&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;memos-t&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-ordchaos-blog-robot&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;memos-index-space&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ocxq-ai-title&quot;</span>&gt;</span>AI摘要<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ocxq-ai-text&quot;</span>&gt;</span><br>生成中...<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;ocxq-ai-warn&quot;</span>&gt;</span>摘要由AI自动生成，仅供参考！<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><br><span class="hljs-comment">&lt;!--正文部分--&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://www.ordchaos.com/js/aisummary.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>这里有几个问题：</p><ul><li>为什么内容在<code>id</code>为<code>memos-t</code>的<code>span</code>标签中：因为它同样套用了刚刚写好的圆角矩形，而这个圆角矩形为了适配原有的<code>memos</code>说说而要求内部文字必须拥有<code>memos-t</code>的<code>id</code>.</li><li><code>iconfont icon-ordchaos-blog-robot</code>是什么图标：我在<code>iconfont.cn</code>中取用的，因为加入了我的图标库所以拥有图标库前缀<code>icon-ordchaos-blog</code>，若也想选用的话可以直接在<code>iconfont.cn</code>搜索关键词robot找到并添加到自己的图标库</li><li>为什么不把样式代码写到css里面去：我懒</li></ul><p>最后在文件的末尾处加上对js文件的引用。</p><p>说到js，由于HEO提供的js文件中含有生成前端容器的部分，所以必须要删除这部分内容并对其做出部分修改。过程这里就不放了，实在看不懂的可以参考我改好的<span class="heimu" title="你知道的太多了">被压缩了怎么看啊</span><span class="heimu" title="你知道的太多了">自己想办法</span><span class="heimu" title="你知道的太多了">现在想看也看不到了（</span>。</p><p>而后去爱发电订阅TianliGPT并将api key填入即可。</p><h2 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h2><p><img src="https://img.ordchaos.com/img/2023/07/89262b9071f3c4db0169b20c42cc1549.png" alt="" /></p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>最开始因为不想写css而拖了好久……最终因为实在眼馋，欲望盖过了懒病才动身做完。</p><p>话说我这样改别人写好的js应该没问题吧……</p><p>那就这样，886！</p><h2 id="20240814更新"><a class="markdownIt-Anchor" href="#20240814更新"></a> 2024.08.14更新</h2><p>自己整了一个无服务器的后端，已经换上了。</p><p>详见<a href="https://www.ordchaos.com/posts/fd9dafa1/">无服务器AI摘要后端——OrdChaosGPT</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>javascript</tag>
      
      <tag>css</tag>
      
      <tag>AI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>哇！是毕业旅行！</title>
    <link href="/posts/c2e7460a/"/>
    <url>/posts/c2e7460a/</url>
    
    <content type="html"><![CDATA[<p>初三毕业，结束了忙碌的一年，老师带我们全班去了青岛毕业旅行！</p><span id="more"></span><h2 id="前情提要"><a class="markdownIt-Anchor" href="#前情提要"></a> 前情提要</h2><p>武汉今年中考在六月的二十、二十一、二十二号总共三天，考完以后休息<span class="heimu" title="真相了">放纵</span>两日后，我们全班便踏上了高铁前往青岛。</p><p>怎么说呢……说是六天五夜，但武汉与青岛之间的高铁要坐8小时，所以第一天和最后一天都相当于是在高铁上玩一天手机（雾</p><h2 id="day-1-2"><a class="markdownIt-Anchor" href="#day-1-2"></a> Day 1 &amp; 2</h2><p>我们在武汉站登车，高铁从上午十一点一直开到了晚上七点。好在酒店离高铁站很近，走路也就5分钟路程，所以我们就前往了酒店开房。</p><p>该说不说，4个人挤双人房的安排是有点逆天的。就算我们没意见，酒店也没意见？！</p><p>第二天起来吃了早饭之后我们便走路前往了海边，很近，不过不是海滩。拍了几张照，早上天气真的很差，本来是小雨的天气，结果雨越来越大，风也越来越强。但过了一会天又晴了……</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/e0ed20c3d5136cb686dc2ff3081b54db.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/a7bbb72908a3a10572038a31053a7171.jpg" alt="" /></div></div></div><p>然后就是非常晒人。</p><p>下午乘坐青岛地铁去了中山公园附近的沙滩。只能说不愧是夏天，晚上五六点仍然晴空万里。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/c55a85172009f20dc72c0fd41657e9bc.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/d2352d5a89443272b242dc2d485012cf.jpg" alt="" /></div></div></div><p>玩水玩得非常开心，不过也仅限于在海水中跑一跑了。毕竟我可不想和部分其他同学一样弄得浑身湿透。</p><p>请同学拍了两张照！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/1b6a0517c5cf55f13d8f6a6830682023.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/ca804f1c6d7f57b3152a85051d62eb05.jpg" alt="" /></div></div></div><h2 id="day-3"><a class="markdownIt-Anchor" href="#day-3"></a> Day 3</h2><p>走路去了圣弥勒尔大教堂，不过也没进去，就是在外面拍了几张照。</p><p><img src="https://img.ordchaos.com/img/2023/07/62238afaa48a06e6242ceafb444a9da1.jpg" alt="" /></p><p>风景很不错，宝宝喜欢妈妈爱。</p><p>以及本来还以为会碰到什么传教士什么的<span class="heimu" title="你知道的太多了">，然后我就能回一句”我信铂金龙神巴哈姆特“（大雾</span>，结果没有。</p><p>然后就去了老舍故居，看到了《骆驼祥子》相关的很多文物（？）。得亏武汉今年考的是《钢铁是怎样炼成的》，不是《骆驼祥子》<span class="heimu" title="你知道的太多了">，没有被祥子一车创si</span>。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/30994c7fd487b6138aafaaf90d7f5110.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/78f083e6ef27e73305fdc6baa37b5581.jpg" alt="" /></div></div></div><p>然后就是坐地铁回酒店了，这次是从人民会堂到青岛站。</p><p><img src="https://img.ordchaos.com/img/2023/07/df00eee487e1d169cc131b3b6c538f55.jpg" alt="" /></p><p>下午去坐船了，不大不小的船。</p><p>我只想说，快艇我不晕，轮船我不晕，所以就是这种两者之间的会晕是吗！！！</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/e4d4c272ccd407ee49becaba89d91cb8.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/b20de0855378880fc55b6909a211982a.jpg" alt="" /></div></div></div><p>下午天气很不好，在海上飘着，外面还下大雨，甚至打雷……</p><p>坐了四小时，而后从原港口下了船，感觉像是自找了四小时的罪受，艹。</p><p>回酒店后第一时间点了外卖，不然真感觉要吐了。</p><h2 id="day-4"><a class="markdownIt-Anchor" href="#day-4"></a> Day 4</h2><p>又是地铁！这几天地铁成了我们唯一的陆上交通工具，别的旅行团都会有大巴什么的，我们没有，我们就是坐地铁（</p><p>还是人民会堂站下车，这次我们去了小青岛公园。公园环境很好，玩得很开心，甚至还去看了鱼雷洞。</p><p>以及走的时候发现了一条绿意盎然的楼梯，拍了张照，很好看（</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/a42b5ac4592e8098a0a1d8f1fa3324d3.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/030a20f9951d5cfde976f1bab86d98e2.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/6f554c8ce914078e84a3b547d185e59f.jpg" alt="" /></div></div></div><p>下午坐一号线去了台东，去了步行街吃晚饭。</p><p>兴致突然起来了，和同学一起买了地铁票进站而非使用手机app. 运气挺好，买到了不一样样式的单程票。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/5c8d26bb74174153422278db56a1d5fe.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/00b7e4503d7ed04ec859fd458b56986a.jpg" alt="" /></div></div></div><p>下车之后全班就直接分组分头行动了。穿梭于人来人往的小吃摊中，感受到烟火气的缭绕，对于一个忙碌了一整年的初三学生来说实在是太酷啦！</p><p>买了铁板豆腐、臭豆腐、鱿鱼和青岛啤酒，香的嘞。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/f42a14c17adccc1cae15fc5c3600546a.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/41e8972b204a1610d0aee08bf096c7e6.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/8b4e5734c0a6b66058a460d8206d0279.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/58718b4cb621cfd134f6dbec69b1eab7.jpg" alt="" /></div></div></div><p>然后去了五四广场，再之后就又回了酒店。</p><h2 id="day-5"><a class="markdownIt-Anchor" href="#day-5"></a> Day 5</h2><p>又去了海边，不过是坐地铁去的，三号线转二号线。</p><p>所以又收集（？）到了两款不一样的地铁票。</p><p>还有在五四广场同站换乘。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/ef5c90c7f5b909f67add74d4abb55dcf.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/69344b5bfd12c4074dbb4641487d5847.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/dbe52b5998dfae665d5c6923d2939a33.jpg" alt="" /></div></div></div><p>说实话，天气真的不好，海边景色这几天也看腻了（</p><p>浅浅拍了几张照之后就坐地铁回去了，以及又收集到了一种地铁票。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/04245b72ac38ea4a5573d8cf09aa9f46.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/5f4214fcb7818e449854e9baf0b1a0b8.jpg" alt="" /></div></div></div><p>下午老师组织看电影，一起看了端午档的《消失的她》</p><p>悬疑片嘛……不是很和我胃口，但是观感还不错。</p><p>然后就是吃完饭。老师给了每人80的预算，让分组一起吃晚饭，我就和另外三个同学一起去了海底捞。</p><p>第一次去海底捞，服务很好，很符合我的期待，价格也正常，不算很贵，起码没超预算。</p><p>点了两个菌菇和麻辣两个汤底，味道就很正常，跟我家里和父母一起煮的火锅差不多。</p><p>最后还送了一份面条，海底捞真的，我哭死（大雾</p><p>师傅的手艺很好，观赏性十足，爱了爱了。</p><p>随便贴几张图吧：</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/927d9663fbb157687f742417639ba0e7.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/5576687f8e9c71df1a21514fc763d10e.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/ea37492473b6f9e4d469be71b8ec64f7.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/3af2025c5205e1672c02d3273c56aa51.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/fe4a159c84065a5b6b3a012e1b070d05.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/8c4470186aa87ba5f1a1ea8168207d90.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2023/07/4e56ebe5058e82bf1c3488484565c558.jpg" alt="" /></div></div></div><h2 id="day-6"><a class="markdownIt-Anchor" href="#day-6"></a> Day 6</h2><p>早起前往高铁站，赶十点的高铁。</p><p>天气阴了这么多天，结果偏偏走的时候才好，我的评价是，6.</p><p><img src="https://img.ordchaos.com/img/2023/07/f7d5e1387fe352a4e0f1a89974044fe8.jpg" alt="" /></p><p>坐的复兴号高铁，不过站台另一侧有一辆绿皮火车，于是拍了一张个人觉得很好看的照片：</p><p><img src="https://img.ordchaos.com/img/2023/07/8155c4412294c426fda908358de30667.jpg" alt="" /></p><p>然后又是玩了一天手机……</p><p>最后，晚上6点，回到武汉，与老师同学告别后回到了家，结束了这一场旅行。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>生活记录型的博文，尤其是这么长的，我还是第一次写，有什么不足请多多海涵！</p><p>什么？你问中考？</p><p>请观阅以下内容：</p><blockquote><p>你说的对，但是《中考》是由武汉教育局自主研发的一款「互联网时代」全新开放世界冒险游戏。游戏发生在一个被称作「HappyPark」的幻想公园，在这里，被「往上提的溢水杯」选中的人将被授予「0.797g沉淀」，导引「两种酸」之力。你将扮演一位名为「有两块抹布的直径0.3m的扫地机器人」的神秘角色，在面积27m<sup>2</sup>的秘鲁考古遗址中邂逅的紫甘蓝味软糖，和百万年前出士的bright flowers化石一起，找回「简练明快，势巧形密」的家书同时，感受「尽责地爱」，且逐步发掘「点P过定线」的真相。</p></blockquote><p>怎么说呢，今年的题真的很创人。</p><p>所以……考的差一点也不要紧啦，哈哈……</p><p><strong>···</strong></p><p>啊？你真以为我考砸了？</p><p><img src="https://img.ordchaos.com/img/2023/07/6f09b89f5c261a0d5d0f0fa89c408ff0.png" alt="" /></p><p>886！</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
    </categories>
    
    
    <tags>
      
      <tag>日常</tag>
      
      <tag>旅行</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>前、后与中——表达式求值</title>
    <link href="/posts/c9c6cb4f/"/>
    <url>/posts/c9c6cb4f/</url>
    
    <content type="html"><![CDATA[<p>记录一下最近的练习程序与做法，加深记忆，也当个教程吧，毕竟赠人玫瑰手留余香(bushi</p><span id="more"></span><p>如果你不知道这些表达式分别指什么东西，可以百度一下，这里不再赘述。</p><h2 id="后缀表达式"><a class="markdownIt-Anchor" href="#后缀表达式"></a> 后缀表达式</h2><p>这个应该是最常见的了，下面讲一下实现。</p><p>首先，还是定义函数<span class="heimu" title="你知道的太多了">废话</span>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>然后，进行文件读取，可以用<code>freopen()</code>，不过我这里用的是<code>fopen()</code>：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp">FILE* stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>stack&lt;<span class="hljs-type">double</span>&gt; nums;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-type">char</span> tstr[<span class="hljs-number">100</span>]; <span class="hljs-comment">//temp</span><br><span class="hljs-built_in">fscanf</span>(stream, <span class="hljs-string">&quot;%s&quot;</span>, tstr);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">feof</span>(stream)) <span class="hljs-keyword">break</span>;<br>string input = tstr;<br><br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>解释一下上面的程序：</p><ul><li><code>stack&lt;double&gt; nums</code> 这个栈后面会用到，这里先不用管</li><li><code>fscanf()</code>和<code>scanf()</code>用法一样，唯一的区别是<code>fscanf()</code>用于读取文件流中的信息而非输入流</li><li><code>feof()</code>中的参数为文件流，用于判断是否读到结尾，读到则返回真</li></ul><p>很显然，这段程序用于分别读入每一段字符，那么接下来便是判断输入了。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">//...</span><br><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(input[<span class="hljs-number">0</span>])) &#123;<br>nums.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">atof</span>(input.<span class="hljs-built_in">c_cstr</span>()));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//...</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>如果输入为整数，则进入数字栈，否则开始计算。</p><p>这里使用了<code>isdigit()</code>函数，输入为<code>char</code>类型，用于判断参数是否在<code>'0'</code>与<code>'9'</code>之间。</p><p>计算过程很简单，弹出两个数字栈中的数，根据运算符计算即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//...</span><br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">double</span> y = nums.<span class="hljs-built_in">top</span>();<br>nums.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">double</span> x = nums.<span class="hljs-built_in">top</span>();<br>nums.<span class="hljs-built_in">pop</span>();<br><br><span class="hljs-type">double</span> temp;<br><span class="hljs-keyword">switch</span>(input[<span class="hljs-number">0</span>]) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>temp = x + y;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>temp = x - y;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>temp = x * y;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>temp = x / y;<br><span class="hljs-keyword">break</span>;<br>&#125;<br><br>nums.<span class="hljs-built_in">push</span>(temp);<br>&#125;<br></code></pre></td></tr></table></figure><p>尤其要注意减法与除法的操作数与被操作数顺序，毕竟它们可没有交换律。</p><p>此时已经计算完成，结果作为栈中唯一的元素处在栈顶，直接输出即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">fclose</span>(stream); <span class="hljs-comment">//关文件是一个好习惯</span><br>cout&lt;&lt;nums.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><p>大概就是这样。</p><p>完整代码还是放一下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_num</span><span class="hljs-params">(string str)</span> </span>&#123;<br><span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; str[<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>FILE* stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>stack&lt;<span class="hljs-type">double</span>&gt; nums;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-type">char</span> tstr[<span class="hljs-number">100</span>];<br><span class="hljs-built_in">fscanf</span>(stream, <span class="hljs-string">&quot;%s&quot;</span>, tstr);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">feof</span>(stream)) <span class="hljs-keyword">break</span>;<br>string input = tstr;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">is_num</span>(input)) &#123;<br>nums.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">atof</span>(input.<span class="hljs-built_in">c_str</span>()));<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-type">double</span> y = nums.<span class="hljs-built_in">top</span>();<br>nums.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">double</span> x = nums.<span class="hljs-built_in">top</span>();<br>nums.<span class="hljs-built_in">pop</span>();<br><span class="hljs-type">double</span> temp;<br><span class="hljs-keyword">switch</span>(input[<span class="hljs-number">0</span>]) &#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>temp = x + y;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>temp = x - y;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>temp = x * y;<br><span class="hljs-keyword">break</span>;<br><br><span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>temp = x / y;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>nums.<span class="hljs-built_in">push</span>(temp);<br>&#125;<br>&#125;<br><span class="hljs-built_in">fclose</span>(stream);<br>cout&lt;&lt;nums.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入样例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1 2 + 3 - <br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0<br></code></pre></td></tr></table></figure><h2 id="前缀表达式"><a class="markdownIt-Anchor" href="#前缀表达式"></a> 前缀表达式</h2><p>细心一点就能发现，它与后缀表达式几乎一样，只是顺序不同。</p><p>没错，这正是因为前、后、中缀表达式分别为表达式树的先序、后续与中序遍历。</p><p>利用这个性质，将后缀表达式的顺序稍稍更改即可得到前缀表达式求值的程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">bool</span> <span class="hljs-title">is_num</span><span class="hljs-params">(string str)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(str[<span class="hljs-number">0</span>] &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; str[<span class="hljs-number">0</span>] &lt;= <span class="hljs-string">&#x27;9&#x27;</span>) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    FILE* stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br>    <br>    stack&lt;<span class="hljs-type">double</span>&gt; nums;<br>    vector&lt;string&gt; input; <span class="hljs-comment">//存储读取数据</span><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">char</span> tstr[<span class="hljs-number">100</span>];<br>        <span class="hljs-built_in">fscanf</span>(stream, <span class="hljs-string">&quot;%s&quot;</span>, tstr);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">feof</span>(stream)) <span class="hljs-keyword">break</span>;<br>        input.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">string</span>(tstr));<br>    &#125;<br>    <br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = input.<span class="hljs-built_in">size</span>() - <span class="hljs-number">1</span>;i &gt;= <span class="hljs-number">0</span>;i--) &#123; <span class="hljs-comment">//倒序读取</span><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">is_num</span>(input[i])) &#123;<br>            nums.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">atof</span>(input[i].<span class="hljs-built_in">c_str</span>()));<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">double</span> x = nums.<span class="hljs-built_in">top</span>();<br>            nums.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">double</span> y = nums.<span class="hljs-built_in">top</span>();<br>            nums.<span class="hljs-built_in">pop</span>();<br>            <br>            <span class="hljs-type">double</span> temp;<br>            <span class="hljs-keyword">switch</span>(input[i][<span class="hljs-number">0</span>]) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>                    temp = x + y;<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>                    temp = x - y;<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>                    temp = x * y;<br>                    <span class="hljs-keyword">break</span>;<br>                <br>                <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>                    temp = x / y;<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <br>            nums.<span class="hljs-built_in">push</span>(temp);<br>        &#125;<br>    &#125;<br>    <br>    <span class="hljs-built_in">fclose</span>(stream);<br>    cout&lt;&lt;nums.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br>    <br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>改成倒序读取即可。</p><p>输入样例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">- + 1 2 3 <br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">0<br></code></pre></td></tr></table></figure><h2 id="中缀表达式"><a class="markdownIt-Anchor" href="#中缀表达式"></a> 中缀表达式</h2><p>我们最常用的表达式，处理起来却是最复杂的，因为现在需要考虑优先级与括号了。</p><p>这里有几种方法：</p><h3 id="递归"><a class="markdownIt-Anchor" href="#递归"></a> 递归</h3><p>首先，定义函数用于取多项式的因子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">factor</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> c = cin.<span class="hljs-built_in">peek</span>();<br>    <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>        cin.<span class="hljs-built_in">get</span>();<br>        res = <span class="hljs-built_in">expression</span>();<br>        cin.<span class="hljs-built_in">get</span>();<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) &#123;<br>            res = <span class="hljs-number">10</span> * res + c - <span class="hljs-string">&#x27;0&#x27;</span>;<br>            cin.<span class="hljs-built_in">get</span>();<br>            c = cin.<span class="hljs-built_in">peek</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>先定义结果为0，然后判断输入。若为括号，则将其内容视为新表达式，交由马上要定义的<code>expression()</code>函数计算。否则，按位取出输入中的数即可。</p><p>顺带一提，这些代码中的<code>cin.get()</code>与<code>cin.peek()</code>尤其重要，切勿移动位置或轻易替换。至于原因，自己模拟想一下吧。</p><p>然后，计算单项式的值，代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">term</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">factor</span>();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">char</span> mark = cin.<span class="hljs-built_in">peek</span>();<br>        <span class="hljs-keyword">if</span>(mark == <span class="hljs-string">&#x27;*&#x27;</span> || mark == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>            cin.<span class="hljs-built_in">get</span>();<br>            <span class="hljs-type">int</span> v = <span class="hljs-built_in">factor</span>();<br>            <span class="hljs-keyword">if</span>(mark == <span class="hljs-string">&#x27;*&#x27;</span>) res *= v;<br>            <span class="hljs-keyword">else</span> res /= v;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>先用<code>factor()</code>函数读入因子，然后循环判断该单项式是否读完。若未读完（即该因子与下一个因子间仍用乘号或除号连接）则取下一个因子并计算，否则返回该单项式的值即可。并且很显然，这样的写法就代表输入的表达式中不应当含有任何空格，也只支持整数运算（要浮点数自己改<span class="heimu" title="你知道的太多了">我不干了</span>）。</p><p>最后是整个表达式，与计算单项式基本一样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">expression</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> res = <span class="hljs-built_in">term</span>();<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">char</span> mark = cin.<span class="hljs-built_in">peek</span>();<br>        <span class="hljs-keyword">if</span>(mark == <span class="hljs-string">&#x27;+&#x27;</span> || mark == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            cin.<span class="hljs-built_in">get</span>();<br>            <span class="hljs-type">int</span> v = <span class="hljs-built_in">term</span>();<br>            <span class="hljs-keyword">if</span>(mark == <span class="hljs-string">&#x27;+&#x27;</span>) res += v;<br>            <span class="hljs-keyword">else</span> res -= v;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>读入单项式再计算，直到该表达式计算完毕（即<code>mark</code>取到<code>)</code>或<code>EOF</code>）</p><p>主函数其实已经一目了然了，重定向输入再调用<code>expression()</code>即可，就不写了。</p><p>输入样例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">(28/7)/2+(8-9)<br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><h3 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h3><p>这里又分为两种方案：</p><h4 id="转为后前缀表达式再计算"><a class="markdownIt-Anchor" href="#转为后前缀表达式再计算"></a> 转为后/前缀表达式再计算</h4><p>这里的重点是转换的过程，逻辑整体如下（中缀-&gt;后缀）：</p><ul><li>输入若为数字，直接放入输出表达式中。若为符号：<ul><li>如果符号栈为空，则放入符号栈中</li><li>如果符号栈栈顶元素优先级大于等于该符号，则出栈栈顶符号放入表达式，若此时栈顶符号优先级大于等于该符号，则重复以上流程直至小于，而后入栈该符号</li><li>如果符号栈栈顶元素优先级小于该符号，该符号入栈</li><li>如果该符号为左括号，直接入栈</li><li>如果该符号为右括号，则依次出栈符号栈栈顶元素放入表达式中，直至左括号。最后抛弃左括号与右括号</li></ul></li><li>若输入完毕，符号栈中仍有符号，则依次出栈放入表达式</li></ul><p>代码如下（转为后缀表达式）：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><code class="hljs cpp">map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; markl;<br><br>markl[<span class="hljs-string">&#x27;+&#x27;</span>] = <span class="hljs-number">0</span>;<br>markl[<span class="hljs-string">&#x27;-&#x27;</span>] = <span class="hljs-number">0</span>;<br>markl[<span class="hljs-string">&#x27;*&#x27;</span>] = <span class="hljs-number">1</span>;<br>markl[<span class="hljs-string">&#x27;/&#x27;</span>] = <span class="hljs-number">1</span>;<br><br>FILE* stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><br>stack&lt;<span class="hljs-type">char</span>&gt; marks;<br>vector&lt;string&gt; expression;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>    <span class="hljs-type">char</span> tstr[<span class="hljs-number">100</span>];<br>    <span class="hljs-built_in">fscanf</span>(stream, <span class="hljs-string">&quot;%s&quot;</span>, tstr);<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">feof</span>(stream)) <span class="hljs-keyword">break</span>;<br>    string input = tstr;<br>    <br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(input[<span class="hljs-number">0</span>])) &#123;<br>        expression.<span class="hljs-built_in">push_back</span>(input);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(input[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>        marks.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;(&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(input[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">if</span>(marks.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                marks.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            <span class="hljs-type">char</span> t[<span class="hljs-number">2</span>] = &#123;marks.<span class="hljs-built_in">top</span>(), <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>            expression.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">string</span>(t));<br>            marks.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(marks.<span class="hljs-built_in">empty</span>() || marks.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>            marks.<span class="hljs-built_in">push</span>(input[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(markl[input[<span class="hljs-number">0</span>]] &lt;= markl[marks.<span class="hljs-built_in">top</span>()]) &#123;<br>        <span class="hljs-keyword">while</span>(!marks.<span class="hljs-built_in">empty</span>() &amp;&amp; markl[temp[<span class="hljs-number">0</span>]] &lt;= markl[marks.<span class="hljs-built_in">top</span>()]) &#123;<br>            <span class="hljs-type">char</span> t[<span class="hljs-number">2</span>] = &#123;marks.<span class="hljs-built_in">top</span>(), <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>            expression.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">string</span>(t));<br>            marks.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>        marks.<span class="hljs-built_in">push</span>(input[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            marks.<span class="hljs-built_in">push</span>(input[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">while</span>(!marks.<span class="hljs-built_in">empty</span>()) &#123;<br><span class="hljs-type">char</span> t[<span class="hljs-number">2</span>] = &#123;marks.<span class="hljs-built_in">top</span>(), <span class="hljs-string">&#x27;\0&#x27;</span>&#125;;<br>expression.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">string</span>(t));<br>marks.<span class="hljs-built_in">pop</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>和上面的逻辑完全一样，唯一要注意的是这里使用了<code>map</code>，可以理解为字典。</p><p>然后只需要计算就行，代码就不放了。</p><p>前缀表达式的逻辑与代码可以自己想想。</p><p>输入输出样例同下面。</p><h4 id="直接计算"><a class="markdownIt-Anchor" href="#直接计算"></a> 直接计算</h4><p>逻辑和转换本身是一样的，只不过没有了表达式向量，而是直接计算后放入数字栈。</p><p>即将所有的对于<code>expression</code>的操作改为计算即可：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">char</span> mark, <span class="hljs-type">double</span> x, <span class="hljs-type">double</span> y)</span> </span>&#123;<br>    <span class="hljs-type">double</span> temp = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">switch</span>(mark) &#123;<br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;+&#x27;</span>:<br>            temp = x + y;<br>            <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;-&#x27;</span>:<br>            temp = x - y;<br>            <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;*&#x27;</span>:<br>            temp = x * y;<br>            <span class="hljs-keyword">break</span>;<br>        <br>        <span class="hljs-keyword">case</span> <span class="hljs-string">&#x27;/&#x27;</span>:<br>            temp = x / y;<br>            <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    FILE* stream = <span class="hljs-built_in">fopen</span>(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>);<br><br>    map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; markl;<br>    markl[<span class="hljs-string">&#x27;+&#x27;</span>] = <span class="hljs-number">0</span>;<br>    markl[<span class="hljs-string">&#x27;-&#x27;</span>] = <span class="hljs-number">0</span>;<br>    markl[<span class="hljs-string">&#x27;*&#x27;</span>] = <span class="hljs-number">1</span>;<br>    markl[<span class="hljs-string">&#x27;/&#x27;</span>] = <span class="hljs-number">1</span>;<br><br>    stack&lt;<span class="hljs-type">char</span>&gt; marks;<br>    stack&lt;<span class="hljs-type">double</span>&gt; nums;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">char</span> tstr[<span class="hljs-number">100</span>];<br>        <span class="hljs-built_in">fscanf</span>(stream, <span class="hljs-string">&quot;%s&quot;</span>, tstr);<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">feof</span>(stream)) <span class="hljs-keyword">break</span>;<br>        string temp = tstr;<br><br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isdigit</span>(temp[<span class="hljs-number">0</span>])) &#123;<br>            nums.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">atof</span>(temp.<span class="hljs-built_in">c_str</span>()));<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>            marks.<span class="hljs-built_in">push</span>(<span class="hljs-string">&#x27;(&#x27;</span>);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(temp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>            <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>                <span class="hljs-keyword">if</span>(marks.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                    marks.<span class="hljs-built_in">pop</span>();<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br><br>                <span class="hljs-type">double</span> y = nums.<span class="hljs-built_in">top</span>();<br>                nums.<span class="hljs-built_in">pop</span>();<br>                <span class="hljs-type">double</span> x = nums.<span class="hljs-built_in">top</span>();<br>                nums.<span class="hljs-built_in">pop</span>();<br>                nums.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">calc</span>(marks.<span class="hljs-built_in">top</span>(), x, y));<br><br>                marks.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(marks.<span class="hljs-built_in">empty</span>() || marks.<span class="hljs-built_in">top</span>() == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>            marks.<span class="hljs-built_in">push</span>(temp[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(markl[temp[<span class="hljs-number">0</span>]] &lt;= markl[marks.<span class="hljs-built_in">top</span>()]) &#123;<br>        <span class="hljs-keyword">while</span>(!marks.<span class="hljs-built_in">empty</span>() &amp;&amp; markl[temp[<span class="hljs-number">0</span>]] &lt;= markl[marks.<span class="hljs-built_in">top</span>()]) &#123;<br>            <span class="hljs-type">double</span> y = nums.<span class="hljs-built_in">top</span>();<br>            nums.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-type">double</span> x = nums.<span class="hljs-built_in">top</span>();<br>            nums.<span class="hljs-built_in">pop</span>();<br>            nums.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">calc</span>(marks.<span class="hljs-built_in">top</span>(), x, y));<br><br>            marks.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>            marks.<span class="hljs-built_in">push</span>(temp[<span class="hljs-number">0</span>]);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            marks.<span class="hljs-built_in">push</span>(temp[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(!marks.<span class="hljs-built_in">empty</span>()) &#123;<br>        <span class="hljs-type">double</span> y = nums.<span class="hljs-built_in">top</span>();<br>        nums.<span class="hljs-built_in">pop</span>();<br>        <span class="hljs-type">double</span> x = nums.<span class="hljs-built_in">top</span>();<br>        nums.<span class="hljs-built_in">pop</span>();<br>        nums.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">calc</span>(marks.<span class="hljs-built_in">top</span>(), x, y));<br><br>        marks.<span class="hljs-built_in">pop</span>();<br>    &#125;<br><br><span class="hljs-built_in">fclose</span>(stream);<br><br>    cout&lt;&lt;nums.<span class="hljs-built_in">top</span>()&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输入样例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">( 28 / 7 ) / 2 + ( 8 - 9 ) <br></code></pre></td></tr></table></figure><p>输出样例：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">1<br></code></pre></td></tr></table></figure><p>收工！</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>这篇大概是我最长的纯原创技术类博文了。。。。。。</p><p>好累QAQ</p><p>下次再见啦！886！</p><h3 id="20230403更新"><a class="markdownIt-Anchor" href="#20230403更新"></a> 2023.04.03更新</h3><p>让ChatGPT改了一个支持浮点数的递归版本：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdlib&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;cstdio&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_tab</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_log</span><span class="hljs-params">(string, <span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_log</span><span class="hljs-params">(string, <span class="hljs-type">int</span>, <span class="hljs-type">double</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">expression</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">term</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">factor</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">freopen</span>(<span class="hljs-string">&quot;input.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>, stdin);<br>    cout &lt;&lt; <span class="hljs-built_in">expression</span>(<span class="hljs-number">0</span>) &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_tab</span><span class="hljs-params">(<span class="hljs-type">int</span> deep)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; deep;i++) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;\t&quot;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_log</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> deep)</span> </span>&#123;<br>    <span class="hljs-built_in">print_tab</span>(deep);<br>    cout &lt;&lt; name &lt;&lt; <span class="hljs-string">&quot; &#123;&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print_log</span><span class="hljs-params">(string name, <span class="hljs-type">int</span> deep, <span class="hljs-type">double</span> res)</span> </span>&#123;<br>    <span class="hljs-built_in">print_tab</span>(deep);<br>    cout &lt;&lt; <span class="hljs-string">&quot;&#125; -&gt; res =&quot;</span> &lt;&lt; res &lt;&lt; endl;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">expression</span><span class="hljs-params">(<span class="hljs-type">int</span> deep)</span> </span>&#123;<br>    <span class="hljs-built_in">print_log</span>(<span class="hljs-string">&quot;expression&quot;</span>, deep);<br><br>    <span class="hljs-type">double</span> res = <span class="hljs-built_in">term</span>(deep + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">char</span> mark = cin.<span class="hljs-built_in">peek</span>();             <span class="hljs-comment">//get</span><br>        <span class="hljs-keyword">if</span>(mark == <span class="hljs-string">&#x27;+&#x27;</span> || mark == <span class="hljs-string">&#x27;-&#x27;</span>) &#123;<br>            cin.<span class="hljs-built_in">get</span>();                      <span class="hljs-comment">//skip</span><br>            <span class="hljs-type">double</span> v = <span class="hljs-built_in">term</span>(deep + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(mark == <span class="hljs-string">&#x27;+&#x27;</span>) res += v;<br>            <span class="hljs-keyword">else</span> res -= v;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">print_log</span>(<span class="hljs-string">&quot;expression&quot;</span>, deep, res);<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">term</span><span class="hljs-params">(<span class="hljs-type">int</span> deep)</span> </span>&#123;<br>    <span class="hljs-built_in">print_log</span>(<span class="hljs-string">&quot;term&quot;</span>, deep);<br><br>    <span class="hljs-type">double</span> res = <span class="hljs-built_in">factor</span>(deep + <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">char</span> mark = cin.<span class="hljs-built_in">peek</span>();             <span class="hljs-comment">//get</span><br>        <span class="hljs-keyword">if</span>(mark == <span class="hljs-string">&#x27;*&#x27;</span> || mark == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>            cin.<span class="hljs-built_in">get</span>();                      <span class="hljs-comment">//skip</span><br>            <span class="hljs-type">double</span> v = <span class="hljs-built_in">factor</span>(deep + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">if</span>(mark == <span class="hljs-string">&#x27;*&#x27;</span>) res *= v;<br>            <span class="hljs-keyword">else</span> res /= v;<br>        &#125;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>    &#125;<br><br>    <span class="hljs-built_in">print_log</span>(<span class="hljs-string">&quot;term&quot;</span>, deep, res);<br>    <br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">double</span> <span class="hljs-title">factor</span><span class="hljs-params">(<span class="hljs-type">int</span> deep)</span> </span>&#123;<br>    <span class="hljs-built_in">print_log</span>(<span class="hljs-string">&quot;factor&quot;</span>, deep);<br><br>    <span class="hljs-type">double</span> res = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">double</span> base = <span class="hljs-number">1.0</span>;<br>    <span class="hljs-type">char</span> c = cin.<span class="hljs-built_in">peek</span>();                    <span class="hljs-comment">//get</span><br>    <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>        cin.<span class="hljs-built_in">get</span>();                          <span class="hljs-comment">//skip</span><br>        res = <span class="hljs-built_in">expression</span>(deep + <span class="hljs-number">1</span>);<br>        cin.<span class="hljs-built_in">get</span>();                          <span class="hljs-comment">//skip</span><br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c) || c == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;     <span class="hljs-comment">// == GET A NUMBER ==</span><br>            <span class="hljs-keyword">if</span>(c == <span class="hljs-string">&#x27;.&#x27;</span>) &#123;<br>                cin.<span class="hljs-built_in">get</span>();                  <span class="hljs-comment">//skip the &#x27;.&#x27;</span><br>                c = cin.<span class="hljs-built_in">peek</span>();             <span class="hljs-comment">//get the next character</span><br>                <span class="hljs-keyword">while</span>(<span class="hljs-built_in">isdigit</span>(c)) &#123;         <span class="hljs-comment">//collect digits for the decimal part</span><br>                    res = res + (c - <span class="hljs-string">&#x27;0&#x27;</span>) * (base /= <span class="hljs-number">10.0</span>);<br>                    cin.<span class="hljs-built_in">get</span>();<br>                    c = cin.<span class="hljs-built_in">peek</span>();<br>                &#125;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            res = res * <span class="hljs-number">10</span> + c - <span class="hljs-string">&#x27;0&#x27;</span>;       <span class="hljs-comment">//get num</span><br>            cin.<span class="hljs-built_in">get</span>();                      <span class="hljs-comment">//skip</span><br>            c = cin.<span class="hljs-built_in">peek</span>();                 <span class="hljs-comment">//get</span><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">print_tab</span>(deep + <span class="hljs-number">1</span>);<br>    cout &lt;&lt; <span class="hljs-string">&quot;get_num();&quot;</span> &lt;&lt; endl;<br>    <span class="hljs-built_in">print_log</span>(<span class="hljs-string">&quot;factor&quot;</span>, deep, res);<br><br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>神</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>迟来的二月调考总结</title>
    <link href="/posts/7eb4319/"/>
    <url>/posts/7eb4319/</url>
    
    <content type="html"><![CDATA[<p>各位，好久不见，距离上次发文的时间过的有点久，其中最大的原因就是<span class="heimu" title="你知道的太多了">万恶的</span>二月调考。现在已经考完一个多月了<span class="heimu" title="你知道的太多了">离四调也就一个月了</span>，这里我来总结一下。</p><h2 id="背景要素"><a class="markdownIt-Anchor" href="#背景要素"></a> 背景要素</h2><p>以防不知道，本人生在武汉，学籍武汉，参加武汉的统一考试。武汉在九年级时会有几场全市统考，分别为九上的元月调考（期末）与九下的四月调考（期中）和中考（期末）。今年闹疫情，于是原定在一月四号的元调被挪到了二月二十一号（九下开头）。</p><p>武汉的中考在我这一届改革了，下面对比一下以往和之后的不同：</p><table><thead><tr><th style="text-align:center">科目</th><th style="text-align:center">分数（前）</th><th style="text-align:center">分数（后）</th></tr></thead><tbody><tr><td style="text-align:center">语文</td><td style="text-align:center">120</td><td style="text-align:center">120</td></tr><tr><td style="text-align:center">数学</td><td style="text-align:center">120</td><td style="text-align:center">120</td></tr><tr><td style="text-align:center">英语</td><td style="text-align:center">120</td><td style="text-align:center">120</td></tr><tr><td style="text-align:center">物理</td><td style="text-align:center">70</td><td style="text-align:center">70</td></tr><tr><td style="text-align:center">化学</td><td style="text-align:center">50</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center">历史</td><td style="text-align:center">\</td><td style="text-align:center">60</td></tr><tr><td style="text-align:center">道德与法治</td><td style="text-align:center">40</td><td style="text-align:center">60</td></tr><tr><td style="text-align:center">实验</td><td style="text-align:center">0</td><td style="text-align:center">30</td></tr><tr><td style="text-align:center">体育</td><td style="text-align:center">30</td><td style="text-align:center">50</td></tr><tr><td style="text-align:center"><strong>总分</strong></td><td style="text-align:center"><strong>550</strong></td><td style="text-align:center"><strong>680</strong></td></tr></tbody></table><p>详解：</p><ul><li>原本不考历史</li><li>道德与法治原先只有选择题，现在新加入了材料题，分数构成为<code>28分选择 + 32分材料</code>。历史分数构成与其一样，且二者合卷</li><li>实验考试以往不计分，为实操。现在为机考答卷，在120道题（40物理，40化学，40生物）中每个科目随机选10道题目作答，每题一分</li><li>体育由30分改为50分，构成为<code>15分平时 + 35分考试</code>。本届由于新冠疫情的原因，取消体育中考（即所有人考试分数计为35）</li></ul><h2 id="二调情况"><a class="markdownIt-Anchor" href="#二调情况"></a> 二调情况</h2><p>先明确二调的考试内容，为中考所有科目除去体育与实验（四调亦然）</p><p>分数不是很方便透露，大致说一下考试情况吧。说来惭愧，正正好好是语数英垮了（bushi</p><p>语文选择题眼瞎，错了两题。英语则是阅读理解B篇，神<span class="heimu" title="你知道的太多了">你以为我会说脏话吗？</span>的<code>Live a colorful life</code>，我真感觉不到这么大，真的。</p><p>总之就是很意难平。</p><p>好消息是化学满分，终于！</p><p>签约的话倒不是不能签，只能说是比上不足，比下有余余余余余…</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>也没什么可说的，给自己加油吧。我是想打竞赛的，文化课成绩必然需要更上一层楼才行。</p><p>886！</p><p>（鬼知道下次什么时候更新）</p>]]></content>
    
    
    <categories>
      
      <category>个人</category>
      
    </categories>
    
    
    <tags>
      
      <tag>总结</tag>
      
      <tag>学习</tag>
      
      <tag>考试</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>全站 webp 自动切换，加速访问好帮手</title>
    <link href="/posts/23e22de2/"/>
    <url>/posts/23e22de2/</url>
    
    <content type="html"><![CDATA[<p>原本博客用的都是普通图片，就算有懒加载，一堆圈圈一起转也惹人心烦。现在改为了原图/webp的自适应切换，效果好上不少。</p><span id="more"></span><h2 id="前期准备"><a class="markdownIt-Anchor" href="#前期准备"></a> 前期准备</h2><p>首要任务是拿到webp格式的图片，这个看自己。像我用的vps上的<a href="https://www.lsky.pro/">Lsky Pro</a>，本地存储。有高性能vps可以试试用<a href="https://webp.sh">Webp-Server</a>配合。但我的轻量应用承受不起，遂作罢。改为了定时shell脚本，一分钟触发一次：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>find . -type f -iname &quot;*.png&quot; | while read file; do<br>    if [ ! -f &quot;$&#123;file%.*&#125;.webp&quot; ]; then<br>        cwebp -q 85 &quot;$file&quot; -o &quot;$&#123;file%.*&#125;.webp&quot;<br>    fi<br>done<br><br>find . -type f -iname &quot;*.jpg&quot; | while read file; do<br>    if [ ! -f &quot;$&#123;file%.*&#125;.webp&quot; ]; then<br>        cwebp -q 85 &quot;$file&quot; -o &quot;$&#123;file%.*&#125;.webp&quot;<br>    fi<br>done<br>    <br>find . -type f -iname &quot;*.jpeg&quot; | while read file; do<br>    if [ ! -f &quot;$&#123;file%.*&#125;.webp&quot; ]; then<br>        cwebp -q 85 &quot;$file&quot; -o &quot;$&#123;file%.*&#125;.webp&quot;<br>    fi<br>done<br>    <br>find . -type f -iname &quot;*.tif&quot; | while read file; do<br>    if [ ! -f &quot;$&#123;file%.*&#125;.webp&quot; ]; then<br>        cwebp -q 85 &quot;$file&quot; -o &quot;$&#123;file%.*&#125;.webp&quot;<br>    fi<br>done<br></code></pre></td></tr></table></figure><p>脚本运行时会遍历自己所在的文件夹及其子文件夹，转换所有没有对应webp格式的图片（<code>png</code>，<code>jpg</code>、<code>jpeg</code>与<code>tiff</code>）为webp图片（原图还在，放心）。</p><p>这段脚本中使用了<code>cwebp</code>指令，它来源于<code>libwebp</code>。安装可以参考下方：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">安装编译器以及依赖包</span><br>yum install -y gcc make autoconf automake libtool libjpeg-devel libpng-devel<br><span class="hljs-meta prompt_"># </span><span class="language-bash">请到官网下载最新版本，版本列表：https://storage.googleapis.com/downloads.webmproject.org/releases/webp/</span><br>wget https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.4.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">解压</span><br>tar -zxvf libwebp-1.2.4.tar.gz<br><span class="hljs-meta prompt_"># </span><span class="language-bash">进入目录</span><br>cd libwebp-1.2.4<br><span class="hljs-meta prompt_"># </span><span class="language-bash">源代码安装环境检查</span><br>./configure<br><span class="hljs-meta prompt_"># </span><span class="language-bash">编译</span><br>make<br><span class="hljs-meta prompt_"># </span><span class="language-bash">安装</span><br>make install<br></code></pre></td></tr></table></figure><p>安装过程中遇到问题请善用百度/Google，本人不对此负责（bushi</p><p>做好以上所有工作后，就可以开始下面的内容。</p><h2 id="service-worker"><a class="markdownIt-Anchor" href="#service-worker"></a> Service Worker</h2><h3 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h3><p>不知道是什么、如何部署的，可以看看CYF大佬的这两篇文章：</p><ul><li><a href="https://blog.eurekac.cn/p/c0af86bb.html">欲善其事，必利其器 - 论如何善用ServiceWorker</a></li><li><a href="https://blog.eurekac.cn/p/d3c51290.html">SpeedUp!使用黑科技为你的网站提速</a></li></ul><p>如果你已经部署了Service Worker就可以继续了。</p><h3 id="脚本"><a class="markdownIt-Anchor" href="#脚本"></a> 脚本</h3><p>添加一个监听器，监听<code>fetch</code>事件：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript">self.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;fetch&#x27;</span>, <span class="hljs-keyword">async</span> event =&gt; &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>（或者在本来的监听器里面加上）</p><p>然后判断流量是否是对图站的请求，可以用一个if来判断：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;your.image.site&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">var</span> requestUrl = event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>event.request.url</code>是请求的地址，用<code>indexOf()</code>方法来判断地址中是否包含图站地址，若不反回代表没有的-1即为是对图站的请求。</p><p>接下来判断浏览器是否支持webp图片，定义一个变量<code>supportsWebp</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> supportsWebp = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span> (event.<span class="hljs-property">request</span>.<span class="hljs-property">headers</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;accept&#x27;</span>))&#123;<br>supportsWebp = event.<span class="hljs-property">request</span>.<span class="hljs-property">headers</span><br>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;accept&#x27;</span>)<br>.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;webp&#x27;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果可以获取到浏览器的Accept头，且头中包含<code>image/webp</code>，即为支持webp，否则为不支持。</p><p>然后就可以进一步处理了，若浏览器支持webp，则进行下一步：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (supportsWebp) &#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[SW] Don&#x27;t support webp image, skip &quot;</span> + requestUrl + <span class="hljs-string">&quot; .&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>然后获取请求的文件类型。最开始的脚本只支持<code>png</code>，<code>jpg</code>、<code>jpeg</code>与<code>tiff</code>这四种格式的图片，所以我们也只能篡改这四种格式图片的请求到webp图片上：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> imageUrl = requestUrl.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>);<br><span class="hljs-keyword">if</span>(imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;jpg&#x27;</span> || imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;tif&#x27;</span> || imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;png&#x27;</span> || imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;jpeg&#x27;</span>) &#123;<br>    <span class="hljs-keyword">var</span> newUrl = requestUrl.<span class="hljs-title function_">replace</span>(imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;webp&#x27;</span>);<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p><code>newUrl</code>中存储了新的请求地址，接下来对它发起请求即可：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> newRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(newUrl);<br>event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-title function_">fetch</span>(newRequest));<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[SW] Redirect &quot;</span> + requestUrl + <span class="hljs-string">&quot; to &quot;</span> + newUrl + <span class="hljs-string">&quot; .&quot;</span>);<br></code></pre></td></tr></table></figure><p>当请求完成并图片被完整下载以后，进行缓存，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript">event.<span class="hljs-title function_">waitUntil</span>(<br><span class="hljs-title function_">fetch</span>(newRequest).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br><span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;[SW] Failed to load image: &quot;</span> + newUrl);<br>caches.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">CACHE_NAME</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">cache</span>) &#123;<br>cache.<span class="hljs-title function_">put</span>(newRequest, response);<br>&#125;);<br>&#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>&#125;)<br>);<br></code></pre></td></tr></table></figure><p>若获取失败则提示，成功则缓存。</p><p>最后，要打断之前的请求，避免降低速度，可以调用<code>event.stopImmediatePropagation()</code>方法打断原始请求。</p><p>最后完整代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span>(event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;img.ordchaos.com&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">var</span> requestUrl = event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>;<br>    <span class="hljs-keyword">var</span> supportsWebp = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">request</span>.<span class="hljs-property">headers</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;accept&#x27;</span>))&#123;<br>        supportsWebp = event.<span class="hljs-property">request</span>.<span class="hljs-property">headers</span><br>                            .<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;accept&#x27;</span>)<br>                            .<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;webp&#x27;</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (supportsWebp) &#123;<br>        <span class="hljs-keyword">var</span> imageUrl = requestUrl.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>        <span class="hljs-keyword">if</span>(imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;jpg&#x27;</span> || imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;tif&#x27;</span> || imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;png&#x27;</span> || imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>] === <span class="hljs-string">&#x27;jpeg&#x27;</span>)&#123;<br>            <span class="hljs-keyword">var</span> newUrl = requestUrl.<span class="hljs-title function_">replace</span>(imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>], <span class="hljs-string">&#x27;webp&#x27;</span>);<br>            <span class="hljs-keyword">var</span> newRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(newUrl);<br>            event.<span class="hljs-title function_">respondWith</span>(<span class="hljs-title function_">fetch</span>(newRequest));<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[SW] Redirect &quot;</span> + requestUrl + <span class="hljs-string">&quot; to &quot;</span> + newUrl + <span class="hljs-string">&quot; .&quot;</span>);<br>            event.<span class="hljs-title function_">waitUntil</span>(<br>                <span class="hljs-title function_">fetch</span>(newRequest).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">response</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;[SW] Failed to load image: &quot;</span> + newUrl);<br>                    caches.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">CACHE_NAME</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">cache</span>) &#123;<br>                        cache.<span class="hljs-title function_">put</span>(newRequest, response);<br>                    &#125;);<br>                &#125;).<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>                &#125;)<br>            );<br>            event.<span class="hljs-title function_">stopImmediatePropagation</span>();<br>            <span class="hljs-keyword">return</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[SW] Don&#x27;t support webp image, skip &quot;</span> + requestUrl + <span class="hljs-string">&quot; .&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>你学会了吗？</p><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>进入网站，若一切正常，当加载到一张图片时，控制台（<code>F12</code>打开）会提示<code>[SW] Redirect https://your.image.site/path/to/img.png to https://your.image.site/path/to/img.webp .</code>这样的信息。</p><p>要测试无webp支持的情景，则点击右上角的三个点。</p><p><img src="https://img.ordchaos.com/img/2023/01/01562686a8db1bb30defe61ffa333bd1.png" alt="" /></p><p><img src="https://img.ordchaos.com/img/2023/01/372ab8df519f78c5d59ea93fcd4caf78.png" alt="" /></p><p>选择更多工具，找到“渲染”并点击。</p><p><img src="https://img.ordchaos.com/img/2023/01/6a65c870cbafb3f9f5743d96749c549a.png" alt="" /></p><p>勾选“停用webp”即可。</p><p>此时，加载图片时会提示<code>[SW] Don't support webp image, skip https://your.image.site/path/to/img.png .</code></p><p>可以试试我这里的这张图片：（图片来自CYF大佬的<code>Client Worker</code>项目的文档）</p><p><img src="https://img.ordchaos.com/img/2023/01/9f2975321779cda14980431c4595bb37.jpg" alt="" /></p><p>若浏览器支持webp则会显示<code>Webp Accept!</code>，否则为<code>Webp Reject!This is a jpg file.</code></p><p><strong>(2024.08.03)</strong> 现在支持avif则会优先显示<code>Avif Accept!</code></p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>刚刚放寒假，舒坦。</p><p>但与之对应，九上已经结束，还有一学期就中考。。。</p><p>加油！我可以的！</p><p>那就这样，886！</p><h2 id="20240803-更新"><a class="markdownIt-Anchor" href="#20240803-更新"></a> 2024.08.03 更新</h2><p>看了Heo的<a href="https://blog.zhheo.com/p/6a933575.html">实现全站图片使用avif格式，替代臃肿的webp教程</a>，好吧，再换一下。</p><p>服务器上使用<code>cavif</code>工具转换图片格式，<code>service worker</code>上简单改一下就好。</p><p>参考：</p><p><code>img2webp.sh</code>内容：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">!/bin/bash</span><br><br>convert_to_formats() &#123;<br>    local file=&quot;$1&quot;<br>    local base=&quot;$&#123;file%.*&#125;&quot;<br><br>    if [ ! -f &quot;$&#123;base&#125;.webp&quot; ]; then<br>        cwebp -q 85 &quot;$file&quot; -o &quot;$&#123;base&#125;.webp&quot;<br>    fi<br><br>    if [ ! -f &quot;$&#123;base&#125;.avif&quot; ]; then<br>        cavif -Q 80 &quot;$file&quot; -o &quot;$&#123;base&#125;.avif&quot;<br>    fi<br>&#125;<br><br>find . -type f -iname &quot;*.png&quot; | while read file; do<br>    convert_to_formats &quot;$file&quot;<br>done<br><br>find . -type f -iname &quot;*.jpg&quot; | while read file; do<br>    convert_to_formats &quot;$file&quot;<br>done<br><br>find . -type f -iname &quot;*.jpeg&quot; | while read file; do<br>    convert_to_formats &quot;$file&quot;<br>done<br></code></pre></td></tr></table></figure><p><code>sw.js</code>重定向段：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">if</span> (event.<span class="hljs-property">request</span>.<span class="hljs-property">url</span>.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;img.ordchaos.com&#x27;</span>) !== -<span class="hljs-number">1</span>) &#123;<br>    <span class="hljs-keyword">var</span> supportsWebp = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">var</span> supportsAvif = <span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">request</span>.<span class="hljs-property">headers</span>.<span class="hljs-title function_">has</span>(<span class="hljs-string">&#x27;accept&#x27;</span>)) &#123;<br>        <span class="hljs-keyword">var</span> acceptHeader = event.<span class="hljs-property">request</span>.<span class="hljs-property">headers</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;accept&#x27;</span>);<br>        supportsWebp = acceptHeader.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;webp&#x27;</span>);<br>        supportsAvif = acceptHeader.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;avif&#x27;</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">var</span> imageUrl = requestUrl.<span class="hljs-title function_">split</span>(<span class="hljs-string">&quot;.&quot;</span>);<br>    <span class="hljs-keyword">var</span> fileExtension = imageUrl[imageUrl.<span class="hljs-property">length</span> - <span class="hljs-number">1</span>];<br><br>    <span class="hljs-keyword">if</span> (fileExtension === <span class="hljs-string">&#x27;jpg&#x27;</span> || fileExtension === <span class="hljs-string">&#x27;png&#x27;</span> || fileExtension === <span class="hljs-string">&#x27;jpeg&#x27;</span>) &#123;<br>        <span class="hljs-keyword">var</span> newUrl;<br>        <span class="hljs-keyword">if</span> (supportsAvif) &#123;<br>            newUrl = requestUrl.<span class="hljs-title function_">replace</span>(fileExtension, <span class="hljs-string">&#x27;avif&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[SW] Redirect &quot;</span> + requestUrl + <span class="hljs-string">&quot; to &quot;</span> + newUrl + <span class="hljs-string">&quot; (AVIF).&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (supportsWebp) &#123;<br>            newUrl = requestUrl.<span class="hljs-title function_">replace</span>(fileExtension, <span class="hljs-string">&#x27;webp&#x27;</span>);<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[SW] Redirect &quot;</span> + requestUrl + <span class="hljs-string">&quot; to &quot;</span> + newUrl + <span class="hljs-string">&quot; (WebP).&quot;</span>);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;[SW] Don&#x27;t support AVIF or WebP, using original format for &quot;</span> + requestUrl + <span class="hljs-string">&quot;.&quot;</span>);<br>            newUrl = requestUrl;<br>        &#125;<br><br>        <span class="hljs-keyword">var</span> newRequest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Request</span>(newUrl);<br>        event.<span class="hljs-title function_">respondWith</span>(<br>            <span class="hljs-title function_">fetch</span>(newRequest)<br>                .<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">response</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (!response.<span class="hljs-property">ok</span>) <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&quot;[SW] Failed to load image: &quot;</span> + newUrl);<br>                    <span class="hljs-keyword">return</span> caches.<span class="hljs-title function_">open</span>(<span class="hljs-variable constant_">CACHE_NAME</span>).<span class="hljs-title function_">then</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">cache</span>) &#123;<br>                        cache.<span class="hljs-title function_">put</span>(newRequest, response.<span class="hljs-title function_">clone</span>());<br>                        <span class="hljs-keyword">return</span> response;<br>                    &#125;);<br>                &#125;)<br>                .<span class="hljs-title function_">catch</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) &#123;<br>                    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(error);<br>                    <span class="hljs-keyword">return</span> <span class="hljs-title function_">fetch</span>(event.<span class="hljs-property">request</span>);<br>                &#125;)<br>        );<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自托管 E-mail ，宝宝喜欢妈妈爱</title>
    <link href="/posts/3b90dbec/"/>
    <url>/posts/3b90dbec/</url>
    
    <content type="html"><![CDATA[<p>本来一直在用阿里云的企业邮箱，但感觉总是不太好，主要每次都需要进<code>https://qiye.aliyun.com</code>登录。于是趁着黑色星期五<a href="https://racknerd.com/">RackNerd</a>的优惠，搞了一台vps来搭电子邮局（如果你想搭建，请确认服务器是否支持rDNS以及是否开启25端口）。</p><span id="more"></span><p>配置如下（年付$10.28）</p><table><thead><tr><th style="text-align:center">硬件</th><th style="text-align:center">配置</th></tr></thead><tbody><tr><td style="text-align:center">CPU</td><td style="text-align:center">1核</td></tr><tr><td style="text-align:center">RAM</td><td style="text-align:center">768MB</td></tr><tr><td style="text-align:center">SSD</td><td style="text-align:center">10GB</td></tr><tr><td style="text-align:center">流量</td><td style="text-align:center">1TB</td></tr></tbody></table><p>还是比较磕碜的，不过价格在这，无所谓了。</p><h2 id="经历"><a class="markdownIt-Anchor" href="#经历"></a> 经历</h2><p>首先，我需要为vps开通rDNS记录到<code>mx.ordchaos.com</code>上。后台可以自主设置，很方便…</p><p><img src="https://img.ordchaos.com/img/2022/11/319d4fa4d25c91e5fd4872d6004fac01.png" alt="bang!" /></p><p>好，很好，我沉得住气。发个工单问一下：</p><p><img src="https://img.ordchaos.com/img/2022/11/497f1f27397c268b35dcccd1fd6c274c.png" alt="工单截图" /></p><p>哦！原来如此！好的，继续交流后，rDNS设置成功，但然而我却发现无法访问？！一番探查之后，发现这样一个事实——被墙啦！</p><p>于是只得继续发工单：</p><p><img src="https://img.ordchaos.com/img/2022/11/132fdf9f0fb03dbdd0298117cc331d30.png" alt="" /></p><p>终于搞定。</p><h2 id="mailuio部署"><a class="markdownIt-Anchor" href="#mailuio部署"></a> Mailu.io部署</h2><h3 id="设置主机名"><a class="markdownIt-Anchor" href="#设置主机名"></a> 设置主机名</h3><p>在vps的bash中输入：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">nano /etc/hosts<br></code></pre></td></tr></table></figure><p>在其中具有服务器ip地址的一行中，将后面的内容改为（假设你的域名是<code>example.com</code>，服务器ip是<code>88.88.88.88</code>）：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">88.88.88.88    mx.example.com   mx<br></code></pre></td></tr></table></figure><p>编辑好后，在vps中执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">echo &quot;mx&quot; &gt; /etc/hostname<br>hostname -F /etc/hostname<br></code></pre></td></tr></table></figure><p>这样就设置好了主机名，可以通过<code>hostname</code>命令确认是否设置成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">hostname<br>hostname -f<br></code></pre></td></tr></table></figure><p>前者只会输出<code>mx</code>，后者则会输出<code>mx.example.com</code>。如果不是，那就是设置错了。</p><h3 id="设置dns解析"><a class="markdownIt-Anchor" href="#设置dns解析"></a> 设置DNS解析</h3><p>去你的域名DNS解析服务商，设置以下DNS解析（假设你的域名是<code>example.com</code>，服务器ip是<code>88.88.88.88</code>）：</p><table><thead><tr><th style="text-align:center">主机名</th><th style="text-align:center">解析类型</th><th style="text-align:center">内容</th></tr></thead><tbody><tr><td style="text-align:center">@</td><td style="text-align:center">A</td><td style="text-align:center">（如果已有解析就不管，没有就解析到127.0.0.1，注意不能有CNAME记录）</td></tr><tr><td style="text-align:center">mx</td><td style="text-align:center">A</td><td style="text-align:center">88.88.88.88</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">MX</td><td style="text-align:center"><a href="http://mx.example.com">mx.example.com</a>（优先级为10）</td></tr><tr><td style="text-align:center">@</td><td style="text-align:center">TXT</td><td style="text-align:center">v=spf1 mx a:mx.example.com ~all</td></tr><tr><td style="text-align:center">_dmarc</td><td style="text-align:center">TXT</td><td style="text-align:center">v=DMARC1; p=reject; <a href="mailto:rua=mailto:admin@example.com">rua=mailto:admin@example.com</a>; <a href="mailto:ruf=mailto:admin@example.com">ruf=mailto:admin@example.com</a>; adkim=s; aspf=s</td></tr><tr><td style="text-align:center"><a href="http://example.com">example.com</a>._report._dmarc</td><td style="text-align:center">TXT</td><td style="text-align:center">v=DMARC1</td></tr></tbody></table><p>然后去vps服务商，设置rDNS（或者叫做PTR）解析，将<code>88.88.88.88</code>解析到<code>mx.example.com</code></p><h3 id="获取配置"><a class="markdownIt-Anchor" href="#获取配置"></a> 获取配置</h3><p>访问Mailu.io的配置生成网页：<a href="https://setup.mailu.io/">https://setup.mailu.io</a></p><p><img src="https://img.ordchaos.com/img/2022/11/f467bf5ab91b12fdef1b84d6e2239b05.png" alt="" /></p><p>写文时最新版本为1.9，保持不变。下方部署方式选择Compose.</p><p><img src="https://img.ordchaos.com/img/2022/11/fb64a5b8475dd80944f74acbd558a224.png" alt="" /></p><ul><li><p>1：在此处填写自己的域名</p></li><li><p>2：自己起个名字（如“序炁的电子邮局”）</p></li><li><p>3：若你的域名为<code>example.com</code>，则在此处填写<code>https://mx.example.com</code></p></li><li><p>4：点击勾选</p></li></ul><p><img src="https://img.ordchaos.com/img/2022/11/85105d9d486d31bb37aa25f69ef7376d.png" alt="" /></p><ul><li><p>1：推荐选择rainloop，更加现代好看</p></li><li><p>2：填写自己vps的ip地址</p></li><li><p>3：若你的域名为<code>example.com</code>，则在此处填写<code>mx.example.com</code></p></li></ul><p>最后，你会看到如下界面：</p><p><img src="https://img.ordchaos.com/img/2022/11/decae2b8f721e07d24f8c7ef1b7ea38c.png" alt="" /></p><p>照着界面的指示，回到vps执行指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">mkdir /mailu<br>cd /mailu<br></code></pre></td></tr></table></figure><p>然后回到刚刚的页面，下载配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">wget http://setup.mailu.io/1.7/file/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/docker-compose.yml<br>wget http://setup.mailu.io/1.7/file/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx/mailu.env<br></code></pre></td></tr></table></figure><p>最后执行（假设你的域名是<code>example.com</code>，密码设置为<code>PASSWORD</code>）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker-compose -p mailu up -d<br>docker-compose -p mailu exec admin flask mailu admin admin example.com PASSWORD<br></code></pre></td></tr></table></figure><p>就安装完成了。</p><h3 id="配置"><a class="markdownIt-Anchor" href="#配置"></a> 配置</h3><p>在浏览器中访问<code>https://mx.example.com</code>登录您的管理员面板:</p><p><img src="https://img.ordchaos.com/img/2022/11/bb36706e2cf80fc26e6f1baa7bac5636.png" alt="管理员面板" /></p><p>使用账号<code>admin@example.com</code>和密码<code>PASSWORD</code>登录即可（假设你的域名是<code>example.com</code>，密码设置为<code>PASSWORD</code>）。</p><p>然后点击左侧的“邮件域”：</p><p><img src="https://img.ordchaos.com/img/2022/11/0dbf970ce24ab1f18381955949ff2acf.png" alt="" /></p><p>然后点击如下的按钮：</p><p><img src="https://img.ordchaos.com/img/2022/11/ff977f14b7bc7c6775de3dcd3a0538f9.png" alt="" /></p><p>在新界面中点击“生成密钥”，然后复制dkim配置：</p><figure class="highlight txt"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs txt">dkim._domainkey.example.com. 600 IN TXT &quot;v=DKIM1; k=rsa; p=xxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot; &quot;xxxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;<br></code></pre></td></tr></table></figure><p>进行域名解析即可。</p><h3 id="创建账号"><a class="markdownIt-Anchor" href="#创建账号"></a> 创建账号</h3><p>邮件域&gt;用户&gt;添加用户，按需配置即可。</p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><p>退出管理员账号，访问<code>https://mx.example.com/webmail</code>，登录即可（选择“登录Webmail”）。</p><p><img src="https://img.ordchaos.com/img/2022/11/bbd43555ba6226a01d53b697174f8742.png" alt="主页面" /></p><h2 id="测试"><a class="markdownIt-Anchor" href="#测试"></a> 测试</h2><p>在<a href="https://www.mail-tester.com/">MailTester</a>上可以进行测试，如下是我测试结果：</p><p><img src="https://img.ordchaos.com/img/2022/11/84baf936fcbe9b4663cabce5a51252e0.png" alt="" /></p><p>很完美了，对吧（</p><p><span class="heimu" title="你知道的太多了">以前没有超过8过</span></p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>完成了很久以前的夙愿。</p><p>欢迎跟着做一遍哦！也欢迎提问！</p><h2 id="2024212-更新"><a class="markdownIt-Anchor" href="#2024212-更新"></a> 2024.2.12 更新</h2><p>用一段时间后服务器会出现403，此时重启docker即可。</p><p>有关于自动重启，参考这篇文章：<a href="https://www.ordchaos.com/posts/e9c784c5/">使用Github Action定时重启邮件服务</a></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>电子邮件</tag>
      
      <tag>vps</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>船新说说页面—— Memos 初体验</title>
    <link href="/posts/3386e07f/"/>
    <url>/posts/3386e07f/</url>
    
    <content type="html"><![CDATA[<p>博客的说说真的是一波三折…</p><span id="more"></span><p>最开始用的是<a href="https://hexoplusplus.js.org">HexoPlusPlus</a>的说说，很好用也很流畅小巧，但是自Hpp停止开发后就用不了了。</p><p>然后改用了<a href="https://immmmm.com/bb-by-wechat-pro/">bber</a>，也很不错，但是<span class="heimu" title="你知道的太多了">辣鸡</span>腾讯云也是离谱，好好的羊毛突然就不让薅了，<span class="heimu" title="你知道的太多了">同时我的twikoo也被迫迁移到了vercel，</span>只得抛弃。</p><p>中途也用过别的说说系统，比如说大名鼎鼎的<a href="https://artitalk.js.org/">Artitalk</a>亦或者是<a href="https://github.com/kkfive/iSpeak/">iSpeak</a>等等，但是都不太满意，而后因为各式各样的原因放弃。</p><p>本来我会一直被这玩意困扰…现在不会了！只因为我发现了它——<a href="https://usememos.com/">Memos</a></p><p>开源，私有部署，这不就是我要的完美的说说系统吗？！</p><h2 id="后端部署"><a class="markdownIt-Anchor" href="#后端部署"></a> 后端部署</h2><p>很简单，首先你要有一台vps，然后装上docker.</p><p>随后一句指令即可搞定：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d --name memos -p 5230:5230 -v $&#123;PWD&#125;/.memos/:/var/opt/memos neosmemo/memos:latest<br></code></pre></td></tr></table></figure><p>随后Memos就会被部署到5230端口，觉得不方便也可以反向代理，这个教程有很多，这里就不写了。</p><h2 id="前端"><a class="markdownIt-Anchor" href="#前端"></a> 前端</h2><h3 id="单页"><a class="markdownIt-Anchor" href="#单页"></a> 单页</h3><p>可以看看我的：<a href="https://www.ordchaos.com/talk/">说说</a></p><p>样式完全是自己写的…你知道对一位学C++的初三学生而言css是什么东西吗？！<span class="heimu" title="你知道的太多了">好吧随便写写也不算难</span></p><p>js来自<a href="https://immmmm.com/">immmmm</a>，稍微改了一点点，可以在<a href="https://www.ordchaos.com/js/talk.js">这里</a>看看<span class="heimu" title="你知道的太多了">被压缩了根本看不了</span>。</p><p>总体而言，如果你也想要部署一个和我完全一样的页面，可以用以下html代码：（记得下载js文件）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;memo-nums&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;note note-info memo-nums-text&#x27;</span>&gt;</span><br>    共有 <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;memonums&#x27;</span>&gt;</span>「数待载之」<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span> 条说说<br>  <span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;bber&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> bbMemos = &#123;</span><br><span class="language-javascript">    memos : <span class="hljs-string">&#x27;https://memos.ordchaos.top/&#x27;</span>,<span class="hljs-comment">//修改为自己部署Memos的网址，末尾有斜杠</span></span><br><span class="language-javascript">    limit : <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">//默认每次显示10条 </span></span><br><span class="language-javascript">    <span class="hljs-attr">creatorId</span>:<span class="hljs-string">&#x27;1&#x27;</span> ,<span class="hljs-comment">//默认为101用户</span></span><br><span class="language-javascript">    <span class="hljs-attr">domId</span>: <span class="hljs-string">&#x27;&#x27;</span>,<span class="hljs-comment">//默认为bber类</span></span><br><span class="language-javascript">  &#125;</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;//jsd.ordchaos.top/marked/marked.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/talk.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>注意这里用了Tag插件，如果用不了记得改改。</p><h3 id="首页轮播"><a class="markdownIt-Anchor" href="#首页轮播"></a> 首页轮播</h3><p>这个就比较简单了，直接在主题的<code>index.ejs</code>里加上以下代码即可：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">p</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&#x27;note note-info memo-nums-text&#x27;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;iconfont icon-speakernotes&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;memos-index-space&quot;</span>&gt;</span> <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&#x27;memos-t&#x27;</span>&gt;</span>首页说说轮播加载中...<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;/js/lately.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-keyword">let</span> jsonUrl =</span><br><span class="language-javascript">      <span class="hljs-string">&quot;https://memos.ordchaos.top/api/memo?creatorId=1&amp;rowStatus=NORMAL&quot;</span> +</span><br><span class="language-javascript">      <span class="hljs-string">&quot;&amp;t=&quot;</span> +</span><br><span class="language-javascript">      <span class="hljs-title class_">Date</span>.<span class="hljs-title function_">parse</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>());</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-title function_">fetch</span>(jsonUrl)</span><br><span class="language-javascript">      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">res</span>) =&gt;</span> res.<span class="hljs-title function_">json</span>())</span><br><span class="language-javascript">      .<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params">resdata</span>) =&gt;</span> &#123;</span><br><span class="language-javascript">              data = resdata.<span class="hljs-property">data</span>,</span><br><span class="language-javascript">              resultIndexMemos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Array</span>(data.<span class="hljs-property">length</span>);</span><br><span class="language-javascript">          <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; data.<span class="hljs-property">length</span>; i++) &#123;</span><br><span class="language-javascript">              <span class="hljs-keyword">var</span> talkTime = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>(</span><br><span class="language-javascript">                  data[i].<span class="hljs-property">createdTs</span> * <span class="hljs-number">1000</span></span><br><span class="language-javascript">              ).<span class="hljs-title function_">toLocaleString</span>();</span><br><span class="language-javascript">              <span class="hljs-keyword">var</span> talkContent = data[i].<span class="hljs-property">content</span>;</span><br><span class="language-javascript">              <span class="hljs-keyword">var</span> newtalkContent = talkContent</span><br><span class="language-javascript">                  .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/```([\s\S]*?)```[\s]*/g</span>, <span class="hljs-string">&quot; &lt;code&gt;$1&lt;/code&gt; &quot;</span>) <span class="hljs-comment">//全局匹配代码块</span></span><br><span class="language-javascript">                  .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/`([\s\S ]*?)`[\s]*/g</span>, <span class="hljs-string">&quot; &lt;code&gt;$1&lt;/code&gt; &quot;</span>) <span class="hljs-comment">//全局匹配内联代码块</span></span><br><span class="language-javascript">                  .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/&lt;iframe([\s\S ]*?)iframe&gt;[\s]*/g</span>, <span class="hljs-string">&quot;📺&quot;</span>) <span class="hljs-comment">//全局匹配视频</span></span><br><span class="language-javascript">                  .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\!\[[\s\S]*?\]\([\s\S]*?\)/g</span>, <span class="hljs-string">&quot;🌅&quot;</span>) <span class="hljs-comment">//全局匹配图片</span></span><br><span class="language-javascript">                  .<span class="hljs-title function_">replace</span>(<span class="hljs-regexp">/\[[\s\S]*?\]\([\s\S]*?\)/g</span>, <span class="hljs-string">&quot;🔗&quot;</span>) <span class="hljs-comment">//全局匹配连接</span></span><br><span class="language-javascript">                  .<span class="hljs-title function_">replace</span>(</span><br><span class="language-javascript">                      <span class="hljs-regexp">/\bhttps?:\/\/(?!\S+(?:jpe?g|png|bmp|gif|webp|jfif|gif))\S+/g</span>,</span><br><span class="language-javascript">                      <span class="hljs-string">&quot;🔗&quot;</span></span><br><span class="language-javascript">                  ); <span class="hljs-comment">//全局匹配纯文本连接</span></span><br><span class="language-javascript">              <span class="hljs-keyword">if</span>(newtalkContent.<span class="hljs-property">length</span> &gt; <span class="hljs-number">25</span>) &#123;</span><br><span class="language-javascript">                  newtalkContent = newtalkContent.<span class="hljs-title function_">substring</span>(<span class="hljs-number">0</span>, <span class="hljs-number">25</span>) + <span class="hljs-string">&#x27;...&#x27;</span>;</span><br><span class="language-javascript">              &#125;</span><br><span class="language-javascript">              resultIndexMemos[i] = <span class="hljs-string">`&lt;span class=&quot;datetime&quot;&gt;<span class="hljs-subst">$&#123;talkTime&#125;</span>&lt;/span&gt;： &lt;a href=&quot;https://www.ordchaos.com/talk/&quot;&gt;<span class="hljs-subst">$&#123;newtalkContent&#125;</span>&lt;/a&gt;`</span>;</span><br><span class="language-javascript">          &#125;</span><br><span class="language-javascript">      &#125;);</span><br><span class="language-javascript"></span><br><span class="language-javascript">  <span class="hljs-comment">// 滚动效果</span></span><br><span class="language-javascript">  <span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">  <span class="hljs-built_in">setInterval</span>(<span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;memos-t&quot;</span>).<span class="hljs-property">innerHTML</span> = resultIndexMemos[i];</span><br><span class="language-javascript">      <span class="hljs-variable language_">window</span>.<span class="hljs-property">Lately</span> &amp;&amp; <span class="hljs-title class_">Lately</span>.<span class="hljs-title function_">init</span>(&#123; <span class="hljs-attr">target</span>: <span class="hljs-string">&quot;.datetime&quot;</span> &#125;);</span><br><span class="language-javascript">      i++;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span>(i == resultIndexMemos.<span class="hljs-property">length</span>) i = <span class="hljs-number">0</span>;</span><br><span class="language-javascript">  &#125;, <span class="hljs-number">3000</span>);</span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p>Tag仍然是不能用就记得改。代码来自<a href="https://eallion.com/">eallion</a>，仍然是改了一下<span class="heimu" title="你知道的太多了">原本的逻辑怎么看怎么怪</span><span class="heimu" title="你知道的太多了">好吧也可能是我没看懂——总而言之，无意冒犯</span>。</p><p>javascript总算是好些那么一点点，起码与c++还有那么一点像，外加上自己写GDScript的经验，稍稍改点也不算难事<span class="heimu" title="你知道的太多了">改了一小时</span></p><h2 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h2><p><span class="heimu" title="你知道的太多了">自己去看看不行吗，动动手指的事</span></p><p><img src="https://img.ordchaos.com/img/2022/11/4ace9417edf03d7d6b4bd95620f27f55.png" alt="说说页面" /></p><p><img src="https://img.ordchaos.com/img/2022/11/598e03e4a296da3866f9c4404977e5fa.png" alt="首页轮播" /></p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>前前后后搞了半个月了，终于是在学习的闲暇时间整完，中途也是收获良多。</p><p>那就这样，886！</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>javascript</tag>
      
      <tag>css</tag>
      
      <tag>memos</tag>
      
      <tag>html</tag>
      
      <tag>说说</tag>
      
      <tag>前端</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Picgo ，我 ...... 我 ......</title>
    <link href="/posts/28b74a2d/"/>
    <url>/posts/28b74a2d/</url>
    
    <content type="html"><![CDATA[<p>如题，我要被这个神仙软件气死了。</p><span id="more"></span><h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>准备装unity写个游戏，学一学C#，然后就发现C盘爆满飘红。用SpaceSniffer看了一下——好家伙！</p><p>Picgo的日志文件，占了我58.6GB.</p><h2 id="解释"><a class="markdownIt-Anchor" href="#解释"></a> 解释</h2><p>当Picgo上传图片失败时就会开始疯狂写日志，然后文件大小就爆炸。</p><h2 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h2><p>删掉日志，从组策略里设置一下日志文件大小限制就好了。</p><p>可以参考这个：<a href="https://jingyan.baidu.com/article/4d58d5413ed1bedcd5e9c010.html">如何在Windows10系统设置日志文件的最大大小</a></p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>就离谱！！！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>Picgo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——堆</title>
    <link href="/posts/fab451a5/"/>
    <url>/posts/fab451a5/</url>
    
    <content type="html"><![CDATA[<p>马上就是今年的CSP-J了，一想起自己还有那么多数据结构没学就有点头皮发麻…这篇博文里我就来讲一下堆(Heap)，一是方便他人，二是给自己巩固思路。</p><span id="more"></span><h2 id="讲解"><a class="markdownIt-Anchor" href="#讲解"></a> 讲解</h2><p>按照惯例<span class="heimu" title="你知道的太多了">哪里来的惯例</span>，还是看一下堆是什么东西：</p><blockquote><p>堆（heap）是计算机科学中一类特殊的数据结构的统称。堆通常是一个可以被看做一棵树的数组对象。堆总是满足下列性质：</p><ul><li>堆中某个结点的值总是不大于或不小于其父结点的值；</li><li>堆总是一棵完全二叉树。</li></ul><p>将根结点最大的堆叫做最大堆或大根堆，根结点最小的堆叫做最小堆或小根堆。</p><p>——百度百科 <a href="https://baike.baidu.com/item/%E5%A0%86/20606834">堆</a></p></blockquote><p>很显然，为了储存堆，我们需要一棵完全二叉树。这里很多人就会想到建树，但其实不用。如果你看过我的<a href="https://www.ordchaos.com/posts/340b325e/">学习笔记——二叉树</a>的话，应该会记得完全二叉树的性质之一：</p><blockquote><p>在有n个节点的完全二叉树中，对于编号为i的节点：</p><ul><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则其无父节点，为根节点，否则其父节点编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mrow><mo fence="true">(</mo><mfrac><mi>i</mi><mn>2</mn></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">floor\left( \frac{i}{2} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.205674em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.855664em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>。</li><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，则i为叶节点，否则其左孩子的编号为2i。</li><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>&lt;</mo><mi>n</mi><mo>&lt;</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2i&lt;n&lt;2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则i无右孩子，否则其右孩子的编号为2i+1。</li></ul><p>——序炁 <a href="https://www.ordchaos.com/posts/340b325e/">学习笔记——二叉树</a></p></blockquote><p>所以我们只需要一个数组就可以存储堆了：数组最开始填入根节点，其左右孩子节点便依次为其后面的两个下标，再往后就以此类推。</p><p>那么现在建立一个数据结构用来建堆，很简单，参照下列代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100000</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myHeap</span> &#123;<br>  <span class="hljs-type">int</span> value[MAXSIZE];<br>  <span class="hljs-type">int</span> length;<br>&#125;;<br></code></pre></td></tr></table></figure><p>对于每一个堆都申请一个MAXSIZE大小的数组用于存储，而后用length变量存储目前的总节点数即可。</p><p>那么如何初始化就显而易见，只需要</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(myHeap &amp;heap)</span> </span>&#123;<br>    heap.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>像这样将length设为0就大功告成。</p><h3 id="插入元素"><a class="markdownIt-Anchor" href="#插入元素"></a> 插入元素</h3><p>如果要往一个堆里插入元素，那我们就要先确定这个堆是小根堆还是大根堆，下面的所有代码均默认是小根堆，大根堆<s>自己改去</s>自己想想吧。</p><p>首先，在堆末尾加入要插入的元素：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(myHeap &amp;heap, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    heap.value[heap.length++] = v;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>length永远指向数组中最后一个存储了数据的位置的下一个位置，所以在<code>value[length]</code>的位置存储数据，然后增加length即可。</p><p>但现在这个堆可能不满足小根堆的性质了，怎么办呢？很简单，进行调整即可。将新节点设为当前节点，如果它大于父节点则结束，若小于则交换，而后将交换后的父节点（没错，还是新插入的数据）设为当前节点，重复这个过程直到其大于父节点或其为根节点则结束。</p><p>听着有些复杂，但用while循环即可轻松实现：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(myHeap &amp;heap, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-type">int</span> now = length;<br>    <span class="hljs-keyword">while</span>(heap.value[now - <span class="hljs-number">1</span>] &lt; heap.value[now / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>] &amp;&amp; now != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">swap</span>(heap.value[now - <span class="hljs-number">1</span>], heap.value[now / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>]);<br>        now /= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>完事！</p><h3 id="删除元素"><a class="markdownIt-Anchor" href="#删除元素"></a> 删除元素</h3><p>删除元素即出队，会弹出根节点。故而这里的方法是把最后一个节点移到根节点的位置覆盖掉它，再进行调整。</p><p>覆盖很简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(myHeap &amp;heap)</span> </span>&#123;<br>    heap.value[<span class="hljs-number">0</span>] = heap.value[--heap.length];<br><span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>不要忘记将节点数减一即可。这里用了一个小技巧，本来要写成这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">heap.value[<span class="hljs-number">0</span>] = heap.value[heap.length - <span class="hljs-number">1</span>];<br>heap.length--;<br></code></pre></td></tr></table></figure><p>竞赛常考之一，<code>++i</code>与<code>i++</code>的区别。不要觉得没用，比如用在这里就非常合适。包括前面的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp">heap.value[heap.length++] = v;<br></code></pre></td></tr></table></figure><p>也用了这个方法。</p><p>好了，言归正传，下一步是调整节点。显然，这一次需要从上往下调整：将根节点设为当前节点，与自己左右孩子中较小的一个比较，若小于则结束，否则与其交换位置并将当前节点设为交换好的孩子节点（一样指向同样的数据），重复这个过程直到当前节点为叶节点或当前节点小于自己任何一个孩子为止。</p><p>同样，上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(myHeap &amp;heap)</span> </span>&#123;<br>    <span class="hljs-comment">//...</span><br>    <span class="hljs-type">int</span> now = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">2</span> * now &lt;= heap.length) &#123;<br>        <span class="hljs-type">int</span> temp = <span class="hljs-number">2</span> * now - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(temp + <span class="hljs-number">2</span> &lt;= heap.length &amp;&amp; heap.value[temp] &gt; heap.value[temp + <span class="hljs-number">1</span>]) temp++;<br>        <span class="hljs-keyword">if</span>(heap.value[now - <span class="hljs-number">1</span>] &gt; heap.value[temp]) <span class="hljs-built_in">swap</span>(heap.value[now - <span class="hljs-number">1</span>], heap.value[temp]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        now = temp + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>需要额外注意的是对当前节点是否为叶节点以及是否拥有右孩子的判断，避免因失误导致数据溢出。</p><h2 id="应用"><a class="markdownIt-Anchor" href="#应用"></a> 应用</h2><p>其实堆的操作也只有插入与删除，不过就是这么简单的东西也可以玩出不同的花样，下面是两个例子。</p><h3 id="洛谷-p1090-noip2004-提高组-合并果子"><a class="markdownIt-Anchor" href="#洛谷-p1090-noip2004-提高组-合并果子"></a> 洛谷 P1090 NOIP2004 提高组 合并果子</h3><p>原题链接：<a href="https://www.luogu.com.cn/problem/P1090">洛谷 P1090 NOIP2004 提高组 合并果子</a></p><h4 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h4><p>在一个果园里，多多已经将所有的果子打了下来，而且按果子的不同种类分成了不同的堆。多多决定把所有的果子合成一堆。</p><p>每一次合并，多多可以把两堆果子合并到一起，消耗的体力等于两堆果子的重量之和。可以看出，所有的果子经过n-1次合并之后，就只剩下一堆了。多多在合并果子时总共消耗的体力等于每次合并所耗体力之和。</p><p>因为还要花大力气把这些果子搬回家，所以多多在合并果子时要尽可能地节省体力。假定每个果子重量都为1，并且已知果子的种类 数和每种果子的数目，你的任务是设计出合并的次序方案，使多多耗费的体力最少，并输出这个最小的体力耗费值。</p><p>例如有3种果子，数目依次为1，2，9. 可以先将1、2堆合并，新堆数目为3，耗费体力为3. 接着，将新堆与原先的第三堆合并，又得到新的堆，数目为12，耗费体力为12。所以多多总共耗费体力为3+12=15。可以证明15为最小的体力耗费值。</p><h4 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h4><p>共两行。</p><p>第一行是一个整数n(1≤n≤10000)，表示果子的种类数。</p><p>第二行包含n个整数，用空格分隔，第i个整数a<sub>i</sub>(1≤a<sub>i</sub>≤20000)是第i种果子的数目。</p><h4 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h4><p>一个整数，也就是最小的体力耗费值。输入数据保证这个值小于2<sup>31</sup>.</p><h4 id="输入输出样例"><a class="markdownIt-Anchor" href="#输入输出样例"></a> 输入输出样例</h4><p>输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">3<br>1 2 9<br></code></pre></td></tr></table></figure><p>输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">15<br></code></pre></td></tr></table></figure><h4 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h4><p>简单的贪心算法，每次从所有果子中取两堆数量最小的合并，然后放回去即可。</p><p>不一定非要用堆，不过如果只是简单的排序的话会超时。不过你同样也可以用优先队列，或者看看洛谷上那些神犇的题解。</p><p>我的方法很简单，只需要建堆，然后从堆中取两个最小值（即小根堆堆顶元素）相加再插回去，直到只剩一个元素即可。其中每一次合并时用一个变量累计总体力，最后输出就行了。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100000</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myHeap</span> &#123;<br>    <span class="hljs-type">int</span> value[MAXSIZE];<br>    <span class="hljs-type">int</span> length;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(myHeap &amp;heap, <span class="hljs-type">int</span> v)</span> </span>&#123;<br>    heap.value[heap.length++] = v;<br>    <span class="hljs-type">int</span> now = heap.length;<br>    <span class="hljs-keyword">while</span>(heap.value[now - <span class="hljs-number">1</span>] &lt; heap.value[now / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>] &amp;&amp; now != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-built_in">swap</span>(heap.value[now - <span class="hljs-number">1</span>], heap.value[now / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>]);<br>        now /= <span class="hljs-number">2</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(myHeap &amp;heap)</span> </span>&#123;<br>    heap.value[<span class="hljs-number">0</span>] = heap.value[--heap.length];<br>    <span class="hljs-type">int</span> now = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-number">2</span> * now &lt;= heap.length) &#123;<br>        <span class="hljs-type">int</span> temp = <span class="hljs-number">2</span> * now - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(temp + <span class="hljs-number">2</span> &lt;= heap.length &amp;&amp; heap.value[temp] &gt; heap.value[temp + <span class="hljs-number">1</span>]) temp++;<br>        <span class="hljs-keyword">if</span>(heap.value[now - <span class="hljs-number">1</span>] &gt; heap.value[temp]) <span class="hljs-built_in">swap</span>(heap.value[now - <span class="hljs-number">1</span>], heap.value[temp]);<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>        now = temp + <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-type">int</span> <span class="hljs-title">get</span><span class="hljs-params">(myHeap heap)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> heap.value[<span class="hljs-number">0</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getPop</span><span class="hljs-params">(myHeap &amp;heap)</span> </span>&#123;<br>    <span class="hljs-type">int</span> temp = <span class="hljs-built_in">get</span>(heap);<br>    <span class="hljs-built_in">pop</span>(heap);<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> temp;<br>    myHeap test;<br>    test.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        cin&gt;&gt;temp;<br>        <span class="hljs-built_in">push</span>(test, temp);<br>    &#125;<br>    <span class="hljs-type">int</span> power = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(test.length != <span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-type">int</span> quick[<span class="hljs-number">2</span>] = &#123;<span class="hljs-built_in">getPop</span>(test), <span class="hljs-built_in">getPop</span>(test)&#125;;<br>        power += quick[<span class="hljs-number">0</span>] + quick[<span class="hljs-number">1</span>];<br>        <span class="hljs-built_in">push</span>(test, quick[<span class="hljs-number">0</span>] + quick[<span class="hljs-number">1</span>]);<br>    &#125;<br>    cout&lt;&lt;power&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>其中<code>get</code>函数用于返回堆顶元素，不要也可以，毕竟很简单。</p><p>对于这一题是可以AC的，没有问题。</p><h3 id="堆排序"><a class="markdownIt-Anchor" href="#堆排序"></a> 堆排序</h3><p>既然小根堆的堆顶元素永远最小，那么只要每次都取出堆顶元素直到堆为空不就可以排序了吗？没错，这就是堆排序，时间复杂度为O(nlogn)，十分优秀。</p><p>代码我就不讲了，自己看吧：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//...</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> temp;<br>    myHeap test;<br>    test.length = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        cin&gt;&gt;temp;<br>        <span class="hljs-built_in">push</span>(test, temp);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) cout&lt;&lt;<span class="hljs-built_in">getPop</span>(test)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    cout&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>数据量大的时候可以考虑堆排序，因为堆排序的耗时主要在建堆上，建好堆后的调整实际上非常快。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>终于写完了…写了我整整三小时啊！</p><p>明天大概也许会有一篇关于图的，以及一篇关于类的。</p><p>886！</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在线写作与博文分享—— NetlifyCMS 与 ShareThis</title>
    <link href="/posts/8e1b39a3/"/>
    <url>/posts/8e1b39a3/</url>
    
    <content type="html"><![CDATA[<p>没错，任何正常人都不会把标题里这两样东西联系起来，包括我。</p><span id="more"></span><h2 id="netlifycms"><a class="markdownIt-Anchor" href="#netlifycms"></a> NetlifyCMS</h2><p>最开始看到这玩意是在fluid的官方博客的这一篇博文<a href="https://hexo.fluid-dev.com/posts/hexo-netlify/">Hexo Netlify CMS 在线编辑博客</a>（转载的，原文地址在<a href="https://www.myql.xyz/post/e00ab0f6/">这里</a>），当时就觉得非常不错，但可惜未能按照教程配置成功，只得转投于更贴合于Hexo的HexoPlusPlus<span class="heimu" title="你知道的太多了">Hexo艹</span></p><p>直到<s>前几天</s>上个月看到 @Xingyang 在<a href="https://www.ordchaos.com/posts/10824f12/">一键推流工具——BlogPusher</a>这一篇文章下的<a href="https://www.ordchaos.com/posts/10824f12/#7c90660dd62143d2bd9db227ab9db8a6">评论</a>：</p><blockquote><p>如果静态博客是部署在 Github 上的话可以试试用 Netlify CMS。相当于架设一个能进行 Git Commit 的 Web app，最重要的就是 0 花费，Private Repo 也可以用。我自己的博客也在用（虽然文章数不是很多()）</p><p>参考文章：<a href="https://cnly.github.io/2018/04/14/just-3-steps-adding-netlify-cms-to-existing-github-pages-site-within-10-minutes.html">https://cnly.github.io/2018/04/14/just-3-steps-adding-netlify-cms-to-existing-github-pages-site-within-10-minutes.html</a></p></blockquote><p>很好，但是不太符合我的情况。于是随即翻了翻——</p><p><img src="https://img.ordchaos.com/img/2022/09/c9dcce95c9ac5cc0b374d8f6f30977ee.png" alt="" /></p><p>瞳 孔 地 震.jpg</p><p>完全可用！撒花！</p><p>如果你也没有成功配置Netlify CMS的话也可以试试，教程十分甚至九分简单，个人感觉几乎不存在出错的可能性。</p><p>感谢@Xingyang！</p><h2 id="sharethis-2024213更新-已失效"><a class="markdownIt-Anchor" href="#sharethis-2024213更新-已失效"></a> ShareThis (2024.2.13更新 已失效)</h2><p>最开始捣鼓了一阵子分享系统，share.js啊，Social Share Button啊等等都尝试过一遍，但我都不太满意，况且分享也不是刚需，于是就此作罢。</p><p>直到昨天，我妈问我：“你这个博客怎么分享给别人看啊？”</p><p>我突然感觉分享还是有必要的，遂继续开始寻觅，然后就发现了<a href="https://sharethis.com/">ShareThis</a></p><h3 id="注册"><a class="markdownIt-Anchor" href="#注册"></a> 注册</h3><p>非常简单，进入首页：<a href="https://sharethis.com">https://sharethis.com</a></p><p><img src="https://img.ordchaos.com/img/2022/09/d4c3d172f93f30f67583d155923d9356.png" alt="" /></p><p>点击“从分享按钮开始”，然后点击第一个选项：</p><p><img src="https://img.ordchaos.com/img/2022/09/4b1cd38081ce95ec0d3f91679e4fbcc0.png" alt="" /></p><p>不要急着点击下一步，先用滚轮滚动到页面下方，点击“Customize your Inline Share Buttons”按钮。</p><p>在弹出的选项中对按钮进行配置，可以配置包括颜色、媒体、形状等等内容。</p><p><img src="https://img.ordchaos.com/img/2022/09/4f24034eb100769f87e8264232d51d65.png" alt="" /></p><p>最下方的语言记得调整为中文，然后点击下一步，在新页面中注册登录即可。</p><p>随后，你会得到两串代码，分别是js安装代码与按钮引入代码。安装代码放在head中，按钮放在你想插入的地方就好。</p><p>大概如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 安装 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&#x27;text/javascript&#x27;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;https://platform-api.sharethis.com/js/sharethis.js#property=不告诉你&amp;product=inline-share-buttons&#x27;</span> <span class="hljs-attr">async</span>=<span class="hljs-string">&#x27;async&#x27;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 按钮插入 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;sharethis-inline-share-buttons&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="效果"><a class="markdownIt-Anchor" href="#效果"></a> 效果</h3><p>滑到这篇文章底下看吧。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>这篇博文算是对近期我对博客的大改动，但是单独发太短，所以就这么整合在一起了。</p><p>那就这样，这篇博文就到这里，886！</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>教程</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>满十四，进十五。愿我青春无悔，不负韶华</title>
    <link href="/posts/e84bad58/"/>
    <url>/posts/e84bad58/</url>
    
    <content type="html"><![CDATA[<p>又大了一岁呢…</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/da8138b304fd8dba9eb05ba164be31d0.png" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/b760f4236a451e9d1c3647c2980c05b1.png" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/a99983480ddc5f853f9ab163950badb4.png" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/c6d48548ba4fc1549c53856aabaaf0f1.png" alt="" /></div></div></div><p>令青春无悔，愿韶华不负！</p><p>希望明年的此刻，我能够无愧于自己。</p>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>短文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生日</tag>
      
      <tag>短文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>生日当天全款提下第一支（打八折）钟薛糕</title>
    <link href="/posts/7e920bb4/"/>
    <url>/posts/7e920bb4/</url>
    
    <content type="html"><![CDATA[<p><s>送给自己的生日礼物</s></p><p>我是大怨种</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/fd9dcb7f65d8d55b1f9c4c4b867a133d.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/30607022e7f945e8b3e24eff393908df.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://assets.ordchaos.com/img/2022/08/669b394060ffca06144d1d7ff6a1f7c7.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/8acba6be590b8d1575c0e211104c809f.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/4361452e2168b0346f0f2966bd2c3712.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/55c2e66f6be83cf83ab994a9aa1469db.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/15016decccaa2c1372e084971822d5cc.jpg" alt="" /></div><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/308549393db11192800f256acfb01202.jpg" alt="" /></div></div><div class="group-image-row"><div class="group-image-wrap"><img src="https://img.ordchaos.com/img/2022/08/d4def032036a47272ad4a4d92386d42e.jpg" alt="" /></div></div></div>]]></content>
    
    
    <categories>
      
      <category>日常</category>
      
      <category>短文</category>
      
    </categories>
    
    
    <tags>
      
      <tag>生日</tag>
      
      <tag>短文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Phigros 版本迁移——从 Google Play 到 Tap Tap</title>
    <link href="/posts/e8587b82/"/>
    <url>/posts/e8587b82/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>Google Play的版本更新总是慢一些，不知道你行不行，但是我是忍不了别人都玩上了新曲而我却还不能玩的感觉，遂决定迁移存档。</p><h2 id="过程"><a class="markdownIt-Anchor" href="#过程"></a> 过程</h2><p>大体参考这一篇文章<a href="https://www.bilibili.com/read/cv13597100">Phigros存档跨版本转移教程（免root）</a>即可，在这里稍微提一下我遇到的问题</p><h3 id="解决问题"><a class="markdownIt-Anchor" href="#解决问题"></a> 解决问题</h3><p>在使用abe.jar时，Java报错：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">Error: A JNI error has occurred, please check your installation and try again<br></code></pre></td></tr></table></figure><p>首先在网上查询，找到的第一个方法是删除电脑里共存的JDK，只留下一个，使<code>java -version</code>与<code>javac -version</code>有相同的版本。</p><p>我照做，删除了java8，只留下了openjdk17，但是毫无卵用。</p><p>于是我继续查询，发现在<a href="https://www.bilibili.com/video/av344511919">跨！系！统！转！移！支持安卓和IOS的跨系统存档转移工具！Phigros 存档 IOS 跨系统 备份 还原 转移 同步</a>这一视频中所提供的工具里的abe.jar可用。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>如果你也遇到了一样的问题，可以参考我的方法看看是否有效。</p><p>若不想下载整个备份工具而只想要abe.jar的话，可以从这里下载：<a href="https://www.lanzoui.com/i4D2S09yzwab">链接</a>（如有侵权，请联系我删除）</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>Phigros</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>adb</tag>
      
      <tag>手机</tag>
      
      <tag>phigros</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【多图预警】 AwtrixPro 开源项目的复现</title>
    <link href="/posts/774674fe/"/>
    <url>/posts/774674fe/</url>
    
    <content type="html"><![CDATA[<p>本人对AwtrixPro垂涎已久，但却懒得复现。暑假的物理作业包含一个对电学有关的实验，遂趁此机会复现一个出来。</p><span id="more"></span><h2 id="材料采购"><a class="markdownIt-Anchor" href="#材料采购"></a> 材料采购</h2><p>并不难，跟着<a href="https://awtrixdocs.blueforcer.de/">官网</a>的<a href="https://awtrixdocs.blueforcer.de/#/en-en/awtrix_family">这个网页</a>一步步在淘宝上找就可以了。就是记得买焊接工具以及足够量的耗材（指Gpio线材、热熔胶、电工胶带等等）以及外壳（可以用官网上的文件3D打印，淘宝上也有直接卖的）。</p><p>这里贴出我购买材料的链接，有兴趣的话可以试一试（<strong>加粗</strong>的为非必需品，没有注明数量默认1个，没有注明平台默认<a href="https://www.taobao.com/">淘宝</a>或<a href="https://www.tmall.com/">天猫</a>）：</p><table><thead><tr><th style="text-align:center">材料</th><th style="text-align:center">链接</th></tr></thead><tbody><tr><td style="text-align:center">Wemos D1 mini主板</td><td style="text-align:center"><a href="https://detail.tmall.com/item.htm?id=656570136800">ESP8266 ESP-12 Wemos D1 Mini 微型WiFi开发板Micro USB 3.3V</a></td></tr><tr><td style="text-align:center">32x8 点阵屏幕</td><td style="text-align:center"><a href="https://item.taobao.com/item.htm?id=587315326469">led柔性全彩像素屏 ws2812b SK6812B点阵rgb屏软屏8x8 8x32 16*16</a></td></tr><tr><td style="text-align:center">5V电源供应器（大于3A）</td><td style="text-align:center"><a href="https://item.taobao.com/item.htm?&amp;id=661593159618">5V4A20W插墙式广告机LED灯条平板蓝牙音响直流稳压开关电源适配器</a></td></tr><tr><td style="text-align:center"><strong>3×1k电阻</strong></td><td style="text-align:center"><a href="https://item.taobao.com/item.htm?id=628088109354">10支价 进口 10K MRS25000C1002FRP00 0207 0.6W 低噪金属膜电阻</a></td></tr><tr><td style="text-align:center">线材若干</td><td style="text-align:center"><a href="https://item.taobao.com/item.htm?id=560216489848">树莓派gpio拓展40P彩色杜邦线20CM 母对母 公对母 公对公 1排40根</a>，买到了请自己根据需要进行剪裁</td></tr><tr><td style="text-align:center"><strong>2×肖特基二极管（1N1004）</strong>（官网上说必须，但我没看出来哪里需要）</td><td style="text-align:center"><a href="https://detail.tmall.com/item.htm?id=41297393192">1N4007 10A10 1N5408 1N5819 1N4001 5822直插整流二极管级IN4007</a>（颜色分类：1N4004 1A/400V整流二极管直插(50个））</td></tr><tr><td style="text-align:center">1000uF 10V电容</td><td style="text-align:center"><a href="https://detail.tmall.com/item.htm?id=542518338207">直插铝电解电容器元件10/16/25V/35/50v/10uF/47/220/1000/2200uF</a>（颜色分类：10V 1000UF 体积8x12mm（20个））</td></tr><tr><td style="text-align:center"><strong>GL5528光敏电阻</strong></td><td style="text-align:center">立创商城<a href="https://item.szlcsc.com/136905.html">GL5528</a></td></tr><tr><td style="text-align:center"><strong>DF Mini Player模块</strong></td><td style="text-align:center"><a href="https://detail.tmall.com/item.htm?id=631919047768">开源 Mini MP3 Player 播放器 模块 SD卡 音乐 arduino DFPlayer</a></td></tr><tr><td style="text-align:center"><strong>Htui21d温湿度传感器</strong></td><td style="text-align:center"><a href="https://detail.tmall.com/item.htm?id=655685254708">GY-213v-HTU21D HDC1080温湿度传感器检测模块/替SHT20 SHT21</a></td></tr><tr><td style="text-align:center">外壳+电源插口</td><td style="text-align:center"><a href="https://item.taobao.com/item.htm?id=617821156737">智能像素时钟Awtrix Pro创客创意彩色B站粉丝数全套外壳WS2812</a>，跟客服商量好了只要外壳与DC电源插口</td></tr><tr><td style="text-align:center"><strong>扬声器（52.5mm×52.5mm）</strong></td><td style="text-align:center"><a href="https://item.taobao.com/item.htm?id=607020565316">1.5寸40mm喇叭小米小钢炮低音全频3欧4欧3瓦5W音箱嗽叭扬声器配件</a></td></tr><tr><td style="text-align:center"><strong>3×TTP223触摸传感器</strong></td><td style="text-align:center"><a href="https://detail.tmall.com/item.htm?id=607554679782">触摸按键模块 TTP223 自锁 点动 电容式 开关 单路改造 电容触摸</a></td></tr></tbody></table><h2 id="硬件制作"><a class="markdownIt-Anchor" href="#硬件制作"></a> 硬件制作</h2><h3 id="pcb针脚焊接"><a class="markdownIt-Anchor" href="#pcb针脚焊接"></a> PCB+针脚焊接</h3><div class="note note-danger">            <p>本人未成功通过此方法复现，下列内容不一定完全正确，仅供参考</p>          </div><p>参考B站UP主<a href="https://space.bilibili.com/611430">三三三三三文啊</a>的视频<a href="https://www.bilibili.com/video/av755537090">【AWTRIX PRO】一起动手做一个高颜值的像素灯</a>，在嘉立创打好板子（注意有贴片，需要开钢网），买好GPIO接口公母头再焊接即可。打板流程可以参考<a href="https://www.bilibili.com/video/av427484742">【0基础】从零开始电子DIY！第三集：PCB电路板设计和打样！</a>，这一套教程非常不错，推荐。</p><p>打好的板子如下：</p><p><img src="https://img.ordchaos.com/img/2022/08/5b9772eb888dbcfcdff2a6ab1c6eede6.png" alt="" /></p><p>焊接好之后（贴片是用的钢网+锡焊膏+风枪）：</p><p><img src="https://img.ordchaos.com/img/2022/08/9cf87ef6020be601bbabad04be820af5.png" alt="" /></p><p>焊接针脚时若是无法直接使用锡丝与电烙铁焊接完成，也可以用锡焊膏+电烙铁。把锡焊膏涂抹在针脚背面，不用担心粘连，然后用电烙铁分别探入每两个针脚间的空隙，随后依次处理每个针脚就可以了。</p><p>然后刷程序、接线、通电、启动即可（至少理论上是这样）：</p><p><img src="https://img.ordchaos.com/img/2022/08/4a5b57080cd403b7b5dd66bd2d9afcf6.png" alt="" /></p><p>很明显，这里并未启动成功，望高手赐教。</p><h3 id="手动飞线"><a class="markdownIt-Anchor" href="#手动飞线"></a> 手动飞线</h3><p>根据官网的<a href="https://awtrixdocs.blueforcer.de/#/en-en/hardware">接线图</a>进行手动飞线即可，这里因为缺少一个电容（C1, 100nF）且不知道哪里有卖的而未接上DFPlayer模块及喇叭。</p><p>这里除了基础配件外，额外加装了光敏电阻、触摸以及Htui21d温湿度模块。基础部分依据<a href="https://www.bilibili.com/video/av668523753">教你做一个可编程像素屏</a>制作成功，然后通过自主飞线完成了其它组件的安装。</p><p><img src="https://img.ordchaos.com/img/2022/08/ab26200d787686758a2818e42c194390.png" alt="开机成功" /></p><p>没有什么难点，注意需要连接多根导线时用钳子分别剪开线的外皮，露出里面的铜/铁/其他金属丝，拧在一起然后用电烙铁与锡焊在一起就可以了。</p><p>裸露的金属丝记得用电工胶带或者热熔胶包裹起来，防止意外：</p><p><img src="https://img.ordchaos.com/img/2022/08/f7f7f5023c7a24950e5ff5d613f21a77.png" alt="" /></p><p><img src="https://img.ordchaos.com/img/2022/08/a58efaa7843d68378c55e5853c9fc868.png" alt="" /></p><p>然后装入外壳即可：</p><p><img src="https://img.ordchaos.com/img/2022/08/1b676758ff6b5335e885fdb05582ca29.png" alt="" /></p><p><img src="https://img.ordchaos.com/img/2022/08/dbe352cad746f465299903afca323065.png" alt="" /></p><p>再放上格栅、均光片及亚克力面板就完成了：</p><p><img src="https://img.ordchaos.com/img/2022/08/6452f475eee4168878bbdf52d869e8ba.png" alt="安装格栅" /></p><p><img src="https://img.ordchaos.com/img/2022/08/218377f02cba747a81eb3206738b6618.png" alt="安装均光片" /></p><p><img src="https://img.ordchaos.com/img/2022/08/e856d4435368c07905d92821cfa562f9.png" alt="安装亚克力面板" /></p><h2 id="软件配置"><a class="markdownIt-Anchor" href="#软件配置"></a> 软件配置</h2><p>软件这里就不再多提，官网上就有（点击<a href="https://awtrixdocs.blueforcer.de/#/en-en/firststart">这里</a>访问）。就是说一下我这里是部署在我自己的服务器上，就无需本地服务器如树莓派一类了。</p><p>宝塔面板就可以轻松完成配置，也无需ssh连接。</p><p><img src="https://img.ordchaos.com/img/2022/08/ef73564d2eab625713028965efc8af76.png" alt="" /></p><p>然后安装自己喜欢的软件即可，我这里是这几个：</p><p><img src="https://img.ordchaos.com/img/2022/08/2d80f8a316ed6a012b5394ce0b69f68c.png" alt="" /></p><h2 id="成品"><a class="markdownIt-Anchor" href="#成品"></a> 成品</h2><p><img src="https://img.ordchaos.com/img/2022/08/9475e4941ebe44b1178c7918267b6d6b.jpg" alt="室温" /></p><p><img src="https://img.ordchaos.com/img/2022/08/7fed0f0651626ac95c870e24c08f8adb.jpg" alt="湿度" /></p><p><img src="https://img.ordchaos.com/img/2022/08/91bf0f6b36bc47baf2614b09ac84d96f.jpg" alt="日期" /></p><p><img src="https://img.ordchaos.com/img/2022/08/30b2b40e62891015c3ad612597a85b5b.jpg" alt="B站粉丝数量（还不关注我？）" /></p><p><img src="https://img.ordchaos.com/img/2022/08/91bcff06179f758f36661fe972765083.jpg" alt="Youtube粉丝数（香港服务器的好处之一就是能够获取到这种信息）（没错，我没有粉丝——当然是因为我没发任何视频）" /></p><p><img src="https://img.ordchaos.com/img/2022/08/4ab43612fe1c3cefcda0548b8052c2e3.jpg" alt="GitHub Followers" /></p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>从暑假开始一直做到了倒数第二天…心累，不过总算是完成了，也让我发现了我的电工天赋(bushi</p><p>那就这样，这篇报告(?)就完成了，感谢你的观看，886</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>硬件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>github</tag>
      
      <tag>开源软件</tag>
      
      <tag>awtrix</tag>
      
      <tag>硬件</tag>
      
      <tag>复现</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解决一件困扰我很久的小事</title>
    <link href="/posts/8ad10849/"/>
    <url>/posts/8ad10849/</url>
    
    <content type="html"><![CDATA[<h2 id="起因"><a class="markdownIt-Anchor" href="#起因"></a> 起因</h2><p>偶然间看到了这个视频——<a href="https://www.bilibili.com/video/av343708277">[Phigros/技术革新] 快速获取自己的B19成绩图</a>，眼馋，也想要，遂跟着做，结果却…</p><p>大☆失☆败</p><p>手机自始至终没有弹出“完全备份”界面，我百思不得其解，于是在stackoverflow上发了一个问题：</p><p><a href="https://stackoverflow.com/questions/73164193/adb-backup-does-not-work-on-my-harmonyos-2-0-phone">Adb backup does not work on my HarmonyOS 2.0 phone</a></p><p>直到今天之前，没有任何人给出有效回答。</p><h2 id="解决"><a class="markdownIt-Anchor" href="#解决"></a> 解决</h2><p>把之前在手机里安装的软件“冰箱”卸载之后就正常了，我也不知道为什么。</p><p>从这件事就可以看出我是个…欸，我不说，就是玩</p><p>自己去把问题给解答了，这件事就此完结。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>生成都生成了，那就晒一下吧：</p><p><img src="https://img.ordchaos.com/img/2022/08/3b4b9e7a33c20d8d73cc86f1d46494a4.png" alt="" /></p><p>小菜一枚，大佬轻喷。</p><p>那就这样，886</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
      <category>Phigros</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>adb</tag>
      
      <tag>手机</tag>
      
      <tag>phigros</tag>
      
      <tag>安卓</tag>
      
      <tag>鸿蒙</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo 通过 GitHub Action 自动部署到云虚拟主机</title>
    <link href="/posts/1e44a102/"/>
    <url>/posts/1e44a102/</url>
    
    <content type="html"><![CDATA[<p>购买了<a href="https://www.foreverblog.cn/">十年之约</a>的优惠价<a href="https://www.vpsor.cn/">硅云</a>虚拟主机用于加速访问，记录一下部署过程。</p><span id="more"></span><h2 id="前提条件"><a class="markdownIt-Anchor" href="#前提条件"></a> 前提条件</h2><p>你需要已经配置好了GitHub Action的Hexo自动部署，若是没有，推荐观看以下文章：</p><ul><li><a href="https://zhuanlan.zhihu.com/p/170563000">GitHub Actions 来自动部署 Hexo</a></li><li><a href="https://razeen.me/posts/use-github-action-to-deploy-your-hexo-blog/">Github Actions 初体验之自动化部署 Hexo 博客</a></li><li><a href="https://segmentfault.com/a/1190000040767893">hexo配合github action 自动构建（多种形式）</a></li></ul><p>这里就不讲了。</p><h2 id="编辑action"><a class="markdownIt-Anchor" href="#编辑action"></a> 编辑Action</h2><p>打开<code>(本地博客仓库目录)/.github/workflows/(Action配置文件).yml</code>，在最后添加：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yml"><span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Files</span> <span class="hljs-string">on</span> <span class="hljs-string">Ftp</span> <span class="hljs-string">Server</span><br>  <span class="hljs-attr">uses:</span> <span class="hljs-string">SamKirkland/FTP-Deploy-Action@4.3.0</span><br>  <span class="hljs-attr">with:</span><br>    <span class="hljs-attr">server:</span> <span class="hljs-string">(FTP服务器地址)</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">(FTP用户名)</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-string">(FTP密码)</span><br>    <span class="hljs-attr">local-dir:</span> <span class="hljs-string">./public/</span><br>    <span class="hljs-attr">server-dir:</span> <span class="hljs-string">(FTP服务器文件目录)</span><br>    <span class="hljs-attr">port:</span> <span class="hljs-string">(FTP服务器端口，一般是21)</span><br></code></pre></td></tr></table></figure><p>将括号及内部内容换成自己的信息即可。</p><p>这里的方法是使用ftp来上传文件到虚拟主机，是对于所有虚拟主机而言最通用的一种方式了。<code>./public</code>是Hexo默认的静态文件生成本地地址，无需更改。</p><p>最后推流到GitHub即可使用。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>本来以为挺复杂，结果就这么点。</p><p>最开始使用的是<code>hexo-deployer-ftpsync</code>插件，结果却根本无法正常使用，于是便转为使用docker镜像。</p><p>对了，如果有兴趣购买硅云的主机，那请帮个小忙，用我的邀请链接注册吧：<a href="https://www.vpsor.cn?userCode=jh1e1af">邀请链接</a></p><p>那就这样，886</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>Hexo</tag>
      
      <tag>虚拟主机</tag>
      
      <tag>网站</tag>
      
      <tag>GitHub</tag>
      
      <tag>自动化</tag>
      
      <tag>GitHub Action</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《梁启超传》议论文素材积累</title>
    <link href="/posts/2f728g0f/"/>
    <url>/posts/2f728g0f/</url>
    
    <content type="html"><![CDATA[<p>与<a href="https://www.ordchaos.com/posts/1e617f9e/">之前那一篇</a>一样是暑假的语文作业，也是对这本书全本的分节概括以及议论文的素材积累，外加上对应适用的议论文题材。</p><span id="more"></span><h2 id="第一章-一世纪以来中国的命运从鸦片战争至梁氏诞生的前夕"><a class="markdownIt-Anchor" href="#第一章-一世纪以来中国的命运从鸦片战争至梁氏诞生的前夕"></a> 第一章 一世纪以来中国的命运——从鸦片战争至梁氏诞生的前夕</h2><h3 id="第一节-绪说"><a class="markdownIt-Anchor" href="#第一节-绪说"></a> 第一节 绪说</h3><p>梁启超生在中国近代最悲惨的100年（1842-1943）年中，虽屡次想跳海自尽，但仍坚决地相信中国必然不亡且断然复兴，所以他才在全然无望中挣扎奋斗。</p><p><strong>作文：坚持、毅力、精神</strong></p><h3 id="第二节-梁氏生前中国一般的惨况"><a class="markdownIt-Anchor" href="#第二节-梁氏生前中国一般的惨况"></a> 第二节 梁氏生前中国一般的惨况</h3><ul><li><p>《奴才好》中足以令人怒发冲冠的描写在当时黑暗社会的情境下甚至不被人认为是严重的怪象。</p></li><li><p>慈禧太后奢靡无度，倾尽全国财力为自己所用，掏空了国库，令全中国上下不得安宁。</p></li><li><p>清末国家机构的腐败，如“外交部”（总理衙门）工作人员甚至无法分清澳门与澳洲。</p></li><li><p>清末军队素质极差，上下组织腐败，不能防国，只能累民。</p></li><li><p>清末经济建设几乎毫无成效，只因“官与民争”就扩大为了导致清朝覆灭的致命伤。</p></li></ul><p><strong>作文：珍惜、强国、学习</strong></p><h3 id="第三节-梁氏生前中国一般的教育状况"><a class="markdownIt-Anchor" href="#第三节-梁氏生前中国一般的教育状况"></a> 第三节 梁氏生前中国一般的教育状况</h3><ul><li><p>清末满朝士大夫都有一种目中无人的气势，自觉这清朝乃是天下第一。</p></li><li><p>清末全国几乎没有半个学校的教育，教导孩子不去烟馆、青楼而在家里抽大烟、挑“丫头”都成为了“教子有方”。</p></li><li><p>清末文人及有志青年深受八股文之害，令八股文成为活埋青年的天坑。</p></li><li><p>清末人民对“洋”存在极深的偏见，如官办“洋学堂”都十分遭人唾弃，只能拉到一批不三不四的学生。校内不教德育、爱国，而只是学习西方下等人的恶俗。</p></li></ul><p><strong>作文：环境、强国、学习</strong></p><h3 id="第四节-梁氏后来对于祖国命运的影响"><a class="markdownIt-Anchor" href="#第四节-梁氏后来对于祖国命运的影响"></a> 第四节 梁氏后来对于祖国命运的影响</h3><ul><li><p>梁启超在混乱的社会环境成功改革文体，大幅推进国民阅读的程度，收获神州文字革命成功之果。</p></li><li><p>梁启超在国内外创办大量报纸，让报馆完成了“辅助教育，启发民众，指导社会，介绍新学，宣传主义，主持公论，监督行政，纠弹非法，为民喉舌”的神圣工作，同时收获文体、报纸、政体改革的成功，乃至最后的“国体改革”。</p></li></ul><p><strong>作文：坚持、偶像、伟人</strong></p><h2 id="第二章-亡国现象与维新初潮从梁氏诞生至戊戌政变"><a class="markdownIt-Anchor" href="#第二章-亡国现象与维新初潮从梁氏诞生至戊戌政变"></a> 第二章 亡国现象与维新初潮——从梁氏诞生至戊戌政变</h2><h3 id="第五节-综叙"><a class="markdownIt-Anchor" href="#第五节-综叙"></a> 第五节 综叙</h3><p>1873年，梁启超出生。此时近代伟人俱全，又冲破了鸦片战争以来中国所带之枷锁，正是突破了低于底层的黑暗，看见天际的一缕祥光。</p><p><strong>作文：努力、坚持、时代</strong></p><h3 id="第六节-亡国现象的种种梁氏生后的中国惨况"><a class="markdownIt-Anchor" href="#第六节-亡国现象的种种梁氏生后的中国惨况"></a> 第六节 亡国现象的种种——梁氏生后的中国惨况</h3><ul><li><p>梁启超出生之后的中国同样是战争不断，且更偏向于内乱。</p></li><li><p>此时国际形势大好，西方列强都成为了天之骄子，合力来对付中国一国，令中国无辜受到车裂及凌迟之刑。</p></li><li><p>日本对中国早有图谋，在其只是一个弹丸之地的效果时就已经企图占据朝鲜与中国，且当时日本名士几乎都有着不一的“吞华论”。</p></li></ul><p><strong>作文：毅力、黑暗、光明、社会、时代</strong></p><h3 id="第七节-梁氏幼年的家庭生活及家乡环境"><a class="markdownIt-Anchor" href="#第七节-梁氏幼年的家庭生活及家乡环境"></a> 第七节 梁氏幼年的家庭生活及家乡环境</h3><ul><li><p>梁启超自幼就受到“光荣”与“悲痛”两大思想刺激，产生了爱国主义思想，因此埋下了其一生命运的种子。</p></li><li><p>他虽然受逼迫不能追随孙中山革命，但仍具有浓烈的革命思想，也发表了激烈的革命党言论。</p></li></ul><p><strong>作文：爱国、强国、富国、伟人、偶像</strong></p><h3 id="第八节-康梁会接"><a class="markdownIt-Anchor" href="#第八节-康梁会接"></a> 第八节 康梁会接</h3><ul><li><p>康有为把各种书乱读一通，完全没有遵循求学问的正确轨道，只是自以为恍然大悟，妙不可言。养成了“予智自圣“的夸大狂态度，不肯随时代而进步。</p></li><li><p>康有为上书不达，但他的热忱与胆气倒真可佩服。在这样的背景下，他只得在广州长兴里万木草堂开门讲学。梁启超受了陈千秋与曹丁泰两位志士的介绍脱离了陈腐过时的学海堂，而转学入这个新鲜自由的长兴学舍，在这样的学风与学科之下受熏陶四年。</p></li></ul><p><strong>作文：智慧、计划、学习</strong></p><h3 id="第九节-梁氏独立事业的开始"><a class="markdownIt-Anchor" href="#第九节-梁氏独立事业的开始"></a> 第九节 梁氏独立事业的开始</h3><ul><li><p>梁启超脱胎于长兴学社创立新学。在这样一种不拘形式而朝气蓬勃的学风之下，造就出了许多具有新思想人才，当时一般的学生只有四十人，而五分之二都成为了革命先烈或开国名人。</p></li><li><p>梁启超创学会启发心智，推行维新，学会中政治性质强大。在戊戌八月政变失败之后，所有的学会都秘密含有了革命的使命，与前期的学会性质有根本上的不同。</p></li><li><p>梁启超为推行维新而创办报纸。此时，他已明白，学校、学会、报纸是三位一体互相为用的，缺一不可。所以，在北京办学会的时候，他就已经开始办报。这是梁启超生平新闻事业开始的第一章，也是近代中国有正式意义的新闻开始的第一页。</p></li></ul><p><strong>作文：智慧、方法、强国</strong></p><h2 id="第三章-维新的失败与革命的成功"><a class="markdownIt-Anchor" href="#第三章-维新的失败与革命的成功"></a> 第三章 维新的失败与革命的成功</h2><h3 id="第十节-促成戊戌变法的原因"><a class="markdownIt-Anchor" href="#第十节-促成戊戌变法的原因"></a> 第十节 促成戊戌变法的原因</h3><ul><li><p>外因-远因：清政府的闭关锁国政策、杀沙俄实力的突飞猛进、列强对中国的围攻、洋务运动的失败。</p></li><li><p>外因-近因：日本民治维新的胜利、甲午战争失败的国耻、中国被蚕食的痛苦、防止陷入土耳其不变法而衰弱的覆辙。</p></li><li><p>内因-远因：清政府长期积累政治恶习的崩溃、满族战斗能力与战斗意识的降低、太平天国运动后实际政权的转移、以慈禧太后为核心的宫廷政变。</p></li><li><p>内因-近因：慈禧太后与皇帝权力的争夺、满族嫉妒汉族情感的具象化、孙中山先生领导的革命运动的激进，国内舆论更加倾向于维新。</p></li><li><p>由于以上这十六点各种各样的原因，到戊戌年间维新运动已成瓜熟蒂落的现象，除了冥顽无耻，卖身求荣的少数败类以外，几乎所有人都是渴望政治改革有如甘霖一般。</p></li></ul><p><strong>作文：强国、因果、历史</strong></p><h3 id="第十一节-戊戌政变史剧的绘影"><a class="markdownIt-Anchor" href="#第十一节-戊戌政变史剧的绘影"></a> 第十一节 戊戌政变史剧的绘影</h3><ul><li><p>戊戌变法的规模既不如日本明治维新，就连康有为公车上书的内容也还有千里之差。但就算只是这样，对于当时的清政府而言，也已经算是大刀阔斧了，此时正是光绪帝把皇威发扬到顶点的时候。</p></li><li><p>光绪帝想趁着改革的机会罢免几个守旧的大臣，但这些顽固的大臣转而向“老佛爷”求助，于是慈禧太后勃然大怒，将光绪帝囚禁而自己垂帘听政，在实际上掌握了清政府的权力。</p></li><li><p>康有为、梁启超等“小人”“大逆”受“可恶透顶”的“洋鬼子”的保护，躲开了慈禧太后的清算。其中，谭嗣同本来由日本严密保护，但却自己重新自动出来，愿抛头颅以改造祖国百年的命运。如此的忠与侠实属罕见，也值得我们敬佩。</p></li></ul><p><strong>作文：强国、历史、光明、黑暗、方法</strong></p><h3 id="第十二节-政变失败原因的解析"><a class="markdownIt-Anchor" href="#第十二节-政变失败原因的解析"></a> 第十二节 政变失败原因的解析</h3><ul><li><p>清政府内部早已腐朽不堪，全国大权都在慈禧太后之手，而满人的猜疑程度又大到难以想象，更是有许多守旧的大臣。变法本就是一个不可能完成的任务。</p></li><li><p>康有为虽然魄力强大、精神勇猛、感情丰富、毅力坚韧，但他同样心胸不广、态度傲慢、个性执拗、理智不强、做事无序、缺乏科学训练、不求上进、所学太杂而不适用其时代，却反而骄然不惭，自谓贯通天地人。</p></li><li><p>满人生来仇视汉人，排挤汉人，甚至在百维新期间出现了满洲人所谓闹鬼的趣事。在这样的排挤、压迫、攻击之下，维新救国、变法图强本就是一个荒唐的幻想。</p></li><li><p>一些守旧分子自满于既得利益而不愿其被损伤分毫，故而极力阻挠变法。</p></li></ul><p><strong>作文：方法、强国、历史、革命、国庆</strong></p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>读后感</tag>
      
      <tag>议论文</tag>
      
      <tag>素材</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>免费高速文件分享小技巧</title>
    <link href="/posts/618137f7/"/>
    <url>/posts/618137f7/</url>
    
    <content type="html"><![CDATA[<p>首先提示一下，这会是一篇非常非常短的博文。</p><span id="more"></span><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>还在为百度网盘那该死的限速而发愁吗？如果你在网络上分享文件，肯定不想因为下载者因为百度网盘的限速而对你破口大骂（不是 对吧。这里推荐一个老牌云盘——蓝奏云，官网<a href="https://www.lanzoui.com">在这里</a>。</p><p><img src="https://img.ordchaos.com/img/2022/08/5f81f9053d3739b8db15f6b9a52a9ea6.png" alt="" /></p><p>不限速，无限空间（单文件限100M），个人还是感觉非常不错，大文件要传上去也可以分卷压缩。</p><h2 id="小技巧"><a class="markdownIt-Anchor" href="#小技巧"></a> 小技巧</h2><p>网络上无法访问的蓝奏云文件分享可以试着把二级域名改为lanzoui试试哦。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>没啦，就这么短。</p><p>886</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>白嫖</tag>
      
      <tag>福利</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>无需流量费用！阿里云 oss 图床配合阿里云轻量应用服务器部署</title>
    <link href="/posts/d9bb8734/"/>
    <url>/posts/d9bb8734/</url>
    
    <content type="html"><![CDATA[<p>我已经有了一台阿里云的香港轻量应用服务器，正好阿里云oss内网下行流量免费，再加上oss上行流量同样免费，于是就可以在省掉所有的流量费用的同时获得一个拥有不错速度的私人图床。</p><span id="more"></span><h2 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h2><p>打开<a href="https://oss.console.aliyun.com/overview">阿里云oss</a>页面，点击bucket列表，选择创建bucket：</p><p><img src="https://img.ordchaos.com/img/2022/08/cac38bb76668f802362812e48bc14e0d.png" alt="" /></p><p>名称随意，但是地域要选择于自己的服务器相同的地区，这样才可以通过内网访问。存储类型选择标准存储，读写权限选择公共读，其余一律默认。</p><p>oss桶默认是按量计费，标准可以参考<a href="https://www.aliyun.com/price/product#/oss/detail/ossbag">官方文档</a>。你也可以像我一样购买资源包，点击资源包管理，再在新页面中点击购买资源包：</p><p><img src="https://img.ordchaos.com/img/2022/08/148d980aabaccea58c0230e728ec50f1.png" alt="" /></p><p>然后在资源包类型一栏中选择标准(LRS)存储包，其余按需选择即可：</p><p><img src="https://img.ordchaos.com/img/2022/08/0b3001c8013bbb88b7e0b02ec2da5249.png" alt="" /></p><p>一年仅需9元，个人认为十分划算。</p><p>此时存储桶便已创建完成。</p><h2 id="服务器反向代理"><a class="markdownIt-Anchor" href="#服务器反向代理"></a> 服务器反向代理</h2><p>内网下行流量免费，所以我们要先访问内网，通过服务器反向代理就可以做到这一点。这里通过宝塔面板进行配置。</p><p>点击侧栏的网站，然后点击新建站点：</p><p><img src="https://img.ordchaos.com/img/2022/08/2e68985d436b72d564d602de0ffa418b.png" alt="" /></p><p>域名填写最终用来访问图片的域名，如这里的 <a href="http://assets.ordchaos.com">assets.ordchaos.com</a>。其余默认即可，然后选择提交。</p><p>之后点击对应网站的设置——反向代理——添加反向代理。名称随意填写，目标URL填写内容如图所示：</p><p><img src="https://img.ordchaos.com/img/2022/08/cc63b49e488b716abf4b88e5cc7ebdbb.png" alt="" /></p><p>填写对应的内网Bucket域名。</p><p>然后点击提交即可。也可以配置缓存，在添加反向代理时点击开启缓存并配置时间就可以了。记得在域名供应商那里添加对应的域名解析到服务器上。</p><p>之后可以配置SSL证书，在SSL页面自行配置即可。现在你的桶已经可以通过反向代理来访问了，下面我们来做一些额外的工作。</p><h2 id="picgo配置"><a class="markdownIt-Anchor" href="#picgo配置"></a> PicGo配置</h2><p><a href="https://www.lingshulian.com/link?redirect=https%3A%2F%2Fmolunerfinn.com%2FPicGo%2F">PicGo</a>作为一个图片上传工具是非常不错的，拓展性很高。同时作为一款开源软件，其发布在了<a href="https://github.com/Molunerfinn/PicGo/">GitHub</a>上。这里默认已经安装完成了PicGo。</p><h3 id="安装s3桶插件"><a class="markdownIt-Anchor" href="#安装s3桶插件"></a> 安装S3桶插件</h3><p>打开PicGo，点击“插件设置”，在搜索框中搜索“s3”，安装第一个就可以了：</p><p><img src="https://img.ordchaos.com/img/2022/08/dfafc2c6bb5acae1fa5a97b0988e1129.png" alt="" /></p><p>我这里安装过了，所以就显示的是“已安装”。这个插件支持所有s3桶，包括阿里云oss。其实可以直接配置阿里云oss，但是使用s3插件可以自动按规则重命名文件。</p><h3 id="获取配置信息"><a class="markdownIt-Anchor" href="#获取配置信息"></a> 获取配置信息</h3><p>把鼠标移到右上角头像上悬浮，在出现的界面上点击访问控制：</p><p><img src="https://img.ordchaos.com/img/2022/08/3b5b13f8eeb576411648be98a0b48053.png" alt="" /></p><p>然后点击侧栏的用户，再点击创建用户：</p><p><img src="https://img.ordchaos.com/img/2022/08/5b11a2f303a9f46c0cf49614e6fc1515.png" alt="" /></p><p>登陆名称与显示名称随意，然后勾选下方的“Open API 调用访问”：</p><p><img src="https://img.ordchaos.com/img/2022/08/1188eac59b4a500457b13b7c253233b3.png" alt="" /></p><p>点击确定，验证身份，然后就会出现AccessKey ID 与 Secret，记得保存下来：</p><p><img src="https://img.ordchaos.com/img/2022/08/9d20e0dd982685cc6ef898b7e842a232.png" alt="" /></p><p>然后返回到用户管理页面，点击刚刚创建的RAM账号旁边的添加权限，然后添加控制oss桶的权限即可：</p><p><img src="https://img.ordchaos.com/img/2022/08/6aa38f2e26a714699ceb7257700dff98.png" alt="" /></p><h3 id="配置picgo图床"><a class="markdownIt-Anchor" href="#配置picgo图床"></a> 配置PicGo图床</h3><p>点击图床设置-AmazonS3，填写对应参数即可，大致如下：</p><ul><li>应用密钥ID：上述获取到的AccessKey ID</li><li>应用密钥：上述获取到的AccessKey Secret</li><li>桶：你创建的oss桶的名字</li><li>权限：public-read（桶权限，公共读）</li><li>地区：在对应桶的概览页面可以看到桶的外网访问Endpoint，假设是 <a href="http://oss-xxx.aliyuncs.com">oss-xxx.aliyuncs.com</a>，则地区为oss-xxx</li><li>自定义节点：上述的Endpoint</li><li>文件路径：{year}/{month}/{md5}.{extName}（默认上传到桶的文件路径，格式如下：)</li></ul><table><thead><tr><th style="text-align:center">格式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&#123;year&#125;</code></td><td style="text-align:center">当前日期 - 年</td></tr><tr><td style="text-align:center"><code>&#123;month&#125;</code></td><td style="text-align:center">当前日期 - 月</td></tr><tr><td style="text-align:center"><code>&#123;day&#125;</code></td><td style="text-align:center">当前日期 - 日</td></tr><tr><td style="text-align:center"><code>&#123;fullName&#125;</code></td><td style="text-align:center">完整文件名（含扩展名）</td></tr><tr><td style="text-align:center"><code>&#123;fileName&#125;</code></td><td style="text-align:center">文件名（不含扩展名）</td></tr><tr><td style="text-align:center"><code>&#123;extName&#125;</code></td><td style="text-align:center">扩展名（不含<code>.</code>）</td></tr><tr><td style="text-align:center"><code>&#123;md5&#125;</code></td><td style="text-align:center">图片 MD5 计算值</td></tr><tr><td style="text-align:center"><code>&#123;sha1&#125;</code></td><td style="text-align:center">图片 SHA1 计算值</td></tr><tr><td style="text-align:center"><code>&#123;sha256&#125;</code></td><td style="text-align:center">图片 SHA256 计算值</td></tr></tbody></table><p>然后点击确定并设为默认图床即可。</p><p>大功告成！之后只需要在“上传区”页面就可以一键上传图片并复制链接了。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>目前全站图片都已更换为阿里云oss存储，不得不说速度是真的快。</p><p>还有这大概是我目前图最多的一篇博文了吧。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>白嫖</tag>
      
      <tag>福利</tag>
      
      <tag>s3桶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>空气成分手抄报</title>
    <link href="/posts/e8ce405d/"/>
    <url>/posts/e8ce405d/</url>
    
    <content type="html"><![CDATA[<p>化学的暑假作业，浅浅地用sai2摸了一个图出来，大家看看就好。</p><span id="more"></span><p><img src="https://img.ordchaos.com/img/2022/08/6f82a2a2056db775cb9664a0c670e47a.jpg" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>美术</category>
      
      <category>化学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>sai</tag>
      
      <tag>手绘</tag>
      
      <tag>画画</tag>
      
      <tag>化学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>【不建议】免费 s3 桶——棱束链联盟</title>
    <link href="/posts/46d2370f/"/>
    <url>/posts/46d2370f/</url>
    
    <content type="html"><![CDATA[<p>小品牌，无法保证SLA，故不再推荐。本站图片现已全部转移到<a href="https://oss.console.aliyun.com/overview">阿里云oss</a>。</p><span id="more"></span><p>我是在B站看到棱束链的<a href="https://www.bilibili.com/video/av771453546">宣传视频</a>的，点进官网就看见了棱束链联盟的广告。想着免费嘛，就申请了一下。效率还不错，第二天就通过了。现在博客的图片就放在上面，感觉速度不错，至少比之前的blackbaze+cloudflare要快。</p><h2 id="申请"><a class="markdownIt-Anchor" href="#申请"></a> 申请</h2><p>很简单，首先进入官网<a href="https://www.lingshulian.com/">棱束链</a>，在顶栏上点击产品，选择棱束链联盟。</p><p><img src="https://img.ordchaos.com/img/2022/08/8409f4d334ef7e66ef54de7710ea63f7.png" alt="" /></p><p>然后就抵达了申请页面：</p><p><img src="https://img.ordchaos.com/img/2022/08/a7377b528525a29ca2cc1adb7b258fcd.png" alt="" /></p><p>填写表单，按要求在网站底部加入棱束链提供的Logo，比如我的：（可以自己在网站底部看看）</p><p><img src="https://img.ordchaos.com/img/2022/08/e30bf829e38f596c59c9d3a4748c1989.png" alt="" /></p><p>提交表单，等着就可以了。</p><p>如果申请了就记得看一看自己提供的邮箱，通过了就会发邮件通知你。我的话第二天早上就发现通过了，处理速度还是不错的。给到了我10G的空间与20G的流量，诚意很足。</p><p>之后进入控制台，点击对象存储，再创建存储桶就可以使用了。</p><h2 id="picgo配置"><a class="markdownIt-Anchor" href="#picgo配置"></a> PicGo配置</h2><p><a href="https://www.lingshulian.com/link?redirect=https%3A%2F%2Fmolunerfinn.com%2FPicGo%2F">PicGo</a>作为一个图片上传工具是非常不错的，拓展性很高。同时作为一款开源软件，其发布在了<a href="https://github.com/Molunerfinn/PicGo/">GitHub</a>上。这里默认已经安装完成了PicGo。</p><h3 id="安装s3桶插件"><a class="markdownIt-Anchor" href="#安装s3桶插件"></a> 安装S3桶插件</h3><p>打开PicGo，点击“插件设置”，在搜索框中搜索“s3”，安装第一个就可以了：</p><p><img src="https://img.ordchaos.com/img/2022/08/dfafc2c6bb5acae1fa5a97b0988e1129.png" alt="" /></p><p>我这里安装过了，所以就显示的是“已安装”。这个插件支持所有s3桶，比如之前的b2以及这个棱束链。</p><h3 id="获取配置信息"><a class="markdownIt-Anchor" href="#获取配置信息"></a> 获取配置信息</h3><h4 id="secretid与secretkey"><a class="markdownIt-Anchor" href="#secretid与secretkey"></a> secretID与secretKey</h4><p>进入棱束链的控制台，点击个人中心，在“功能设置”中开启API并记下secretID与secretKey，若是忘了就只能重新获取。</p><p><img src="https://img.ordchaos.com/img/2022/08/bed66b189347589ca1fde8434238c213.png" alt="" /></p><h4 id="桶地域信息"><a class="markdownIt-Anchor" href="#桶地域信息"></a> 桶地域信息</h4><p>前往存储桶列表，点击桶右侧的“配置”按钮，记下“桶信息”卡片中的地域与端点信息即可。</p><p><img src="https://img.ordchaos.com/img/2022/08/061751a05597109431e77369bc615abb.png" alt="" /></p><p>注意，这里的桶<strong>一定</strong>要是公开桶！</p><h3 id="配置picgo图床"><a class="markdownIt-Anchor" href="#配置picgo图床"></a> 配置PicGo图床</h3><p>点击图床设置-AmazonS3，填写对应参数即可，大致如下：</p><ul><li>应用密钥ID：上述获取到的secretId</li><li>应用密钥：上述获取到的 secretKey</li><li>桶：上述存储桶的名字</li><li>权限：public-read（桶权限，公共读）</li><li>地区：上述获取到的地域</li><li>自定义节点：上述获取到的端点</li><li>文件路径：{year}/{month}/{md5}.{extName}（默认上传到桶的文件路径，格式如下：)</li></ul><table><thead><tr><th style="text-align:center">格式</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center"><code>&#123;year&#125;</code></td><td style="text-align:center">当前日期 - 年</td></tr><tr><td style="text-align:center"><code>&#123;month&#125;</code></td><td style="text-align:center">当前日期 - 月</td></tr><tr><td style="text-align:center"><code>&#123;day&#125;</code></td><td style="text-align:center">当前日期 - 日</td></tr><tr><td style="text-align:center"><code>&#123;fullName&#125;</code></td><td style="text-align:center">完整文件名（含扩展名）</td></tr><tr><td style="text-align:center"><code>&#123;fileName&#125;</code></td><td style="text-align:center">文件名（不含扩展名）</td></tr><tr><td style="text-align:center"><code>&#123;extName&#125;</code></td><td style="text-align:center">扩展名（不含<code>.</code>）</td></tr><tr><td style="text-align:center"><code>&#123;md5&#125;</code></td><td style="text-align:center">图片 MD5 计算值</td></tr><tr><td style="text-align:center"><code>&#123;sha1&#125;</code></td><td style="text-align:center">图片 SHA1 计算值</td></tr><tr><td style="text-align:center"><code>&#123;sha256&#125;</code></td><td style="text-align:center">图片 SHA256 计算值</td></tr></tbody></table><p>然后点击“设为默认图床”并确定即可，之后只需要在“上传区”页面就可以一键上传图片并复制链接了。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>文章部分参考<a href="https://www.lingshulian.com/article/1566546474d701797c794a3e2b748274">官方文档</a>。</p><p>这篇博文不是广告，只是想大家都可以薅一把羊毛<span class="heimu" title="你知道的太多了">并水一篇博文（逃</span></p><p>那就这样，886。</p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>白嫖</tag>
      
      <tag>福利</tag>
      
      <tag>s3桶</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《梁启超传》读后感</title>
    <link href="/posts/1e617f9e/"/>
    <url>/posts/1e617f9e/</url>
    
    <content type="html"><![CDATA[<p>在这个暑假中，我读了由梁启超学生吴其昌著作的《梁启超传》，这本书也是作者的绝笔之作。在其去世前的一个月，作者便应邀开始写这一本书，但在他完成书的上卷后便不幸身亡，年仅四十岁，同时留下了这本未完稿的《梁启超传》。这本传记虽然仅有五万字，但是阅读者可以很明显的发现作者吴其昌很完美的继承了其老师梁启超“笔锋常带感情”的特质。作者与梁启超一样，感性的思维较强，喜欢用感性的一面来描述事物，感知事物。</p><p>梁启超生于一八七三年二月二十三日，字卓如，号任公。清朝光绪年间举人，是中国近代思想家、政治家、教育家、史学家、文学家，也是戊戌变法（百日维新）领袖之一、中国近代维新派、新法家代表人物。</p><p>而梁启超生活的时代，正是中国人明最困苦的一段时期。那既是清朝末年，也是我国封建社会的末世。内忧外患，乱象毕现，用作者的话来说，就是“堕入地狱的底层”。然而最可悲的还不在此，而在于当时道德的堕落、思想的颠倒和民智的固陋，堕入地狱的底层而不自知，“哀莫大于心死”!中国从一八四二年到一九四三年这一百年的命运，是“从乐土跌到地狱，又从地狱爬会乐土”是“一个四千年历史上从未有的大转折期”。生活在这个时代的稍有血性的国民看着一个又一个的不平等条约的建立与实施都想“蹈东海而自杀”，比如陈天华。而梁启超，是一个成长在这个最黑暗的地狱底层的有血有泪有志气的满身创伤的青年。他对于中国复兴有着坚定不移的信心，所以他没有去蹈东海，而是在“全然无望”中拼命奋斗、挣扎。只是他到死都没有见到中国再度统一的一天。他的眼前没有希望，但心中却充满了希望与斗志。他师从康有为，发动戊戌变法，创学会，办报纸，达到了其政治生涯的顶峰。然而，就像梁启超后来所说的那样：“戊戌维新之可贵，在精神耳”，戊戌变法是一次及其不彻底的改革，依靠的是无能的光绪帝，只是雷声大雨点小的实行了一百多天，就被慈禧太后为首的封建顽固势力所扼杀。“我欲望鲁兮，龟山蔽之。手无斧柯，奈龟山何!”但全书就这样戛然而止，原因我们都知道了。可就算如此，读完后却仍然令人愤慨与惋惜。</p><p>现在看看梁启超本人与现在的社会，会发现虽然中国早已统一，但是却缺乏了梁启超的奋斗的心。这个社会，比起梁梁启超当年所处的，自然要文明、要繁盛得多，可依然存在着不公与不善。为纠正这些不公，惩治这些不善，依然有可能要付出惨重的代价。在风险面前，很多人却望而却步，勇往直前的人是有的，但是因为现状的安稳，这些人正在慢慢减少。所以梁启超赴汤蹈火救国的精神在任何一个时代都不会落后。</p><p>梁启超是清末维新运动的领袖之一,是近代资产阶级改良主义者;也是提倡诗界、小说界革命的新文化传播者。戊戌变法失败后,他逃亡日本,虽曾和孙中山联系商议合作,但因为他的老师师康有为所制止,从而做了保皇党，也就是拥护皇帝的一批人的其中之一。辛亥革命之后,他谋位于军阀之中,将自己的旗帜插在了反动派的阵营之中而反对革命,晚年时尤其犹反对共产党。对于他在政治上的反动观点与反动行为当然是应当制止的，可是他的护国、爱国的精神与为国赴汤蹈火的精神，我们这个时代是需要的，这种精神在这个时代也是缺乏的。</p><p>一九二九年一月十九日，梁启超在北京协和医院溘然长逝，享年五十六岁。</p><p>附一张（参考意义不大的）思维导图：</p><p><img src="https://img.ordchaos.com/img/2022/08/473bdb224961f1a051ea1d80f7e9041f.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>读后感</tag>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第五种排序—— std::sort() 函数</title>
    <link href="/posts/97a1a73e/"/>
    <url>/posts/97a1a73e/</url>
    
    <content type="html"><![CDATA[<p>上次讲了四种排序算法（没看过的点<a href="https://www.ordchaos.com/posts/6a062b97/">这里</a>），但是在实际开发或是竞赛中可能没有足够的时间写出一个够用的排序函数，或是需要排序的并非数字，这时便是我们的大宝贝——std::sort()函数登场的时候了。</p><span id="more"></span><h2 id="用法"><a class="markdownIt-Anchor" href="#用法"></a> 用法</h2><p>需要先引用algorithm库，不过我更倾向于在竞赛时直接使用万能库节省记忆时间。然后，需要使用std命名空间，或是直接调用std::sort()。</p><p>sort()函数的原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomAccessIterator</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(RandomAccessIterator first, RandomAccessIterator last)</span></span>;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">RandomAccessIterator</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Compare</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(RandomAccessIterator first, RandomAccessIterator last, Compare comp)</span></span>;<br></code></pre></td></tr></table></figure><p>对，std::sort()是重载函数，其中包含了是否存在comp的两种版本。std::sort()函数默认从小到大按字典顺序对数据进行排序，用法如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">48</span>, <span class="hljs-number">28</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">19</span>, <span class="hljs-number">13</span>, <span class="hljs-number">27</span>, <span class="hljs-number">38</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(arr, arr + <span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++) std::cout&lt;&lt;arr[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><p>此时std::sort()函数便会将arr[0]到arr[9]共10个元素进行排列并放回arr数组，所以上述程序运行结果如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">10 12 13 19 22 27 28 33 38 48<br></code></pre></td></tr></table></figure><p>很容易就可以想到，对吧。</p><h2 id="进阶"><a class="markdownIt-Anchor" href="#进阶"></a> 进阶</h2><h3 id="使用stdsort对各类普通变量排序"><a class="markdownIt-Anchor" href="#使用stdsort对各类普通变量排序"></a> 使用std::sort()对各类普通变量排序</h3><h4 id="对stdstring类型变量排序"><a class="markdownIt-Anchor" href="#对stdstring类型变量排序"></a> 对std::string类型变量排序</h4><p>前面提到了，std::sort()会对数组使用字典序从小到大排序，所以结果就很容易预想到。</p><p>看下列程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string arr[<span class="hljs-number">10</span>] = &#123;<span class="hljs-string">&quot;apple&quot;</span>, <span class="hljs-string">&quot;Apple&quot;</span>, <span class="hljs-string">&quot;APPLE&quot;</span>, <span class="hljs-string">&quot;zen&quot;</span>, <span class="hljs-string">&quot;ordchaos&quot;</span>, <span class="hljs-string">&quot;OrdChaos&quot;</span>, <span class="hljs-string">&quot;happy&quot;</span>, <span class="hljs-string">&quot;x-ray&quot;</span>, <span class="hljs-string">&quot;xyz&quot;</span>, <span class="hljs-string">&quot;123aa&quot;</span>&#125;;<br>std::<span class="hljs-built_in">sort</span>(arr, arr + <span class="hljs-number">10</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++) std::cout&lt;&lt;arr[i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br></code></pre></td></tr></table></figure><p>想一想，结果会如何？</p><p>结果：<span class="heimu" title="没做出来就不要偷看哦">123aa APPLE Apple OrdChaos apple happy ordchaos x-ray xyz zen</span></p><p>怎么样，是不是很简单。这种对std::sort()的使用方式可以做按照字母序排列姓名的题目，但是如果题目要求按长度排序怎么办？别着急，慢慢往下看。</p><h4 id="使用comp自定义排序顺序"><a class="markdownIt-Anchor" href="#使用comp自定义排序顺序"></a> 使用comp自定义排序顺序</h4><p>刚刚说过，std::sort()是一个重载函数，有一个含有comp的变体，那么，comp是什么？用来干什么呢？简单来说，comp就是一个返回值为bool类型的函数，在这个函数里你可以自定义sort排序的顺序。这样说你可能不理解，那就来看看下面这个例子：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> arr[<span class="hljs-number">2</span>][<span class="hljs-number">10</span>] = &#123;&#123;<span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">48</span>, <span class="hljs-number">28</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">19</span>, <span class="hljs-number">13</span>, <span class="hljs-number">27</span>, <span class="hljs-number">38</span>&#125;,&#123;<span class="hljs-number">12</span>, <span class="hljs-number">10</span>, <span class="hljs-number">48</span>, <span class="hljs-number">28</span>, <span class="hljs-number">22</span>, <span class="hljs-number">33</span>, <span class="hljs-number">19</span>, <span class="hljs-number">13</span>, <span class="hljs-number">27</span>, <span class="hljs-number">38</span>&#125;&#125;;<br>std::<span class="hljs-built_in">sort</span>(arr[<span class="hljs-number">0</span>], arr[<span class="hljs-number">0</span>] + <span class="hljs-number">10</span>);<br>    std::<span class="hljs-built_in">sort</span>(arr[<span class="hljs-number">1</span>], arr[<span class="hljs-number">1</span>] + <span class="hljs-number">10</span>, cmp);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++) std::cout&lt;&lt;arr[<span class="hljs-number">0</span>][i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    std::cout&lt;&lt;std::endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">10</span>;i++) std::cout&lt;&lt;arr[<span class="hljs-number">1</span>][i]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>在这里我定义了bool类型函数cmp()，其中若a&gt;b则返回true，否则为false。然后两次调用std::sort()，分别为两个一模一样的数组arr[0]与arr[1]排序，不同的是第二次使用了我们定义的cmp()，那么，结果如何呢？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">10 12 13 19 22 27 28 33 38 48 <br>48 38 33 28 27 22 19 13 12 10 <br></code></pre></td></tr></table></figure><p>没错，第二次排序变为了从大到小排序。利用这种方法，我们就可以轻松解决刚刚的问题，像这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(std::string a, std::string b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.<span class="hljs-built_in">length</span>() &lt; b.<span class="hljs-built_in">length</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>把这个函数加入刚刚的程序，再次调用std::sort()，只不过要加入参数cmp。很容易想到结果如下：</p><p>（动动脑哦）<span class="heimu" title="自己动动脑">zen xyz apple Apple APPLE happy x-ray 123aa ordchaos OrdChaos</span></p><h4 id="对stdstring类型变量内部进行排序"><a class="markdownIt-Anchor" href="#对stdstring类型变量内部进行排序"></a> 对std::string类型变量内部进行排序</h4><p>联想到可以通过类似于str[i]的方式来访问字符串内字符，自认可以写出使用std::sort()排序字符串内字符的方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp">std::string str = <span class="hljs-string">&quot;rhuMJKhwHefJkUIGuw394y49h&quot;</span>;<br>std::<span class="hljs-built_in">sort</span>(str.<span class="hljs-built_in">begin</span>(), str.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><p>注意这里必须使用str.begin()与str.end()作为参数而非str与str+str.str.length()。</p><p>结果也就是可以料想的，编译运行，程序输出如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">34499GHIJJKMUefhhhkruuwwy<br></code></pre></td></tr></table></figure><p>整 整 齐 齐.jpg</p><p>利用comp同样可以实现逆序排序，那就请你自己想想怎么写吧！</p><h3 id="使用stdsort对结构体进行排序"><a class="markdownIt-Anchor" href="#使用stdsort对结构体进行排序"></a> 使用std::sort()对结构体进行排序</h3><p>设想一个场景，有一个结构体叫做student，其中含有单个学生的姓名和成绩。这时该如何通过学生成绩对学生姓名进行排序呢？这里用std::sort()就会使最快的方法。</p><p>先定义结构体：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> score;<br>&#125;;<br></code></pre></td></tr></table></figure><p>然后写出对应的comp：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a, student b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.score &gt; b.score;<br>&#125;<br></code></pre></td></tr></table></figure><p>之后直接调用std::sort()就可以了，合起来代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> score;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a, student b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> a.score &gt; b.score;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>student stu[<span class="hljs-number">3</span>] = &#123;(student)&#123;<span class="hljs-string">&quot;Tony&quot;</span>, <span class="hljs-number">98</span>&#125;, (student)&#123;<span class="hljs-string">&quot;Betty&quot;</span>, <span class="hljs-number">97</span>&#125;, (student)&#123;<span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-number">99</span>&#125;&#125;;<br><span class="hljs-built_in">sort</span>(stu,stu+<span class="hljs-number">3</span>,cmp);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>cout&lt;&lt;stu[i].name&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>输出可以料想：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">Lucy<br>Tony<br>Betty<br></code></pre></td></tr></table></figure><p>这样做的好处是方便拓展，比如说现在结构体变了，存在四个科目的成绩与学生姓名，要求按平均分排序，从之前的程序上修改会非常容易：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>string name;<br><span class="hljs-type">int</span> chinese;<br>    <span class="hljs-type">int</span> math;<br>    <span class="hljs-type">int</span> english;<br>    <span class="hljs-type">int</span> programming;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a, student b)</span> </span>&#123;<br><span class="hljs-keyword">return</span> (a.chinese + a.math + a.english + a.programming)/<span class="hljs-number">4</span> &gt; (b.chinese + b.math + b.english + b.programming)/<span class="hljs-number">4</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>student stu[<span class="hljs-number">3</span>] = &#123;(student)&#123;<span class="hljs-string">&quot;Tony&quot;</span>, <span class="hljs-number">98</span>, <span class="hljs-number">96</span>, <span class="hljs-number">100</span>, <span class="hljs-number">95</span>&#125;, (student)&#123;<span class="hljs-string">&quot;Betty&quot;</span>, <span class="hljs-number">97</span>, <span class="hljs-number">80</span>, <span class="hljs-number">99</span>, <span class="hljs-number">95</span>&#125;, (student)&#123;<span class="hljs-string">&quot;Lucy&quot;</span>, <span class="hljs-number">99</span>, <span class="hljs-number">96</span>, <span class="hljs-number">90</span>, <span class="hljs-number">100</span>&#125;&#125;;<br><span class="hljs-built_in">sort</span>(stu,stu+<span class="hljs-number">3</span>,cmp);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">3</span>;i++)&#123;<br>cout&lt;&lt;stu[i].name&lt;&lt;endl;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这时结果就会变为<code>Tony Lucy Betty</code>的顺序。比起手写排序，这种情景使用std::sort()会方便不少。</p><h2 id="做道题吧"><a class="markdownIt-Anchor" href="#做道题吧"></a> 做道题吧</h2><p>洛谷：<a href="https://www.luogu.com.cn/problem/P1093">P1093 NOIP2007 普及组 奖学金</a></p><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><p>某小学最近得到了一笔赞助，打算拿出其中一部分为学习成绩优秀的前5名学生发奖学金。期末，每个学生都有3门课的成绩:语文、数学、英语。先按总分从高到低排序，如果两个同学总分相同，再按语文成绩从高到低排序，如果两个同学总分和语文成绩都相同，那么规定学号小的同学排在前面，这样，每个学生的排序是唯一确定的。</p><p>任务：先根据输入的3门课的成绩计算总分，然后按上述规则排序，最后按排名顺序输出前五名名学生的学号和总分。注意，在前5名同学中，每个人的奖学金都不相同，因此，你必须严格按上述规则排序。例如，在某个正确答案中，如果前两行的输出数据(每行输出两个数:学号、总分) 是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">77 279279<br>55 279279<br></code></pre></td></tr></table></figure><p>这两行数据的含义是:总分最高的两个同学的学号依次是7号5号。这两名同学的总分都是279(总分等于输入的语文、数学、英语三科成绩之和)，但学号为7的学生语文成绩更高一些。如果你的前两名的输出数据是:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">55 279279<br>77 279279<br></code></pre></td></tr></table></figure><p>则按输出错误处理，不能得分。</p><h3 id="输入格式"><a class="markdownIt-Anchor" href="#输入格式"></a> 输入格式</h3><p>共n+1行。</p><p>第1行为一个正整数n（n≤300），表示该校参加评选的学生人数。</p><p>第2到n+1行，每行有3个用空格隔开的数字，每个数字都在0到100之间。第j行的3个数字依次表示学号为j-1的学生的语文、数学、英语的成绩。每个学生的学号按照输入顺序编号为1~n（恰好是输入数据的行号减1）。</p><p>所给的数据都是正确的，不必检验。</p><h3 id="输出格式"><a class="markdownIt-Anchor" href="#输出格式"></a> 输出格式</h3><p>共5行，每行是两个用空格隔开的正整数，依次表示前5名学生的学号和总分。</p><h3 id="输入输出样例"><a class="markdownIt-Anchor" href="#输入输出样例"></a> 输入输出样例</h3><h4 id="输入1"><a class="markdownIt-Anchor" href="#输入1"></a> 输入1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">6<br>90 67 80<br>87 66 91<br>78 89 91<br>88 99 77<br>67 89 64<br>78 89 98<br></code></pre></td></tr></table></figure><h4 id="输出1"><a class="markdownIt-Anchor" href="#输出1"></a> 输出1</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">6 265<br>4 264<br>3 258<br>2 244<br>1 237<br></code></pre></td></tr></table></figure><h4 id="输入2"><a class="markdownIt-Anchor" href="#输入2"></a> 输入2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs shell">8<br>80 89 89<br>88 98 78<br>90 67 80<br>87 66 91<br>78 89 91<br>88 99 77<br>67 89 64<br>78 89 98<br></code></pre></td></tr></table></figure><h4 id="输出2"><a class="markdownIt-Anchor" href="#输出2"></a> 输出2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell">8 265<br>2 264<br>6 264<br>1 258<br>5 258<br></code></pre></td></tr></table></figure><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析</h3><p>这是一道很好的练习结构体的题，核心就是刚刚说的使用std::sort()函数对结构体进行排序，只不过这次的comp会复杂那么一点点。</p><p>结构体定义与comp大致如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>    <span class="hljs-type">int</span> num, chinese, math, english;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a,student b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>((a.chinese + a.math + a.english) &gt; (b.chinese + b.math + b.english)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((a.chinese + a.math + a.english) &lt; (b.chinese + b.math + b.english)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(a.chinese &gt; b.chinese) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.chinese &lt; b.chinese) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(a.num &gt; b.num) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>剩下的部分就不必多说了吧，直接上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    std::cin&gt;&gt;n;<br>    student stu[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        stu[i].num = i + <span class="hljs-number">1</span>;<br>        std::cin&gt;&gt;stu[i].chinese&gt;&gt;stu[i].math&gt;&gt;stu[i].english;<br>    &#125;<br>    std::<span class="hljs-built_in">sort</span>(stu,stu + n,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++) std::cout&lt;&lt;stu[i].num&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;stu[i].chinese + stu[i].math + stu[i].english&lt;&lt;std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>完成！</p><p><img src="https://img.ordchaos.com/img/2022/08/d3ff6fda7f0dc6532149d422709d611f.png" alt="" /></p><p>完整代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">student</span> &#123;<br>    <span class="hljs-type">int</span> num, chinese, math, english;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">cmp</span><span class="hljs-params">(student a,student b)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>((a.chinese + a.math + a.english) &gt; (b.chinese + b.math + b.english)) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>((a.chinese + a.math + a.english) &lt; (b.chinese + b.math + b.english)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span>(a.chinese &gt; b.chinese) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a.chinese &lt; b.chinese) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span>(a.num &gt; b.num) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    student stu[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        stu[i].num = i + <span class="hljs-number">1</span>;<br>        cin&gt;&gt;stu[i].chinese&gt;&gt;stu[i].math&gt;&gt;stu[i].english;<br>    &#125;<br>    <span class="hljs-built_in">sort</span>(stu,stu + n,cmp);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-number">5</span>;i++) cout&lt;&lt;stu[i].num&lt;&lt;<span class="hljs-string">&#x27; &#x27;</span>&lt;&lt;stu[i].chinese + stu[i].math + stu[i].english&lt;&lt;endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="附加内容"><a class="markdownIt-Anchor" href="#附加内容"></a> 附加内容</h2><p>std::sort()的平均时间复杂度是O(nlog(n))，原理是在数据量大时采用快速排序进行分段递归排序，而一旦分段后的数据量小于某个门槛，为避免快速排序的递归调用带来过大的额外负荷，就改用直接插入排序（不是插入排序）。如果递归层次过深，还会改用堆排序。</p><p>sort的速度够快，但若是追求极致速度且数据量很大，仍建议手写快速排序或归并排序。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>写这篇文章真的累死…</p><p>写了足足一个小时啊啊啊啊啊</p><p>白里个白（逃</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——四种排序</title>
    <link href="/posts/6a062b97/"/>
    <url>/posts/6a062b97/</url>
    
    <content type="html"><![CDATA[<p>在这里简单的以浅显易懂的方式写一下竞赛中常用的四种通用排序方式。</p><span id="more"></span><h2 id="冒泡排序"><a class="markdownIt-Anchor" href="#冒泡排序"></a> 冒泡排序</h2><p>大概是所有人第一次学到的排序方式，毕竟它实在是太经典了。</p><p>简单介绍一下原理：</p><blockquote><p>冒泡排序（Bubble Sort），是一种计算机科学领域的较简单的排序算法。<br>它重复地走访过要排序的元素列，依次比较两个相邻的元素，如果顺序（如从大到小、首字母从Z到A）错误就把他们交换过来。走访元素的工作是重复地进行，直到没有相邻元素需要交换，也就是说该元素列已经排序完成。<br>这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端（升序或降序排列），就如同碳酸饮料中二氧化碳的气泡最终会上浮到顶端一样，故名“冒泡排序”。<br></p><p>——来自 百度百科 <a href="https://baike.baidu.com/item/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F/4602306">冒泡排序</a></p></blockquote><p>一言以蔽之，即依次按规律交换相邻元素位置，直至不能交换为止。</p><p>知道这一点就好办了，很容易就可以写出程序：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">bubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span> </span>&#123;<br>    <span class="hljs-type">bool</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = f;i &lt; l;i++) &#123;<br>            <span class="hljs-keyword">if</span>(a[i] &gt; a[i + <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-built_in">swap</span>(a[i], a[i + <span class="hljs-number">1</span>]); <span class="hljs-comment">//交换</span><br>                flag = <span class="hljs-number">0</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(flag) <span class="hljs-keyword">break</span>; <span class="hljs-comment">//直至不能交换位置为止</span><br>        <span class="hljs-keyword">else</span> flag = <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>运行一下，成功排序。</p><h2 id="选择排序"><a class="markdownIt-Anchor" href="#选择排序"></a> 选择排序</h2><p>听名字就知道，这是一种通过“选择”来排序的算法，它通过每次选择未排序元素中的最大/最小值并与最后一个未排序元素交换位置来进行排序。</p><p>附一张原理图（来自<a href="https://www.runoob.com/w3cnote/selection-sort.html">菜鸟教程</a>）：</p><p><img src="https://img.ordchaos.com/img/2022/08/44be35da53ae9ee564ce444542a43d10.gif" alt="" /></p><p>代码依旧很简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">selectionSort</span><span class="hljs-params">(<span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = f;i &lt;= l;i++) &#123;<br>        <span class="hljs-type">int</span> max = f;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = f + <span class="hljs-number">1</span>;j &lt;= l - i;j++) &#123;<br>            <span class="hljs-keyword">if</span>(a[j] &gt; a[max]) max = j;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(a[max], a[l - i]); <span class="hljs-comment">//难道你不会写swap()?</span><br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>（甚至比冒泡都简单）</p><p>同样的，正常运行。</p><h2 id="快速排序"><a class="markdownIt-Anchor" href="#快速排序"></a> 快速排序</h2><p>非常经典的排序算法，也是公认最快的的排序算法。原理是用基准数分割，把大于/小于基准数的数放在基准数左边，其余放在右边，此时右边部分个数据皆小于/大于左边所有数据，然后对左右两边区间分别递归调用即可。</p><p>先放上代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">quickSort</span><span class="hljs-params">(<span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span> </span>&#123;<br>    <span class="hljs-type">int</span> i = f, j = l, mid = a[(f + l)/<span class="hljs-number">2</span>];<br>    <span class="hljs-keyword">do</span> &#123;<br>        <span class="hljs-keyword">while</span>(a[i] &lt; mid) i++;<br>        <span class="hljs-keyword">while</span>(a[j] &gt; mid) j--;<br>        <span class="hljs-keyword">if</span>(i &lt;= j) &#123;<br>            <span class="hljs-built_in">swap</span>(a[i], a[j]);<br>            i++;<br>            j--;<br>        &#125;<br>    &#125; <span class="hljs-keyword">while</span>(i &lt;= j);<br>    <span class="hljs-keyword">if</span>(f &lt; j) <span class="hljs-built_in">quickSort</span>(f, j);<br>    <span class="hljs-keyword">if</span>(l &gt; i) <span class="hljs-built_in">quickSort</span>(i, l);<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>分别从基准数（这里是中间数）左右两边找到第一个大于/小于基准数的元素，交换，然后继续找，直到左右的寻找范围重叠，即代表寻找完毕，递归寻找剩余区间即可。</p><p>再放一张动图了解一下原理（图片依旧来自<a href="https://www.runoob.com/w3cnote/quick-sort-2.html">菜鸟教程</a>）</p><p><img src="https://img.ordchaos.com/img/2022/08/71c0f1c0ceb0e053c423426e7f343602.gif" alt="" /></p><h2 id="归并排序"><a class="markdownIt-Anchor" href="#归并排序"></a> 归并排序</h2><p>归并排序是建立在归并操作上的一种排序算法，该算法是分治法的一个典型应用。方法是将已有序的子序列合并，得到完全有序的序列——即先使每个子序列有序，再使子序列段间有序，最常用的是二路或三路归并排序。这里给出二路归并排序的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">mergeSort</span><span class="hljs-params">(<span class="hljs-type">int</span> f, <span class="hljs-type">int</span> l)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(f == l) <span class="hljs-keyword">return</span>;<br><br>    <span class="hljs-type">int</span> mid = (f + l)/<span class="hljs-number">2</span>;<br>    <span class="hljs-built_in">mergeSort</span>(f, mid);<br>    <span class="hljs-built_in">mergeSort</span>(mid + <span class="hljs-number">1</span>, l);<br><br>    <span class="hljs-type">int</span> i = f, j = mid + <span class="hljs-number">1</span>, k = <span class="hljs-number">0</span>, r[l - f + <span class="hljs-number">1</span>]; <br>    <span class="hljs-keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= l) &#123;<br>        <span class="hljs-keyword">if</span>(a[i] &lt;= a[j]) &#123;<br>            r[k] = a[i];<br>            i++;<br>            k++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            r[k] = a[j];<br>            j++;<br>            k++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(i &lt;= mid) &#123;<br>        r[k] = a[i];<br>        i++;<br>        k++;<br>    &#125;<br>    <span class="hljs-keyword">while</span>(j &lt;= l) &#123;<br>        r[k] = a[j];<br>        j++;<br>        k++;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> p = f;p &lt;= l;p++) a[p] = r[p - f];<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>二路归并排序的原理是先以中间数为基准分割出两个子序列然后分别进行归并排序，然后对有序表进行合并，相信看代码也可以看出来。最后将临时数组的值赋给待排序数组就结束。</p><h2 id="效率测试"><a class="markdownIt-Anchor" href="#效率测试"></a> 效率测试</h2><h3 id="时间复杂度"><a class="markdownIt-Anchor" href="#时间复杂度"></a> 时间复杂度</h3><p>算法的时间复杂度是一个函数，它定性描述该算法的运行时间，常用大O来表述。若用函数f(n)描述算法执行所要时间的增长速度，用函数T(n)表示算法需要执行的运算次数存在常数c和函数f(n)，使得当n&gt;=c时T(n)&lt;=f(n)，记作T(n)=O(f(n))，其中n代表数据规模。显然，n越小，算法运行的越快。</p><p>常见时间复杂度等级如下表：</p><table><thead><tr><th style="text-align:center">分类</th><th style="text-align:center">写作</th></tr></thead><tbody><tr><td style="text-align:center">常量阶</td><td style="text-align:center">O(1)</td></tr><tr><td style="text-align:center">对数阶</td><td style="text-align:center">O(log(n))</td></tr><tr><td style="text-align:center">线性阶</td><td style="text-align:center">O(n)</td></tr><tr><td style="text-align:center">线性对数阶</td><td style="text-align:center">O(nlog(n))</td></tr><tr><td style="text-align:center">n方阶</td><td style="text-align:center">O(n<sup>n</sup>)</td></tr><tr><td style="text-align:center">指数阶</td><td style="text-align:center">O(2<sup>n</sup>)</td></tr><tr><td style="text-align:center">阶乘阶</td><td style="text-align:center">O(n!)</td></tr></tbody></table><p>以及常用算法的时间复杂度如下表：</p><table><thead><tr><th style="text-align:center">算法</th><th style="text-align:center">平均时间复杂度</th><th style="text-align:center">最好情况</th><th style="text-align:center">最坏情况</th></tr></thead><tbody><tr><td style="text-align:center">冒泡排序</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n<sup>2</sup>)</td></tr><tr><td style="text-align:center">选择排序</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n<sup>2</sup>)</td></tr><tr><td style="text-align:center">插入排序</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(n)</td><td style="text-align:center">O(n<sup>2</sup>)</td></tr><tr><td style="text-align:center">希尔排序</td><td style="text-align:center">O(nlog<sup>2</sup>(n))</td><td style="text-align:center">O(n<sup>2</sup>)</td><td style="text-align:center">O(nlog<sup>2</sup>(n))</td></tr><tr><td style="text-align:center">归并排序</td><td style="text-align:center">O(nlog(n))</td><td style="text-align:center">O(nlog(n))</td><td style="text-align:center">O(nlog(n))</td></tr><tr><td style="text-align:center">快速排序</td><td style="text-align:center">O(nlog(n))</td><td style="text-align:center">O(nlog(n))</td><td style="text-align:center">O(n<sup>2</sup>)</td></tr><tr><td style="text-align:center">堆排序</td><td style="text-align:center">O(nlog(n))</td><td style="text-align:center">O(nlog(n))</td><td style="text-align:center">O(nlog(n))</td></tr><tr><td style="text-align:center">计数排序</td><td style="text-align:center">O(n+k)</td><td style="text-align:center">O(n+k)</td><td style="text-align:center">O(n+k)</td></tr><tr><td style="text-align:center">桶排序</td><td style="text-align:center">O(n+k)</td><td style="text-align:center">O(n+k)</td><td style="text-align:center">O(n<sup>2</sup>)</td></tr><tr><td style="text-align:center">基数排序</td><td style="text-align:center">O(n×k)</td><td style="text-align:center">O(n×k)</td><td style="text-align:center">O(n×k)</td></tr></tbody></table><h3 id="测时"><a class="markdownIt-Anchor" href="#测时"></a> 测时</h3><p>除了时间复杂度，还有一种方式可以测试算法效率——对于相同的数据，直接测试算法排序用时并比较即可。使用ctime头文件中的clock()函数即可获取时间，运行前后的时间差即为运行用时。</p><p>于是有代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br><br>    default_random_engine e;<br>    <span class="hljs-function">uniform_int_distribution&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">u</span><span class="hljs-params">(<span class="hljs-number">0</span>,<span class="hljs-number">1000000</span>)</span></span>;<br>    e.<span class="hljs-built_in">seed</span>(<span class="hljs-built_in">time</span>(<span class="hljs-number">0</span>));<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) &#123;<br>        b[i] = <span class="hljs-built_in">u</span>(e);<br>    &#125;<br>    <span class="hljs-type">clock_t</span> begin, end;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) a[i] = b[i];<br>    begin = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-built_in">selectionSort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    end = <span class="hljs-built_in">clock</span>();<br>    cout&lt;&lt;<span class="hljs-string">&quot;selectionSort end&quot;</span>&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;time: &quot;</span>&lt;&lt;<span class="hljs-built_in">double</span>(end - begin) / CLOCKS_PER_SEC * <span class="hljs-number">1000</span>&lt;&lt;<span class="hljs-string">&quot;ms&quot;</span>&lt;&lt;endl&lt;&lt;endl;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) a[i] = b[i];<br>    begin = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-built_in">bubbleSort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    end = <span class="hljs-built_in">clock</span>();<br>    cout&lt;&lt;<span class="hljs-string">&quot;bubbleSort end&quot;</span>&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;time: &quot;</span>&lt;&lt;<span class="hljs-built_in">double</span>(end - begin) / CLOCKS_PER_SEC * <span class="hljs-number">1000</span>&lt;&lt;<span class="hljs-string">&quot;ms&quot;</span>&lt;&lt;endl&lt;&lt;endl;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) a[i] = b[i];<br>    begin = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-built_in">mergeSort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    end = <span class="hljs-built_in">clock</span>();<br>    cout&lt;&lt;<span class="hljs-string">&quot;mergeSort end&quot;</span>&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;time: &quot;</span>&lt;&lt;<span class="hljs-built_in">double</span>(end - begin) / CLOCKS_PER_SEC * <span class="hljs-number">1000</span>&lt;&lt;<span class="hljs-string">&quot;ms&quot;</span>&lt;&lt;endl&lt;&lt;endl;<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;i++) a[i] = b[i];<br>    begin = <span class="hljs-built_in">clock</span>();<br>    <span class="hljs-built_in">quickSort</span>(<span class="hljs-number">0</span>, n - <span class="hljs-number">1</span>);<br>    end = <span class="hljs-built_in">clock</span>();<br>    cout&lt;&lt;<span class="hljs-string">&quot;qsort end&quot;</span>&lt;&lt;endl&lt;&lt;<span class="hljs-string">&quot;time: &quot;</span>&lt;&lt;<span class="hljs-built_in">double</span>(end - begin) / CLOCKS_PER_SEC * <span class="hljs-number">1000</span>&lt;&lt;<span class="hljs-string">&quot;ms&quot;</span>&lt;&lt;endl&lt;&lt;endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>额外使用了random头文件中的函数用来生成在0到1000000间的随机数用于测试<span class="heimu" title="你知道的太多了">（我懒得写用法了，建议出门左拐Google）</span>，运行结果（可能）如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs shell">(input 100000)<br><br>selectionSort end<br>time: 2536ms<br><br>bubbleSort end<br>time: 14222ms<br><br>mergeSort end<br>time: 8ms<br><br>quickSort end<br>time: 6ms<br></code></pre></td></tr></table></figure><p>简单易懂，对吧。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>又水了一篇文（不是。</p><p>还是很开心的，因为以前都没有成功完成过归并排序与快速排序，这次写出来自我感觉非常好。</p><p>那就这样，886.</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一名初中生的 GitHub 学生包申请之路</title>
    <link href="/posts/f0f71147/"/>
    <url>/posts/f0f71147/</url>
    
    <content type="html"><![CDATA[<p>现在上百度搜索“github学生包申请”，结果要么只适用于大学生，要么就是通过各种国外社区大学的录取通知书来白嫖<span class="heimu" title="你知道的太多了">这不欺骗别人大学感情吗</span>。而作为一名初中生，显然这两种方法都不太适合：前者需要大学学籍，后者…后患无穷且麻烦，成功率也不高。这里我就分享一下我与GitHub学生包的经历以及我的申请经验，帮助更多像我一样被同样问题困扰的人。</p><h2 id="我与github学生包"><a class="markdownIt-Anchor" href="#我与github学生包"></a> 我与GitHub学生包</h2><p>小时候没有零花钱，但又想建站，于是整天在Google、百度、Youtube等等地方搜索“免费域名”、“免费空间”…一类内容。终于，让我发现了GitHub学生包这个东西。然并卵，它有年龄限制(13岁以上)，这让当时11岁的我感到弱小可怜又无助。然后我就在Youtube上看到了这个：</p><p><img src="https://img.ordchaos.com/img/2022/08/2368e4abd3e8293efde9f15a0b17ff68.png" alt="" /></p><p>哇你知道这对我的内心造成了多大的震撼吗？我立马跟着操作了一番，但是却是在最关键也是最重要的一步上卡住了——人家GitHub没有过我的申请。</p><p>后来在别的地方看见了freedom的免费域名与忘记是什么地方的免费空间，用wordpress简单做了一个博客<span class="heimu" title="你知道的太多了">懒得写博文，结果到头来一篇文章也没有</span>，这件事也就告一段落。</p><p>去年年中突然想起来这一茬，想到那一年我就13岁了，年龄限制已经跨越，我这正经学生身份还不得通过的手到擒来？然后我就上传了自己绝对真实的申请所需的一切信息，然后…又没有过。其实也不是没有过，单纯是审核了两周还一直状态显示pending，我一怒之下就撤销了申请而已<span class="heimu" title="你知道的太多了">自己不是说最多两周吗</span>，于是这件事就又被放下。</p><p>再然后又到了今年年初，又想起GitHub学生包来。我一想到我一个学生申请不到学生包就来气，于是又申请了一次。与上一次不同，上一次的材料我交的是期末成绩单，这一次是学校发的奖状。说实话，对用奖状申请这回事我是很不抱希望的，但又没想到在三天后我打开电脑例行检查进度时…</p><p><img src="https://img.ordchaos.com/img/2022/08/0de9620a54ffda05f21d78b3ac035344.png" alt="" /></p><p>一个绿底白字的Approved就这么糊到了我的脸上。哇我真的，你能理解吗就是那种，无法言表的欣喜，那种恨不得让全世界的人都知道你干成了什么的自豪感，就是这种感觉充满了我当时的脑海。没有别的原因，就是太高兴了。</p><p>附一张当时我的聊天记录：</p><p><img src="https://img.ordchaos.com/img/2022/08/358fdd234d0ad8ed4cb173ba12de0034.png" alt="" /></p><p>然后自然是各种折腾、体验<span class="heimu" title="你知道的太多了">、白嫖</span>，这些就不在这篇文章的讨论范围之内了。</p><h2 id="我的申请经验"><a class="markdownIt-Anchor" href="#我的申请经验"></a> 我的申请经验</h2><p>第一，千万不要挂梯子，尽量直连GitHub。GitHub会通过地理位置校验你是否可能真正在你所填写的学校就读，所以同样如果浏览器提示你开启地理位置就点同意。</p><p>第二，邮箱用自己的也可以，不限定教育邮箱。但是证明你学生身份的材料一定要详细真实，另外可以在How do you plan to use GitHub?(你怎么计划去使用GitHub)中附上材料的英文翻译。</p><p>第三，How do you plan to use GitHub?一定要认真填写，不要在网上随便找然后就直接粘贴上去。有能力的就直接用英语写，否则用有道翻译也行。</p><p>第四，学校信息越详细越好<span class="heimu" title="你知道的太多了">这不废话</span>，有官网的记得把官网填上<span class="heimu" title="你知道的太多了">当然要是GitHub数据库里有你的学校直接选择就完了</span>。</p><p>第五，记得每天看一下申请进度，没准它就会给你一个惊喜。</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>相信细心的各位也发现了，申请是在三月就过了的，为什么现在才发博文呢？</p><p>答案嘛…因为懒<span class="heimu" title="你知道的太多了">(逃</span></p><p>最后就以一张我现在GitHub上Profile的截图来收尾吧！</p><p><img src="https://img.ordchaos.com/img/2022/08/af1998901c6c3bc4b60f058586807bee.png" alt="" /></p>]]></content>
    
    
    <categories>
      
      <category>教程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>教程</tag>
      
      <tag>白嫖</tag>
      
      <tag>福利</tag>
      
      <tag>github</tag>
      
      <tag>学生</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一键推流工具—— BlogPusher</title>
    <link href="/posts/10824f12/"/>
    <url>/posts/10824f12/</url>
    
    <content type="html"><![CDATA[<p>近来无事，想着博客推流时的指令有好几条，于是决定写一个小工具简化这个流程<span id="more"></span><span class="heimu" title="你知道的太多了">这甚至是我第一个实用性的程序</span></p><h2 id="在此之前"><a class="markdownIt-Anchor" href="#在此之前"></a> 在此之前</h2><p>我的博客配置好后每次从本地推送源码的指令有四条：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs shell">git pull origin master<br>git add .<br>git commit -m&quot;xxxxxx&quot;<br>git push origin master<br></code></pre></td></tr></table></figure><p>这四条指令都在本地执行，所以每次推流都需要依次输入，而这显然是不方便的，于是我就想写一个能够自动执行这四条指令的工具。</p><h2 id="程序设计"><a class="markdownIt-Anchor" href="#程序设计"></a> 程序设计</h2><p>很简单，我们可以使用system()函数，其原型如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">system</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *command)</span></span>;<br></code></pre></td></tr></table></figure><p>给函数传入字符串型的命令行参数就可以在程序中执行命令，于是很容易想到执行这三条命令的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git pull origin master&quot;</span>);<br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git add .&quot;</span>);<br><span class="hljs-comment">//怎么样获取需要的commit呢？</span><br><span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git push origin master&quot;</span>);<br></code></pre></td></tr></table></figure><p>这样除了commit提交外，其他的指令都可以自动执行。但这肯定是不完善且不可用的，因为commit的提交信息需要在<code>git add</code>与<code>git push</code>之间确定而不能在<code>git push</code>之后。</p><p>于是我们需要在程序中获取commit信息，这样就可以在<code>git add</code>之后自动执行commit提交指令。很容易我们就可以想到一种方法：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string commit;<br><span class="hljs-built_in">getline</span>(cin, commit);<br>string commitInput = <span class="hljs-string">&quot;git commit -m\&quot;&quot;</span> + commit + <span class="hljs-string">&quot;\&quot;&quot;</span>;<br><span class="hljs-built_in">system</span>(commitInput.<span class="hljs-built_in">c_str</span>());<br></code></pre></td></tr></table></figure><p>但我认为这样还不够简洁，我们需要的是一行可以直接推流的指令而不是一个需要用户输入的软件，所以我们需要另一种方式——获取命令行。</p><h3 id="获取命令行"><a class="markdownIt-Anchor" href="#获取命令行"></a> 获取命令行</h3><p>一般的c++程序中，我们的main函数都是这样定义的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> </span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>但为了获取命令行参数，我们就需要像这样定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> **argv)</span> </span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>其中，argc是命令行参数的个数，argv则是一个指针数组，每个指针指向一个字符串，每个字符串是一个命令行参数。当我们执行一个可执行文件时，若是只在命令提示符中输入可执行文件的文件名，像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">BlogPusher<br></code></pre></td></tr></table></figure><p>那么argc的值就是1，而argv[0]的值就是BlogPusher，而若是在命令提示符中输入可执行文件的文件名和参数，像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">BlogPusher Update About<br></code></pre></td></tr></table></figure><p>此时argc的值就是3，argv[0]的值仍是BlogPusher，但后面argv[1]的值则会是Update，argv[2]的值是About。</p><p>所以，我们就可以这样获取到我们需要的commit信息了。</p><h3 id="commit信息处理"><a class="markdownIt-Anchor" href="#commit信息处理"></a> Commit信息处理</h3><p>光是获取还不够，现在我们需要处理我们获取到的参数。在刚刚的例子中，我们可以看到argv数组的分割是以空格为基础的，但commit中可以包含空格，这就使得直接使用argv[1]是不可行的。</p><p>所以，我们需要一种方法来处理commit信息，使其可以正确包含空格。其实很简单，只需要加入一个循环，每次循环获取一个字符串并把它放入字符串commit中，在每一个字符串之间加入空格即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp">string commit;<br>    string commit;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; argc; i++)&#123;<br>        commit += argv[i];<br>        <span class="hljs-keyword">if</span>(i != argc - <span class="hljs-number">1</span>)&#123;<br>            commit += <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><p>加了一个判断，使得程序不会给commit信息加入多余的空格。现在，commit信息就可以正确的包含空格了。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>所有程序合在一起差不多是这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span>&#123;<br>    string commit;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; argc; i++)&#123;<br>        commit += argv[i];<br>        <span class="hljs-keyword">if</span>(i != argc - <span class="hljs-number">1</span>)&#123;<br>            commit += <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    string commitInput = <span class="hljs-string">&quot;git commit -m\&quot;&quot;</span> + commit + <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git pull origin master&quot;</span>);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git add .&quot;</span>);<br>    cout&lt;&lt;<span class="hljs-string">&quot;git add success&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">system</span>(commitInput.<span class="hljs-built_in">c_str</span>());<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git push origin master&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>编译，放入博客源码文件夹下。注意此时不要忘记在.gitignore中添加一行<code>blogpusher.*</code>，防止git上传时上传blogpusher文件。</p><p>在命令提示符中输入<code>blogpusher Update .gitignore</code>，测试一下，非常完美！</p><p>最后优化一下，差不多像这样：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>** argv)</span></span>&#123;<br>    string commit;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; argc; i++)&#123;<br>        commit += argv[i];<br>        <span class="hljs-keyword">if</span>(i != argc - <span class="hljs-number">1</span>)&#123;<br>            commit += <span class="hljs-string">&quot; &quot;</span>;<br>        &#125;<br>    &#125;<br>    string commitInput = <span class="hljs-string">&quot;git commit -m\&quot;&quot;</span> + commit + <span class="hljs-string">&quot;\&quot;&quot;</span>;<br>    cout&lt;&lt;<span class="hljs-string">&quot;==========BEGIN PULL==========&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git pull origin master&quot;</span>);<br>    cout&lt;&lt;<span class="hljs-string">&quot;==========BEGIN ADD==========&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git add .&quot;</span>);<br>    cout&lt;&lt;<span class="hljs-string">&quot;git add success&quot;</span>&lt;&lt;endl;<br>    cout&lt;&lt;<span class="hljs-string">&quot;==========BEGIN COMMIT==========&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">system</span>(commitInput.<span class="hljs-built_in">c_str</span>());<br>    cout&lt;&lt;<span class="hljs-string">&quot;==========BEGIN PUSH==========&quot;</span>&lt;&lt;endl;<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;git push origin master&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>大功告成！</p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>这个东西很早就想做了的说…现在做出来了还是十分欣慰。</p><p>程序已经开源到了<a href="https://github.com/OrdChaos/BlogPusher">github</a>，欢迎查看。若是帮到了您的话，麻烦点个star，谢谢。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
      <tag>github</tag>
      
      <tag>开源软件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——二叉树</title>
    <link href="/posts/340b325e/"/>
    <url>/posts/340b325e/</url>
    
    <content type="html"><![CDATA[<h2 id="二叉树binary-treebt"><a class="markdownIt-Anchor" href="#二叉树binary-treebt"></a> 二叉树binary tree,BT</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><ul><li>一种特殊的树形结构，是度数为2的树。即二叉树的每个节点最多具有两个子节点，每个节点的字节点分别称为左孩子、右孩子，子树则为左子树，右子树。</li><li>二叉树可以为空且一定有序。</li><li>在二叉树的第i层上至多有2<sup>i</sup>个节点(i&gt;=0)。</li><li>深度为m的二叉树上至多有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>1</mn><mo>−</mo><msup><mn>2</mn><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><mn>2</mn></mrow></mfrac><mo>=</mo><msup><mn>2</mn><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">\frac{1-2^{m+1}}{1-2}=2^{m+1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4212509999999998em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mtight">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个节点(m&gt;=0)，一棵深度为m且有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msup><mn>2</mn><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^{m+1}-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>个节点的二叉树被称为满二叉树。</li><li>每一个节点都与深度为m的满二叉树中编号为1~n的节点一一对应的深度为m，有n个节点的二叉树被称为完全二叉树。</li><li>对于任意一棵二叉树，若其有n<sub>0</sub>个叶节点，n<sub>2</sub>个度为2的节点，则一定有n<sub>0</sub>=n<sub>2</sub>+1。</li><li>具有n个节点的完全二叉树的深度是<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mrow><mo fence="true">(</mo><msub><mo><mi>log</mi><mo>⁡</mo></mo><mn>2</mn></msub><mi>n</mi><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">floor\left( \log _2n \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mop"><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.20696799999999996em;"><span style="top:-2.4558600000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.24414em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span>。</li><li>在有n个节点的完全二叉树中，对于编号为i的节点：<ul><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">i=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则其无父节点，为根节点，否则其父节点编号为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mi>l</mi><mi>o</mi><mi>o</mi><mi>r</mi><mrow><mo fence="true">(</mo><mfrac><mi>i</mi><mn>2</mn></mfrac><mo fence="true">)</mo></mrow></mrow><annotation encoding="application/x-tex">floor\left( \frac{i}{2} \right)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.205674em;vertical-align:-0.35001em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size1">(</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.855664em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size1">)</span></span></span></span></span></span>。</li><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>&gt;</mo><mi>n</mi></mrow><annotation encoding="application/x-tex">2i&gt;n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span>，则i为叶节点，否则其左孩子的编号为2i。</li><li>若<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mn>2</mn><mi>i</mi><mo>&lt;</mo><mi>n</mi><mo>&lt;</mo><mn>2</mn><mi>i</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2i&lt;n&lt;2i+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69862em;vertical-align:-0.0391em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord">2</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>，则i无右孩子，否则其右孩子的编号为2i+1。</li></ul></li></ul><p>如下图即二叉树示意图：</p><p><img src="https://img.ordchaos.com/img/2022/08/8afad25dfbf7ac9ca2c9daf5571ada44.jpg" alt="" /></p><h3 id="存储结构"><a class="markdownIt-Anchor" href="#存储结构"></a> 存储结构</h3><h4 id="单链表结构"><a class="markdownIt-Anchor" href="#单链表结构"></a> 单链表结构</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> data; <span class="hljs-comment">//数据域</span><br>    node* lc, rc; <span class="hljs-comment">//分别指向左孩子于右孩子</span><br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bt</span> &#123;<br>    node* root;<br>&#125;t;<br></code></pre></td></tr></table></figure><p>与树一样，其实就是孩子表示法。</p><h4 id="双链表结构"><a class="markdownIt-Anchor" href="#双链表结构"></a> 双链表结构</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> data; <span class="hljs-comment">//数据域</span><br>    node* lc, rc; <span class="hljs-comment">//分别指向左孩子于右孩子</span><br>    node* father; <span class="hljs-comment">//指向父节点</span><br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">bt</span> &#123;<br>    node* root;<br>&#125;t;<br></code></pre></td></tr></table></figure><p>同理，其实就是父亲孩子表示法。</p><h3 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h3><ul><li>先序遍历（输出-&gt;左孩子-&gt;右孩子）</li><li>中序遍历（左孩子-&gt;输出-&gt;右孩子）</li><li>后序遍历（左孩子-&gt;右孩子-&gt;输出）</li></ul><h3 id="普通树转二叉树"><a class="markdownIt-Anchor" href="#普通树转二叉树"></a> 普通树转二叉树</h3><ol><li>对于每一个节点，去除除最左边的树枝之外的所有树枝。</li><li>从最左边的节点开始，依次次将同层的每个兄弟节点横向相连。</li><li>以根节点为中心，将图形顺时针旋转约45°。</li></ol><p>如下图所示：</p><p><img src="https://img.ordchaos.com/img/2022/08/94e52afbeee2c0f679ae8a88201b6e1b.jpg" alt="" /></p><h3 id="树的计数"><a class="markdownIt-Anchor" href="#树的计数"></a> 树的计数</h3><p>具有n(n&gt;=1且n为整数)个节点的二叉树的种类的数量可以用下方的函数来表示：</p><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>f</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo fence="true">)</mo></mrow><mo>=</mo><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msubsup><mo>∑</mo><mrow><mi>i</mi><mo>=</mo><mn>0</mn></mrow><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msubsup><mrow><mi>f</mi><mrow><mo fence="true">(</mo><mi>i</mi><mo fence="true">)</mo></mrow><mo>⋅</mo><mi>f</mi><mrow><mo fence="true">(</mo><mi>n</mi><mo>−</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo fence="true">)</mo></mrow></mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo fence="true">(</mo><mi>n</mi><mo>&gt;</mo><mn>1</mn><mo fence="true">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mn>1</mn></mstyle></mtd><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mo fence="true">(</mo><mn>0</mn><mo>⩽</mo><mi>n</mi><mo>⩽</mo><mn>1</mn><mo fence="true">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">f\left( n \right) =\begin{cases}\sum_{i=0}^{n-1}{f\left( i \right) \cdot f\left( n-i-1 \right)}&amp;\left( n&gt;1 \right)\\1&amp;\left( 0\leqslant n\leqslant 1 \right)\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mop"><span class="mop op-symbol small-op" style="position:relative;top:-0.0000050000000000050004em;">∑</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.954008em;"><span style="top:-2.40029em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">i</span><span class="mrel mtight">=</span><span class="mord mtight">0</span></span></span></span><span style="top:-3.2029em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.29971000000000003em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">i</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span><span class="arraycolsep" style="width:1em;"></span><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩽</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">1</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>这是第二篇学习笔记，上一篇可以点击<a href="https://www.ordchaos.com/posts/d4140423/">这里</a>查看。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习笔记——树</title>
    <link href="/posts/d4140423/"/>
    <url>/posts/d4140423/</url>
    
    <content type="html"><![CDATA[<h2 id="树tree"><a class="markdownIt-Anchor" href="#树tree"></a> 树tree</h2><h3 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h3><ul><li>由n(n&gt;0)个元素组成的有限结合，是一种非线性的有序结构。</li><li>每一个其中的元素都被称为结点，除根节点外，其余节点组成的子集称为子树。</li><li>一棵树由根节点与结点组成，除根节点外每个节点都有前驱结点。一棵树至少有一个节点，此时，该节点即为根节点。换而言之，每棵树有且仅有一个根节点。在一个m层k叉数中最多有<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mfrac><mrow><mn>1</mn><mo>−</mo><msup><mi>k</mi><mrow><mi>m</mi><mo>+</mo><mn>1</mn></mrow></msup></mrow><mrow><mn>1</mn><mo>−</mo><mi>k</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">\frac{1-k^{m+1}}{1-k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.4212509999999998em;vertical-align:-0.403331em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mbin mtight">−</span><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">m</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.403331em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span>个节点(k&gt;=1, m&gt;=0)。</li><li>树是递归定义的，即在一棵子树中，其根节点同样在树中作为结点。</li><li>一个节点的子树个数称为这个节点的度(degree)。度为零的节点称为叶节点(leaf)，不为零的节点称为分支节点（包括根节点），根以外的分支节点被称为内部节点。一棵树中度最大的节点的度被称为这棵树的度。</li><li>树状结构的图形中，连接两个相关联的结点的线段称位树枝。上端节点为下端节点的父节点，相对应的下端节点为上端节点的子节点，同一个父节点的所有子节点互为兄弟结点。从根节点出发到某个子节点所经过的所有节点均为该子节点的祖先，同理，此此节点为其所有祖先的子孙。</li><li>一棵树中根节点的层次(level)为0，其余的节点的层次为其父节点的层次加1。与度一样，树中层次最大的节点的层级被称为树的深度(depth)。</li><li>在树中，从一个节点出发，自上而下的沿着节点与树枝可以到达另一节点，则称它们间存在一条路径（所以显而易见不同子树上的节点间不存在路径）。用路径上的节点个数减一（即树枝个数，或是用层级较大的节点的层数减去较小的节点的层数）表示路径长度。</li><li>互不相交的数的集合称为森林，即森林是m棵互不相交的树的集合。</li></ul><p>如下图即为一颗经典的树：</p><p><img src="https://img.ordchaos.com/img/2022/08/f692686c7dfbe8272a3cc794862a4b2b.jpg" alt="" /></p><h3 id="存储结构"><a class="markdownIt-Anchor" href="#存储结构"></a> 存储结构</h3><h4 id="父亲表示法"><a class="markdownIt-Anchor" href="#父亲表示法"></a> 父亲表示法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_LENGTH 10 <span class="hljs-comment">//最大节点数</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123; <span class="hljs-comment">//定义节点</span><br>    <span class="hljs-type">int</span> data, father; <span class="hljs-comment">//作用域与指针域</span><br>&#125;tree[MAX_LENGTH]; <span class="hljs-comment">//定义树</span><br></code></pre></td></tr></table></figure><p>这种方法容易找到树根，但是找孩子就需要遍历整个线性表，即时间换空间</p><h4 id="孩子表示法"><a class="markdownIt-Anchor" href="#孩子表示法"></a> 孩子表示法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_DEGREE 10 <span class="hljs-comment">//最大度数</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> data; <span class="hljs-comment">//数据域</span><br>    node* children[MAX_DEGREE]; <span class="hljs-comment">//指向若干个子节点的指针域</span><br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tree</span> &#123;<br>    node* root;<br>&#125;t;<br></code></pre></td></tr></table></figure><p>这种方法不可以从子节点返回父节点</p><h4 id="父亲孩子表示法"><a class="markdownIt-Anchor" href="#父亲孩子表示法"></a> 父亲孩子表示法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX_DEGREE 10 <span class="hljs-comment">//最大度数</span></span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> data; <span class="hljs-comment">//数据域</span><br>    node* children[MAX_DEGREE], father; <span class="hljs-comment">//指向若干个子节点的指针域</span><br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tree</span> &#123;<br>    node* root;<br>&#125;t;<br></code></pre></td></tr></table></figure><p>是孩子表示法的优化版，可以直接访问任意子节点的父节点，是一种空间换时间的方法</p><h4 id="孩子兄弟表示法"><a class="markdownIt-Anchor" href="#孩子兄弟表示法"></a> 孩子兄弟表示法</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> data; <span class="hljs-comment">//数据域</span><br>    node* firstChild, next; <span class="hljs-comment">//分别指向第一个子节点与下一个兄弟节点</span><br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">tree</span> &#123;<br>    node* root;<br>&#125;t;<br></code></pre></td></tr></table></figure><h4 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h4><p><strong>这些方法没有好坏之分，应当视情况选用</strong></p><h3 id="遍历"><a class="markdownIt-Anchor" href="#遍历"></a> 遍历</h3><ul><li>先序遍历（深度优先搜索dfs，从左至右先输出再搜索）</li><li>后序遍历（深度优先搜索dfs，从左至右先搜索到叶节点再依次输出并回溯）</li><li>层次遍历（广度优先搜索bfs，按层次从左至右搜索，搜索完一层后搜索下一层）</li><li>叶节点遍历（按先序遍历的方法遍历，但只访问叶节点）</li></ul><h2 id="题外话"><a class="markdownIt-Anchor" href="#题外话"></a> 题外话</h2><p>这玩意是放暑假前在学校无聊看《信息学奥赛一本通》写的，大概还是有参考价值的吧。</p><p>另外还有一篇二叉树的，大概也会发上来。</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About Choir</title>
    <link href="/posts/79cc3297/"/>
    <url>/posts/79cc3297/</url>
    
    <content type="html"><![CDATA[<p>Hello everybody! I’m <span class="heimu" title="这是可以说的吗">我的姓名</span>, and you can also call me by my English name OrderChaos / OrdChaos. Today, I want to tell you something about chorus there. Yes, I know you may hate the chorus class in the noon, but please don’t hate the chorus itself.</p><p>Chorus refers to the art category of collective singing of multi-voice vocal works. It requires a high degree of unity of single voice and harmony of melody between voices. It is one of the most popular and widely participated forms of music performance. As the expressive tool of chorus art, the human voice has its unique advantages, which can most directly express the thoughts and emotions in the musical works and stimulate the emotional resonance of the audience.</p><p>There are many types of chorus. In terms of voice and timbre, it is divided into two types: unison and chorus. Singing in unison refers to a chorus form in which all chorus members sing the same tune together regardless of their voices. It is often used in mass singing activities and can also be used in some fragments of chorus. Chorus refers to the superposition or contrast of two or more different parts of the chorus. It is one of the most typical forms of chorus. And from the accompaniment form, it is divided into two forms: a cappella and accompaniment. “A cappella” means to sung without instrumental accompaniment. It is a purely vocal art form. For example, the song 半个月亮爬上来 we have learned is an a cappella song. In contrast, accompaniment chorus is a form of chorus with accompaniment. Whether it is harmony, mode, dynamics, speed, or style, mood, and performance, they must be unified into the overall work as required.</p><p>Most of the choral songs are sung by the choir. A choir usually has a conductor with others who sing songs. Don’t think that the conductors just need to wave their hands, in fact they should do the things that much more complicated than this. For example, the free extension mark and the fade out mark in the score need to be controlled by the overall situation by the conductor, otherwise the song will become very discordant. Songs with weak or strong rhythm also need conductor to beat the rhythm, songs with different emphasis and emphasis also need to be reminded by the conductor. The coordination of multiple voices is also very important, a little attention will be taken out of tune, so everyone should use their own free time to practice – not make up the number.</p><p>Having said so much, I should also play a chorus song to listen to it, right? Let’s listen to 启程 sung by the <em>Globe Jinshengyuzhen Choir</em> (金声玉振合唱团). This is a new song learned this term - why do I know? Because I am a member of it.</p><p>(Play the music at this time)</p><p>(Say this while playing the intro) By the way, this was originally one of the most popular graduation songs for Japanese middle school students called 旅立ちの日に(Roman: Tabidachinohini), which was widely circulated in Japan. And <em>Globe Jinshengyuzhen Choir</em> have sung its Chinese version.</p><p>(Intro will be end at this time)</p><p>(While the song play finished, wait)</p><p>This song has not been officially announced yet. If you want to listen to the full version, please pay attention to the school’s WeChat public account.</p><p>OK! That’s all of my speech. Thank you for your to the full version, please pay . And now, I have a very easy question to ask you: Which country is the song 启程 come from?</p><p>(Answer: Japan | Say: Gerat! Thank you for your answer!) OK, that’s really all, thank you again!</p>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
      <category>音乐</category>
      
    </categories>
    
    
    <tags>
      
      <tag>演讲稿</tag>
      
      <tag>纯英文</tag>
      
      <tag>English</tag>
      
      <tag>合唱</tag>
      
      <tag>音乐</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 链表实现队列</title>
    <link href="/posts/6270475f/"/>
    <url>/posts/6270475f/</url>
    
    <content type="html"><![CDATA[<p>之前介绍了数组队列的实现方法，若是没有看过建议<a href="https://www.ordchaos.com/posts/da7075f0/">去看看</a>，这次来介绍如何用链表实现队列。</p><span id="more"></span><h2 id="概念引入"><a class="markdownIt-Anchor" href="#概念引入"></a> 概念引入</h2><p>首先让我们了解一下什么是链表：</p><blockquote><p>链表是一种物理存储单元上非连续、非顺序的存储结构，数据元素的逻辑顺序是通过链表中的指针链接次序实现的。链表由一系列结点（链表中每一个元素称为结点）组成，结点可以在运行时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。<br />——百度百科 <a href="https://baike.baidu.com/item/%E9%93%BE%E8%A1%A8/9794473">链表</a></p></blockquote><p>所以，首先我们需要定义一个链表出来。</p><h2 id="结构搭建"><a class="markdownIt-Anchor" href="#结构搭建"></a> 结构搭建</h2><p>其实基本一样，不过这次要定义两个结构，一个是节点，一个是队列本身:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> v;<br>    node * next;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myqueue</span> &#123;<br>    node * first;<br>    node * last;<br>&#125;;<br></code></pre></td></tr></table></figure><p>对于每一个节点，我们需要它储存一个数据与其下一个节点的地址，分别储存在int型变量v与node型指针next中。</p><p>而后对于每一个队列或者是链表，我们需要储存其第一个与最后一个节点的地址，分别放在first与last中。</p><p>结构体定义完后，同样的初始化：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    t-&gt;first = t-&gt;last = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>这里让队列的首项与尾项同时为NULL，完成初始化</p><p>之后是数据操作的isempty函数，先行判断队列是否为空:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isempty</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(t-&gt;last == <span class="hljs-literal">NULL</span> &amp;&amp; t-&gt;first == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>原理很简单，如果队列的尾项与首项都为NULL，则显然此队列为空。</p><p>之后是push函数，将一个数据推入队列的最后:</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(myqueue *t, <span class="hljs-type">int</span> s)</span> </span>&#123;<br>    node * temp = <span class="hljs-keyword">new</span> node;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>(t)) t-&gt;first = t-&gt;last = temp;<br>    <span class="hljs-keyword">else</span> &#123;<br>        t-&gt;last-&gt;next = temp;<br>        t-&gt;last = t-&gt;last-&gt;next;<br>    &#125;<br>    temp-&gt;v = s;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>创建一个空节点，如果队列为空，则作为首项与尾项，否则作为尾项的下一项，然后给其赋值即可。</p><p>第二个是pop函数，删除队列首项，注意先判断队列是否为空：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(t-&gt;first == t-&gt;last) &#123;<br>        <span class="hljs-built_in">free</span>(t-&gt;first);<br>        <span class="hljs-built_in">init</span>(t);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node * temp = t-&gt;first;<br>        t-&gt;first = t-&gt;first-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>若pop完队列为空则调用init函数重新化为空队列，否则将首项改为首项的下一项，但记住无论如何都要调用free函数释放原先首项的空间，节省内存。</p><p>再就是获取队列的首项、尾项、第n项以及长度，代码相对简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getf</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span> t-&gt;first-&gt;v;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getl</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span> t-&gt;last-&gt;v;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getlength</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> length;<br>    node * temp = t-&gt;first;<br>    <span class="hljs-keyword">for</span>(length = <span class="hljs-number">1</span>;;length++) &#123;<br>        <span class="hljs-keyword">if</span>(temp == t-&gt;last) <span class="hljs-keyword">break</span>;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br></code></pre></td></tr></table></figure><p>特别注意若队列为空，则不应当返回队列所谓的首项与尾项。</p><p>对于长度的获取，只需要遍历整个队列，直到搜索到队列尾项再输出长度即可。</p><h2 id="解决问题"><a class="markdownIt-Anchor" href="#解决问题"></a> 解决问题</h2><p>与之前的问题是一样的，搭建的框架也很相似，故而解答同样基本一致。</p><h3 id="问题背景"><a class="markdownIt-Anchor" href="#问题背景"></a> 问题背景</h3><p>有n(n &lt;= 100)个小朋友排队打针，他们每个人都有依次自己的编号为1, 2, 3, 4, …, n。他们都很害怕打针，所以当排在自己前面的小朋友打针时就会跑走到队伍最后。试设计一程序，输入小朋友数量，输出他们打针的顺序。</p><p>样例输入：5<br />样例输出：1 3 5 4 2</p><h3 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h3><p>略，可以参考<a href="https://www.ordchaos.com/posts/da7075f0/">之前的文章</a>。</p><p>注意这一次是使用指针来访问队列的，故而此次的程序与上次有略微区别。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    myqueue test;<br>    <span class="hljs-built_in">init</span>(&amp;test);<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) <span class="hljs-built_in">push</span>(&amp;test, i); <span class="hljs-comment">//编号依次入队</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;!<span class="hljs-built_in">isempty</span>(&amp;test);i++) &#123;<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//如果是第偶数个打针的，排到最后</span><br>            <span class="hljs-type">int</span> temp = <span class="hljs-built_in">getf</span>(&amp;test);<br>            <span class="hljs-built_in">pop</span>(&amp;test);<br>            <span class="hljs-built_in">push</span>(&amp;test, temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果是第奇数个打针的，输出后出队</span><br>            cout&lt;&lt;<span class="hljs-built_in">getf</span>(&amp;test)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">pop</span>(&amp;test);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="queue类型"><a class="markdownIt-Anchor" href="#queue类型"></a> queue类型</h2><p>这里对于队列的编写其实还是为了学习与方便理解，事实上可以方便的在引用了头文件queue后直接定义队列，更加方便，竞赛或开发时也更加节省时间。</p><p>使用格式如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span> <span class="hljs-comment">//引用头文件，若使用万能库可忽略</span></span><br>queue&lt;<span class="hljs-type">int</span>&gt; Q; <span class="hljs-comment">//定义一个int型队列，名称为Q，当然也可以是别的类型与别的名称</span><br>Q.<span class="hljs-built_in">empty</span>(); <span class="hljs-comment">//返回队列Q是否为空</span><br>Q.<span class="hljs-built_in">size</span>(); <span class="hljs-comment">//返回队列Q长度</span><br>Q.<span class="hljs-built_in">front</span>(); <span class="hljs-comment">//返回队列Q的第一个元素</span><br>Q.<span class="hljs-built_in">back</span>(); <span class="hljs-comment">//返回队列Q的最后一个元素</span><br>Q.<span class="hljs-built_in">push</span>(); <span class="hljs-comment">//在队列Q后面插入一个元素, 比如插入数字5: Q.push(5)</span><br>Q.<span class="hljs-built_in">pop</span>(); <span class="hljs-comment">//从队列Q里移出第一个元素</span><br></code></pre></td></tr></table></figure><p>下面给出使用queue队列的同样问题的解答，请读者自行参考：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    queue&lt;<span class="hljs-type">int</span>&gt; test;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) test.<span class="hljs-built_in">push</span>(i);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;!test.<span class="hljs-built_in">empty</span>();i++) &#123;<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-type">int</span> temp = test.<span class="hljs-built_in">front</span>();<br>            test.<span class="hljs-built_in">pop</span>();<br>            test.<span class="hljs-built_in">push</span>(temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            cout&lt;&lt;test.<span class="hljs-built_in">front</span>()&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            test.<span class="hljs-built_in">pop</span>();<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>本次完整代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span> &#123;<br>    <span class="hljs-type">int</span> v;<br>    node * next;<br>&#125;;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myqueue</span> &#123;<br>    node * first;<br>    node * last;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    t-&gt;first = t-&gt;last = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isempty</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(t-&gt;last == <span class="hljs-literal">NULL</span> &amp;&amp; t-&gt;first == <span class="hljs-literal">NULL</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(myqueue *t, <span class="hljs-type">int</span> s)</span> </span>&#123;<br>    node * temp = <span class="hljs-keyword">new</span> node;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>(t)) t-&gt;first = t-&gt;last = temp;<br>    <span class="hljs-keyword">else</span> &#123;<br>        t-&gt;last-&gt;next = temp;<br>        t-&gt;last = t-&gt;last-&gt;next;<br>    &#125;<br>    temp-&gt;v = s;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span>;<br>    <span class="hljs-keyword">if</span>(t-&gt;first == t-&gt;last) &#123;<br>        <span class="hljs-built_in">free</span>(t-&gt;first);<br>        <span class="hljs-built_in">init</span>(t);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        node * temp = t-&gt;first;<br>        t-&gt;first = t-&gt;first-&gt;next;<br>        <span class="hljs-built_in">free</span>(temp);<br>    &#125;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getf</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span> t-&gt;first-&gt;v;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getl</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(!<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span> t-&gt;last-&gt;v;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getlength</span><span class="hljs-params">(myqueue *t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> length;<br>    node * temp = t-&gt;first;<br>    <span class="hljs-keyword">for</span>(length = <span class="hljs-number">1</span>;;length++) &#123;<br>        <span class="hljs-keyword">if</span>(temp == t-&gt;last) <span class="hljs-keyword">break</span>;<br>        temp = temp-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> length;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    myqueue test;<br>    <span class="hljs-built_in">init</span>(&amp;test);<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) <span class="hljs-built_in">push</span>(&amp;test, i); <span class="hljs-comment">//编号依次入队</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;!<span class="hljs-built_in">isempty</span>(&amp;test);i++) &#123;<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//如果是第偶数个打针的，排到最后</span><br>            <span class="hljs-type">int</span> temp = <span class="hljs-built_in">getf</span>(&amp;test);<br>            <span class="hljs-built_in">pop</span>(&amp;test);<br>            <span class="hljs-built_in">push</span>(&amp;test, temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果是第奇数个打针的，输出后出队</span><br>            cout&lt;&lt;<span class="hljs-built_in">getf</span>(&amp;test)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">pop</span>(&amp;test);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">/* 使用queue队列的版本</span><br><span class="hljs-comment">int main() &#123;</span><br><span class="hljs-comment">    queue&lt;int&gt; test;</span><br><span class="hljs-comment">    int n;</span><br><span class="hljs-comment">    cin&gt;&gt;n;</span><br><span class="hljs-comment">    for(int i = 1;i &lt;=n;i++) test.push(i);</span><br><span class="hljs-comment">    for(int i = 1;!test.empty();i++) &#123;</span><br><span class="hljs-comment">        if(i%2 == 0) &#123;</span><br><span class="hljs-comment">            int temp = test.front();</span><br><span class="hljs-comment">            test.pop();</span><br><span class="hljs-comment">            test.push(temp);</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">        else &#123;</span><br><span class="hljs-comment">            cout&lt;&lt;test.front()&lt;&lt;&quot; &quot;;</span><br><span class="hljs-comment">            test.pop();</span><br><span class="hljs-comment">        &#125;</span><br><span class="hljs-comment">    &#125;</span><br><span class="hljs-comment">    return 0;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>适合自己的路</title>
    <link href="/posts/ab8676cc/"/>
    <url>/posts/ab8676cc/</url>
    
    <content type="html"><![CDATA[<p>看到他人的东西，觉得好自己买来，却并非如想象一般；看到他人制定了良好的学习计划，照搬过来，自己却完全无法实施；看到他人读了书，受益颇多，自己却无法读懂……这样的事件可能不常有，但总会在生活中不时发生。所以也就告诉了我们，适合他人的不一定适合自己。</p><p>我曾为提升自己而参考了他人的计划表准备施行于自己的日常生活之中，但不到三天便就放弃。无论是其中的两小时阅读时间，半小时健身亦或是额外的课外学习都远非我的课余时间可以容纳。计划不仅没有起到提升自己的作用，且打乱了我本稳定的作息，使我在那几天中萎靡不振，自然可以看出照搬他人经验是如此无用。“长者不为有余，短者不为不足”，长与短各有价值，没有高低贵贱之分，适合自己的远比他人的、华丽的、不切实际的好得多。自己的目标，自己的计划，也总是比他人的更贴合自己的要求。</p><p>鲁迅弃医从文，向全世界证明笔比手术刀更尖锐，最终成为世人铭记的文学大师；李白离开黑暗官场，漂泊天涯。一句“安能摧眉折腰事权贵，叫我不得开心颜。”让他领悟了人生的真谛；奥托-瓦拉赫放弃父母所选的文学，油画，而投身于化学，成为享誉全球的化学巨头……他们的人生都因为选择了自己的路而变得独特。若是没有选择适合自己的目标，他们也不会有如此的成就。</p><p>“尺有所短，寸有所长。”我们也要找到自己擅长的方面，发扬自己的长处，令自身拥有几个闪光点，不应见到他人便现慕他人的优点，因为自己也定有些地方远非他可以企及。世上的事业千千万万，只有适合自己的才是最好的。人无完人，故而所有人都需要认清自己的强项和弱势，看清自己，找准位置，均衡发展，从而更好的立足于社会之中。</p><p>“凫胫虽短，续之则忧，鹤胫虽长，断之则悲。”唯有找到自身定位，确定自我目标，制定自己的计划并为之付出汗水；践行思齐，见不贤而内自省，不断完善与提高自己；善假于物，发展自身特长，才能走上适合自己的路，取得令自身真正为之骄傲的成就。自己的人生需要自己演绎，自己的生活该有自己的选择。选择最适合自己的，才能活出自己的样子，活出自己的精彩。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>三角形覆盖正方形的研究</title>
    <link href="/posts/4996fe6c/"/>
    <url>/posts/4996fe6c/</url>
    
    <content type="html"><![CDATA[<h2 id="命题"><a class="markdownIt-Anchor" href="#命题"></a> 命题</h2><p><img src="https://img.ordchaos.com/img/2022/08/f80ab46950ac64d5ac005a11272a170b.png" alt="" /></p><p>如图1.0.1，等腰三角形GCD与正方形ABCD共边CD；CG、DG分别交AB于点E、点F. 则问不断增加等腰三角形GCD的高，能否使等腰三角形GCD完全覆盖住正方形ABCD？</p><h2 id="证明证伪"><a class="markdownIt-Anchor" href="#证明证伪"></a> 证明/证伪</h2><p>设正方形边长为a，三角形GCD的高为x，四边形EFCD的面积为y</p><h3 id="方法一"><a class="markdownIt-Anchor" href="#方法一"></a> 方法一</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mtext>是正方形</mtext><mspace linebreak="newline"></mspace><mo>∴</mo><mi mathvariant="normal">∠</mi><mi>A</mi><mo>=</mo><mi mathvariant="normal">∠</mi><mi>B</mi><mo>=</mo><mn>90</mn><mi mathvariant="normal">°</mi><mtext>，</mtext><mi>A</mi><mi>B</mi><mi mathvariant="normal">⊥</mi><mi>A</mi><mi>C</mi><mtext>于点</mtext><mi>A</mi><mtext>且</mtext><mi mathvariant="normal">⊥</mi><mi>B</mi><mi>D</mi><mtext>于点</mtext><mi>B</mi><mtext>，</mtext><mi>A</mi><mi>B</mi><mtext>//</mtext><mi>C</mi><mi>D</mi><mspace linebreak="newline"></mspace><mo>∴</mo><mo>△</mo><mi>A</mi><mi>E</mi><mi>C</mi><mtext>与</mtext><mo>△</mo><mi>B</mi><mi>F</mi><mi>D</mi><mtext>都是直角三角形，其中</mtext><mi mathvariant="normal">∠</mi><mi>A</mi><mo>=</mo><mi mathvariant="normal">∠</mi><mi>B</mi><mo>=</mo><mn>90</mn><mi mathvariant="normal">°</mi><mtext>，且</mtext><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>∽</mtext><mo>△</mo><mi>G</mi><mi>E</mi><mi>F</mi><mspace linebreak="newline"></mspace><mtext>又</mtext><mo>∵</mo><mtext>三角形</mtext><mi>G</mi><mi>E</mi><mi>F</mi><mtext>的高是</mtext><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mi>a</mi><mo fence="true">)</mo></mrow><mtext>，三角形</mtext><mi>G</mi><mi>C</mi><mi>D</mi><mtext>的高是</mtext><mi>x</mi><mspace linebreak="newline"></mspace><mo>∴</mo><mi>E</mi><mi>F</mi><mo>:</mo><mi>C</mi><mi>D</mi><mo>=</mo><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mi>a</mi><mo fence="true">)</mo></mrow><mo>:</mo><mi>x</mi><mspace linebreak="newline"></mspace><mo>∴</mo><mrow><mi mathvariant="normal">E</mi><mi mathvariant="normal">F</mi></mrow><mo>=</mo><mrow><mi mathvariant="normal">C</mi><mi mathvariant="normal">D</mi></mrow><mfrac><mrow><mi>x</mi><mo>−</mo><mi>a</mi></mrow><mi>x</mi></mfrac><mo>=</mo><mfrac><mrow><mi>a</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mi>a</mi><mo fence="true">)</mo></mrow></mrow><mi>x</mi></mfrac><mo>=</mo><mfrac><mrow><mi>a</mi><mi>x</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow><mi>x</mi></mfrac><mo>=</mo><mi>a</mi><mo>−</mo><mfrac><msup><mi>a</mi><mn>2</mn></msup><mi>x</mi></mfrac><mspace linebreak="newline"></mspace><mo>∴</mo><mi>A</mi><mi>E</mi><mo>=</mo><mi>B</mi><mi>F</mi><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mrow><mo fence="true">(</mo><mi>A</mi><mi>B</mi><mo>−</mo><mi>E</mi><mi>F</mi><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mrow><mo fence="true">[</mo><mi>a</mi><mi mathvariant="normal">–</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo>−</mo><mfrac><msup><mi>a</mi><mn>2</mn></msup><mi>x</mi></mfrac><mo fence="true">)</mo></mrow><mo fence="true">]</mo></mrow><mo>=</mo><mfrac><msup><mi>a</mi><mn>2</mn></msup><mrow><mn>2</mn><mi>x</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mo>∴</mo><mi>tan</mi><mo>⁡</mo><mi mathvariant="normal">∠</mi><mi>B</mi><mi>D</mi><mi>F</mi><mo>=</mo><mi>tan</mi><mo>⁡</mo><mi mathvariant="normal">∠</mi><mi>A</mi><mi>C</mi><mi>E</mi><mo>=</mo><mfrac><mrow><mi>A</mi><mi>E</mi></mrow><mrow><mi>A</mi><mi>C</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>B</mi><mi>F</mi></mrow><mrow><mi>B</mi><mi>D</mi></mrow></mfrac><mo>=</mo><mfrac><mfrac><msup><mi>a</mi><mn>2</mn></msup><mrow><mn>2</mn><mi>x</mi></mrow></mfrac><mi>a</mi></mfrac><mspace linebreak="newline"></mspace><mtext>当</mtext><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>完全覆盖正方形</mtext><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mtext>时，有</mtext><mi mathvariant="normal">∠</mi><mi>G</mi><mi>D</mi><mi>C</mi><mo>=</mo><mi mathvariant="normal">∠</mi><mi>G</mi><mi>C</mi><mi>D</mi><mo>⩾</mo><mn>90</mn><mi mathvariant="normal">°</mi><mspace linebreak="newline"></mspace><mtext>当</mtext><mi mathvariant="normal">∠</mi><mi>G</mi><mi>D</mi><mi>C</mi><mo>=</mo><mi mathvariant="normal">∠</mi><mi>G</mi><mi>C</mi><mi>D</mi><mo>=</mo><mn>90</mn><mi mathvariant="normal">°</mi><mtext>时，</mtext><mspace linebreak="newline"></mspace><mi>tan</mi><mo>⁡</mo><mi mathvariant="normal">∠</mi><mi>B</mi><mi>D</mi><mi>F</mi><mo>=</mo><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mn>90</mn><mi mathvariant="normal">°</mi><mo>−</mo><mi mathvariant="normal">∠</mi><mi>G</mi><mi>D</mi><mi>C</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>tan</mi><mo>⁡</mo><mi mathvariant="normal">∠</mi><mi>A</mi><mi>C</mi><mi>E</mi><mo>=</mo><mi>tan</mi><mo>⁡</mo><mrow><mo fence="true">(</mo><mn>90</mn><mi mathvariant="normal">°</mi><mo>−</mo><mi mathvariant="normal">∠</mi><mi>G</mi><mi>C</mi><mi>D</mi><mo fence="true">)</mo></mrow><mo>=</mo><mi>tan</mi><mo>⁡</mo><mn>0</mn><mi mathvariant="normal">°</mi><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mo>∴</mo><mfrac><mrow><mi>A</mi><mi>E</mi></mrow><mrow><mi>A</mi><mi>C</mi></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>B</mi><mi>F</mi></mrow><mrow><mi>B</mi><mi>D</mi></mrow></mfrac><mo>=</mo><mfrac><mfrac><msup><mi>a</mi><mn>2</mn></msup><mrow><mn>2</mn><mi>x</mi></mrow></mfrac><mi>a</mi></mfrac><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mo>∴</mo><mfrac><msup><mi>a</mi><mn>2</mn></msup><mrow><mn>2</mn><mi>x</mi></mrow></mfrac><mo>=</mo><mn>0</mn><mtext>，</mtext><msup><mi>a</mi><mn>2</mn></msup><mo>=</mo><mn>0</mn><mtext>，</mtext><mi>a</mi><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mtext>此时原式不成立，所以等腰</mtext><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>不能完全覆盖住正方形</mtext><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mspace linebreak="newline"></mspace><mtext>当</mtext><mi mathvariant="normal">∠</mi><mi>G</mi><mi>D</mi><mi>C</mi><mo>=</mo><mi mathvariant="normal">∠</mi><mi>G</mi><mi>C</mi><mi>D</mi><mo>&gt;</mo><mn>90</mn><mi mathvariant="normal">°</mi><mtext>时，</mtext><mspace linebreak="newline"></mspace><mtext>有</mtext><mi mathvariant="normal">∠</mi><mi>G</mi><mi>D</mi><mi>C</mi><mo>+</mo><mi mathvariant="normal">∠</mi><mi>G</mi><mi>C</mi><mi>D</mi><mo>&gt;</mo><mn>180</mn><mi mathvariant="normal">°</mi><mspace linebreak="newline"></mspace><mo>∵</mo><mtext>三角形内角和为</mtext><mn>180</mn><mi mathvariant="normal">°</mi><mspace linebreak="newline"></mspace><mo>∴</mo><mtext>此时</mtext><mi>G</mi><mi>C</mi><mi>D</mi><mtext>不是三角形，不符合题设，所以等腰</mtext><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>不能完全覆盖住正方形</mtext><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mspace linebreak="newline"></mspace><mtext>综上所述，等腰</mtext><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>不能完全覆盖住正方形</mtext><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">\because ABCD\text{是正方形}\\\therefore \angle A=\angle B=90\degree\text{，}AB\bot AC\text{于点}A\text{且}\bot BD\text{于点}B\text{，}AB\text{//}CD\\\therefore \bigtriangleup AEC\text{与}\bigtriangleup BFD\text{都是直角三角形，其中}∠A=∠B=90\degree\text{，且}\bigtriangleup GCD\text{∽}\bigtriangleup GEF\\\text{又}\because \text{三角形}GEF\text{的高是}\left( x-a \right) \text{，三角形}GCD\text{的高是}x\\\therefore EF:CD=\left( x-a \right) :x\\\therefore \mathrm{EF}=\mathrm{CD}\frac{x-a}{x}=\frac{a\left( x-a \right)}{x}=\frac{ax-a^2}{x}=a-\frac{a^2}{x}\\\therefore AE=BF=\frac{1}{2}\left( AB-EF \right) =\frac{1}{2}\left[ a–\left( a-\frac{a^2}{x} \right) \right] =\frac{a^2}{2x}\\\therefore \tan \angle BDF=\tan \angle ACE=\frac{AE}{AC}=\frac{BF}{BD}=\frac{\frac{a^2}{2x}}{a}\\\text{当}\bigtriangleup GCD\text{完全覆盖正方形}ABCD\text{时，有}∠GDC=∠GCD\geqslant 90\degree\\\text{当}∠GDC=∠GCD=90\degree\text{时，}\\\tan ∠BDF=\tan \left( 90\degree-∠GDC \right) =\tan ∠ACE=\tan \left( 90\degree-∠GCD \right) =\tan 0\degree=0\\\therefore \frac{AE}{AC}=\frac{BF}{BD}=\frac{\frac{a^2}{2x}}{a}=0\\\therefore \frac{a^2}{2x}=0\text{，}a^2=0\text{，}a=0\\\text{此时原式不成立，所以等腰}\bigtriangleup GCD\text{不能完全覆盖住正方形}ABCD\\\text{当}∠GDC=∠GCD&gt;90\degree\text{时，}\\\text{有}∠GDC+∠GCD&gt;180\degree\\\because \text{三角形内角和为}180\degree\\\therefore \text{此时}GCD\text{不是三角形，不符合题设，所以等腰}\bigtriangleup GCD\text{不能完全覆盖住正方形}ABCD\\\text{综上所述，等腰}\bigtriangleup GCD\text{不能完全覆盖住正方形}ABCD</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">是正方形</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span><span class="mord text"><span class="mord cjk_fallback">，</span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">⊥</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord text"><span class="mord cjk_fallback">于点</span></span><span class="mord mathdefault">A</span><span class="mord text"><span class="mord cjk_fallback">且</span></span><span class="mord">⊥</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">于点</span></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord text"><span class="mord cjk_fallback">，</span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord text"><span class="mord">//</span></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">△</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord text"><span class="mord cjk_fallback">与</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">都是直角三角形，其中</span></span><span class="mord">∠</span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span><span class="mord text"><span class="mord cjk_fallback">，且</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord">∽</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">又</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord text"><span class="mord cjk_fallback">三角形</span></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord text"><span class="mord cjk_fallback">的高是</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord cjk_fallback">，三角形</span></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">的高是</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">E</span><span class="mord mathrm">F</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9463300000000001em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathrm">C</span><span class="mord mathrm">D</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.441138em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord mathdefault">a</span><span class="mord" style="margin-right:0.02778em;">–</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∠</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∠</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.43892em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75292em;"><span style="top:-2.33192em;"><span class="pstrut" style="height:3.01792em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.24792em;"><span class="pstrut" style="height:3.01792em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7529200000000005em;"><span class="pstrut" style="height:3.01792em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">当</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">完全覆盖正方形</span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">时，有</span></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.82891em;vertical-align:-0.13667em;"></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">⩾</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">当</span></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span><span class="mord text"><span class="mord cjk_fallback">时，</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∠</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">∠</span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mop">tan</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mord">°</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.43892em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.75292em;"><span style="top:-2.33192em;"><span class="pstrut" style="height:3.01792em;"></span><span class="mord"><span class="mord mathdefault">a</span></span></span><span style="top:-3.24792em;"><span class="pstrut" style="height:3.01792em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.7529200000000005em;"><span class="pstrut" style="height:3.01792em;"></span><span class="mord"><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">，</span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">，</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">此时原式不成立，所以等腰</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">不能完全覆盖住正方形</span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">当</span></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73134em;vertical-align:-0.0391em;"></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">9</span><span class="mord">0</span><span class="mord">°</span><span class="mord text"><span class="mord cjk_fallback">时，</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.77557em;vertical-align:-0.08333em;"></span><span class="mord text"><span class="mord cjk_fallback">有</span></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.73134em;vertical-align:-0.0391em;"></span><span class="mord">∠</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">8</span><span class="mord">0</span><span class="mord">°</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">三角形内角和为</span></span><span class="mord">1</span><span class="mord">8</span><span class="mord">0</span><span class="mord">°</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">此时</span></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">不是三角形，不符合题设，所以等腰</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">不能完全覆盖住正方形</span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">综上所述，等腰</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">不能完全覆盖住正方形</span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p><h3 id="方法二"><a class="markdownIt-Anchor" href="#方法二"></a> 方法二</h3><p><span class="katex-display"><span class="katex"><span class="katex-mathml"><math><semantics><mrow><mo>∵</mo><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mtext>是正方形</mtext><mspace linebreak="newline"></mspace><mo>∴</mo><mi>A</mi><mi>B</mi><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mi>C</mi><mi>D</mi><mspace linebreak="newline"></mspace><mo>∴</mo><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>∽</mtext><mo>△</mo><mi>G</mi><mi>E</mi><mi>F</mi><mtext>，四边形</mtext><mi>E</mi><mi>F</mi><mi>C</mi><mi>D</mi><mtext>是梯形</mtext><mspace linebreak="newline"></mspace><mtext>又</mtext><mo>∵</mo><mo>△</mo><mi>G</mi><mi>E</mi><mi>F</mi><mtext>的高是</mtext><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mi>a</mi><mo fence="true">)</mo></mrow><mtext>，</mtext><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>的高是</mtext><mi>x</mi><mspace linebreak="newline"></mspace><mo>∴</mo><mi>E</mi><mi>F</mi><mo>:</mo><mi>C</mi><mi>D</mi><mo>=</mo><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mi>a</mi><mo fence="true">)</mo></mrow><mo>:</mo><mi>x</mi><mspace linebreak="newline"></mspace><mo>∴</mo><mrow><mi mathvariant="normal">E</mi><mi mathvariant="normal">F</mi></mrow><mo>=</mo><mrow><mi mathvariant="normal">C</mi><mi mathvariant="normal">D</mi></mrow><mfrac><mrow><mi>x</mi><mo>−</mo><mi>a</mi></mrow><mi>x</mi></mfrac><mo>=</mo><mfrac><mrow><mi>a</mi><mrow><mo fence="true">(</mo><mi>x</mi><mo>−</mo><mi>a</mi><mo fence="true">)</mo></mrow></mrow><mi>x</mi></mfrac><mo>=</mo><mfrac><mrow><mi>a</mi><mi>x</mi><mo>−</mo><msup><mi>a</mi><mn>2</mn></msup></mrow><mi>x</mi></mfrac><mo>=</mo><mi>a</mi><mo>−</mo><mfrac><msup><mi>a</mi><mn>2</mn></msup><mi>x</mi></mfrac><mspace linebreak="newline"></mspace><mo>∴</mo><msub><mi>S</mi><mrow><mtext>梯形</mtext><mi>E</mi><mi>F</mi><mi>C</mi><mi>D</mi></mrow></msub><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mrow><mi mathvariant="normal">A</mi><mi mathvariant="normal">C</mi></mrow><mrow><mo fence="true">(</mo><mrow><mi mathvariant="normal">E</mi><mi mathvariant="normal">F</mi></mrow><mo>+</mo><mrow><mi mathvariant="normal">C</mi><mi mathvariant="normal">D</mi></mrow><mo fence="true">)</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mrow><mo fence="true">[</mo><mi>a</mi><mrow><mo fence="true">(</mo><mi>a</mi><mo>−</mo><mfrac><msup><mi>a</mi><mn>2</mn></msup><mi>x</mi></mfrac><mo fence="true">)</mo></mrow><mo>+</mo><mi>a</mi><mo fence="true">]</mo></mrow><mo>=</mo><mfrac><mn>1</mn><mn>2</mn></mfrac><mi>a</mi><mrow><mo fence="true">(</mo><mn>2</mn><mi>a</mi><mo>−</mo><mfrac><msup><mi>a</mi><mn>2</mn></msup><mi>x</mi></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mfrac><msup><mi>a</mi><mn>3</mn></msup><mrow><mn>2</mn><mi>x</mi></mrow></mfrac><mspace linebreak="newline"></mspace><mtext>若要让等腰</mtext><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>完全覆盖住正方形</mtext><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi><mtext>，则显然有</mtext><msub><mi>S</mi><mrow><mtext>梯形</mtext><mi>E</mi><mi>F</mi><mi>C</mi><mi>D</mi></mrow></msub><mo>=</mo><msub><mi>S</mi><mrow><mtext>正方形</mtext><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi></mrow></msub><mspace linebreak="newline"></mspace><mtext>于是可得</mtext><msup><mi>a</mi><mn>2</mn></msup><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mfrac><msup><mi>a</mi><mn>3</mn></msup><mrow><mn>2</mn><mi>x</mi></mrow></mfrac><mtext>，则</mtext><mfrac><msup><mi>a</mi><mn>3</mn></msup><mrow><mn>2</mn><mi>x</mi></mrow></mfrac><mo>=</mo><mn>0</mn><mtext>，故</mtext><msup><mi>a</mi><mn>3</mn></msup><mo>=</mo><mn>0</mn><mtext>，</mtext><mi>a</mi><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mtext>此时原式无意义，所以等腰</mtext><mo>△</mo><mi>G</mi><mi>C</mi><mi>D</mi><mtext>不能完全覆盖住正方形</mtext><mi>A</mi><mi>B</mi><mi>C</mi><mi>D</mi></mrow><annotation encoding="application/x-tex">\because ABCD\text{是正方形}\\\therefore AB//CD\\\therefore \bigtriangleup GCD\text{∽}\bigtriangleup GEF\text{，四边形}EFCD\text{是梯形}\\\text{又}\because \bigtriangleup GEF\text{的高是}\left( x-a \right) \text{，}\bigtriangleup GCD\text{的高是}x\\\therefore EF:CD=\left( x-a \right) :x\\\therefore \mathrm{EF}=\mathrm{CD}\frac{x-a}{x}=\frac{a\left( x-a \right)}{x}=\frac{ax-a^2}{x}=a-\frac{a^2}{x}\\\therefore S_{\text{梯形}EFCD}=\frac{1}{2}\mathrm{AC}\left( \mathrm{EF}+\mathrm{CD} \right) =\frac{1}{2}\left[ a\left( a-\frac{a^2}{x} \right) +a \right] =\frac{1}{2}a\left( 2a-\frac{a^2}{x} \right) =a^2-\frac{a^3}{2x}\\\text{若要让等腰}\bigtriangleup GCD\text{完全覆盖住正方形}ABCD\text{，则显然有}S_{\text{梯形}EFCD}=S_{\text{正方形}ABCD}\\\text{于是可得}a^2=a^2-\frac{a^3}{2x}\text{，则}\frac{a^3}{2x}=0\text{，故}a^3=0\text{，}a=0\\\text{此时原式无意义，所以等腰}\bigtriangleup GCD\text{不能完全覆盖住正方形}ABCD</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">是正方形</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord">/</span><span class="mord">/</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">△</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord">∽</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord text"><span class="mord cjk_fallback">，四边形</span></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">是梯形</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">又</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">△</span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mord text"><span class="mord cjk_fallback">的高是</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord text"><span class="mord cjk_fallback">，</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">的高是</span></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault" style="margin-right:0.13889em;">F</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathrm">E</span><span class="mord mathrm">F</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.9463300000000001em;vertical-align:-0.686em;"></span><span class="mord"><span class="mord mathrm">C</span><span class="mord mathrm">D</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.2603300000000002em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.113em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.427em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;">)</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">梯形</span></span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mord mathrm">A</span><span class="mord mathrm">C</span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;">(</span><span class="mord"><span class="mord mathrm">E</span><span class="mord mathrm">F</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathrm">C</span><span class="mord mathrm">D</span></span><span class="mclose delimcenter" style="top:0em;">)</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.441138em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">[</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">]</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.441138em;vertical-align:-0.95003em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size3">(</span></span><span class="mord">2</span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size3">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">若要让等腰</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">完全覆盖住正方形</span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">，则显然有</span></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">梯形</span></span><span class="mord mathdefault mtight" style="margin-right:0.05764em;">E</span><span class="mord mathdefault mtight" style="margin-right:0.13889em;">F</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.32833099999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.05764em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord text mtight"><span class="mord cjk_fallback mtight">正方形</span></span><span class="mord mathdefault mtight">A</span><span class="mord mathdefault mtight" style="margin-right:0.05017em;">B</span><span class="mord mathdefault mtight" style="margin-right:0.07153em;">C</span><span class="mord mathdefault mtight" style="margin-right:0.02778em;">D</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord text"><span class="mord cjk_fallback">于是可得</span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.177108em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord text"><span class="mord cjk_fallback">，则</span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.491108em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord">2</span><span class="mord mathdefault">x</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">，故</span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord text"><span class="mord cjk_fallback">，</span></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord text"><span class="mord cjk_fallback">此时原式无意义，所以等腰</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">△</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">G</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span><span class="mord text"><span class="mord cjk_fallback">不能完全覆盖住正方形</span></span><span class="mord mathdefault">A</span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord mathdefault" style="margin-right:0.02778em;">D</span></span></span></span></span></p><p><strong>综上所述，等腰三角形GCD无法完全覆盖住正方形ABCD.</strong></p><h2 id="推广"><a class="markdownIt-Anchor" href="#推广"></a> 推广</h2><p>从方法二的证明过程中，可以发现三角形GCD可以不是等腰三角形，此时结论依旧成立。所以我们有真命题：在图1.0.1中<strong>三角形GCD无法完全覆盖住正方形ABCD.</strong></p><h2 id="探究"><a class="markdownIt-Anchor" href="#探究"></a> 探究</h2><p>在方法二中，我们得出了正方形ABCD的边长a，三角形GCD的高x与梯形EFCD面积y之间的关系式，亦或者说是函数即<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi mathvariant="normal">a</mi><mn>2</mn></msup><mo>−</mo><mfrac><msup><mi mathvariant="normal">a</mi><mn>3</mn></msup><mrow><mn>2</mn><mi mathvariant="normal">x</mi></mrow></mfrac></mrow><annotation encoding="application/x-tex">y=\mathrm{a}^2-\frac{\mathrm{a}^3}{2\mathrm{x}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.897438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord"><span class="mord mathrm">a</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.36292em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mtight"><span class="mord mathrm mtight">x</span></span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathrm mtight">a</span></span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></p><p>那么，若是不让三角形GCD完全覆盖正方形ABCD（不让三角形GCD的高等于无限），而是让其高尽量长，趋近于无限呢？</p><p>此时，可得<span class="katex"><span class="katex-mathml"><math><semantics><mrow><munder><mo><mi>lim</mi><mo>⁡</mo></mo><mrow><mi>x</mi><mo>→</mo><mi mathvariant="normal">∞</mi></mrow></munder><mrow><mo fence="true">(</mo><msup><mi>a</mi><mn>2</mn></msup><mo>−</mo><mfrac><msup><mi>a</mi><mn>3</mn></msup><mrow><mn>2</mn><mi>x</mi></mrow></mfrac><mo fence="true">)</mo></mrow><mo>=</mo><msup><mi>a</mi><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">\underset{x\rightarrow \infty}{\lim}\left( a^2-\frac{a^3}{2x} \right) =a^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.8499999999999999em;vertical-align:-0.7em;"></span><span class="mord"><span class="mop op-limits"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-2.1em;margin-left:0em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">x</span><span class="mrel mtight">→</span><span class="mord mtight">∞</span></span></span></span><span style="top:-2.7em;"><span class="pstrut" style="height:2.7em;"></span><span><span class="mop"><span class="mop">lim</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.7em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size2">(</span></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.01792em;"><span style="top:-2.6550000000000002em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span><span class="mord mathdefault mtight">x</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathdefault mtight">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8913142857142857em;"><span style="top:-2.931em;margin-right:0.07142857142857144em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose delimcenter" style="top:0em;"><span class="delimsizing size2">)</span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></p><p>于是有当三角形GCD的高x趋近于无限时，梯形EFCD的面积趋近于正方形ABCD的面积a², 此时三角形GCD在正方形内的面积趋近正方形ABCD的面积.</p><h2 id="结论"><a class="markdownIt-Anchor" href="#结论"></a> 结论</h2><p>图1.0.1中的三角形GCD无法完全覆盖住正方形ABCD，但若三角形GCD的高趋近于无限，则此时三角形GCD在正方形内的面积趋近正方形ABCD的面积.</p>]]></content>
    
    
    <categories>
      
      <category>数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>C++ 数组实现队列</title>
    <link href="/posts/da7075f0/"/>
    <url>/posts/da7075f0/</url>
    
    <content type="html"><![CDATA[<p>队列是常用的数据结构，是广度优先算法中不可或缺的一部分。队列一般使用数组或链表构建，这里会介绍使用数组实现队列的方法。</p><span id="more"></span><h2 id="结构搭建"><a class="markdownIt-Anchor" href="#结构搭建"></a> 结构搭建</h2><p>首先，定义队列结构：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10000</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myqueue</span> &#123;<br>    <span class="hljs-type">int</span> first;<br>    <span class="hljs-type">int</span> last;<br>    <span class="hljs-type">int</span> v[MAXSIZE];<br>&#125;;<br></code></pre></td></tr></table></figure><p>变量first指向首项，last指向尾项<span class="heimu" title="你知道的太多了">其实不是</span>，数据则存在数组v中。为了防止数据溢出，此时定义数组v的范围要尽量大，此处是10000。</p><p>再就是初始化队列：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(myqueue &amp;t)</span> </span>&#123;<br>    t.first = t.last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>让first与last都指向数组开头的第0项，很好理解。</p><p>之后，开始数据操作。第一个是push函数，将数值存入队列的最后：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(myqueue &amp;t, <span class="hljs-type">int</span> s)</span> </span>&#123;<br>    t.v[t.last] = s;<br>    t.last++;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意将last指向后面一项，此时变量last始终指向队列最后一项的下一项，是一个空值。</p><p>第二个是pop函数，删除队列首项。不过这里有一个坑，如果队列为空删除便有可能出错，所以要先判断队列是否为空：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isempty</span><span class="hljs-params">(myqueue &amp;t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(t.last == t.first) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(myqueue &amp;t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span>;<br>    t.first++;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>判断队列是否为空很简单，当first=last时，有队列为空(队列非空时，last在最后的数据项的后一位，所以first不可能等于last)。</p><p>pop时只需要移动首项的标识，避免了繁琐的数据移送，也无需置空数组的某一项，原因显而易见。但永远抛弃了一部分内存，故而要小心溢出。</p><p>再就是获取队列的首项、尾项、第n项以及长度，代码相对简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getf</span><span class="hljs-params">(myqueue t)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> t.v[t.first];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getl</span><span class="hljs-params">(myqueue t)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> t.v[t.last - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getn</span><span class="hljs-params">(myqueue t, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> t.v[t.first + n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getlength</span><span class="hljs-params">(myqueue &amp;t)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (t.last - t.first);<br>&#125;<br></code></pre></td></tr></table></figure><p>这里对于长度的获取需要说一下，理论上长度应当是(last - first + 1)，但这里last本身就是数据项的后一项，所以自然就省掉了。</p><h2 id="解决问题"><a class="markdownIt-Anchor" href="#解决问题"></a> 解决问题</h2><p>现在整个队列已经完全可用了，我们可以尝试用其解决一些实际问题。</p><h3 id="问题背景"><a class="markdownIt-Anchor" href="#问题背景"></a> 问题背景</h3><p>有n(n &lt;= 100)个小朋友排队打针，他们每个人都有依次自己的编号为1, 2, 3, 4, …, n。他们都很害怕打针，所以当排在自己前面的小朋友打针时就会跑走到队伍最后。试设计一程序，输入小朋友数量，输出他们打针的顺序。</p><p>样例输入：5<br />样例输出：1 3 5 4 2</p><h3 id="问题分析"><a class="markdownIt-Anchor" href="#问题分析"></a> 问题分析</h3><p>很显然，这样需要模拟过程的题目用队列解答会非常容易，直接使用队列出入队模拟这一过程即可。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    myqueue test;<br>    <span class="hljs-built_in">init</span>(test);<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) <span class="hljs-built_in">push</span>(test, i); <span class="hljs-comment">//编号依次入队</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;!<span class="hljs-built_in">isempty</span>(test);i++) &#123;<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//如果是第偶数个打针的，排到最后</span><br>            <span class="hljs-type">int</span> temp = <span class="hljs-built_in">getf</span>(test);<br>            <span class="hljs-built_in">pop</span>(test);<br>            <span class="hljs-built_in">push</span>(test, temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果是第奇数个打针的，输出后出队</span><br>            cout&lt;&lt;<span class="hljs-built_in">getf</span>(test)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">pop</span>(test);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>代码比较简单，关键还是在于前面对整个队列结构的搭建。</p><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>队列的用处非常大，后面广度优先算法也会用到，建议多理解、多练习，掌握的越熟练越好。</p><p>本次完整代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10000</span><br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">myqueue</span> &#123;<br>    <span class="hljs-type">int</span> first;<br>    <span class="hljs-type">int</span> last;<br>    <span class="hljs-type">int</span> v[MAXSIZE];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(myqueue &amp;t)</span> </span>&#123;<br>    t.first = t.last = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isempty</span><span class="hljs-params">(myqueue &amp;t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(t.last == t.first) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(myqueue &amp;t, <span class="hljs-type">int</span> s)</span> </span>&#123;<br>    t.v[t.last] = s;<br>    t.last++;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">(myqueue &amp;t)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">isempty</span>(t)) <span class="hljs-keyword">return</span>;<br>    t.first++;<br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getf</span><span class="hljs-params">(myqueue t)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> t.v[t.first];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getl</span><span class="hljs-params">(myqueue t)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> t.v[t.last - <span class="hljs-number">1</span>];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getn</span><span class="hljs-params">(myqueue t, <span class="hljs-type">int</span> n)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> t.v[t.first + n];<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getlength</span><span class="hljs-params">(myqueue &amp;t)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> (t.last - t.first);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    myqueue test;<br>    <span class="hljs-built_in">init</span>(test);<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;=n;i++) <span class="hljs-built_in">push</span>(test, i); <span class="hljs-comment">//编号依次入队</span><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;!<span class="hljs-built_in">isempty</span>(test);i++) &#123;<br>        <span class="hljs-keyword">if</span>(i%<span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">//如果是第偶数个打针的，排到最后</span><br>            <span class="hljs-type">int</span> temp = <span class="hljs-built_in">getf</span>(test);<br>            <span class="hljs-built_in">pop</span>(test);<br>            <span class="hljs-built_in">push</span>(test, temp);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">//如果是第奇数个打针的，输出后出队</span><br>            cout&lt;&lt;<span class="hljs-built_in">getf</span>(test)&lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>            <span class="hljs-built_in">pop</span>(test);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计算机</tag>
      
      <tag>编程</tag>
      
      <tag>cpp</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>自主学习</title>
    <link href="/posts/7e535678/"/>
    <url>/posts/7e535678/</url>
    
    <content type="html"><![CDATA[<p>尊敬的老师，亲爱的同学们，大家（上午/下午）好！我是八年级的<span class="heimu" title="这是可以说的吗">我的姓名</span>，很荣幸今天能站在这里演讲。面对大家真诚的面容，这次我想和大家分享我自主学习的心得。</p><p>首先，我们应该明确一个概念，即什么是自主学习。自主学习就是随意的学、无拘无束的学吗？显然不是。自主学习是以自学、质疑、讨论等方式深入理解学习内容并获得新知识的一种实践活动，是通过自我导向、激励、监控的方法学习。其需要我们不断地尝试一些适合自己的有效的学习方法，合理的掌控学习时间，以便于专心地投入学习中。</p><p>要做到自主学习其实并不难，只需要把学习看作是一件令人快乐和愉悦的事。是的，学习的过程虽苦，却也满含着即将迎来收获的喜悦。完成自主学习的过程大概分为五点：一、了解自己：透过渐趋清明的自我概念、自我价值、自我认知，朝自觉、自足、自在的境态迈进；二、了解环境：透过知识与经验，了解环境的资源及限制；三、寻求自己与环境最佳的互动可能：在了解自己也了解环境的基础上，能找出当下合适的对应；四、着手实现：靠勇气、恒心、毅力，使自己能实践出心中所想，知行合一。五、保有循环向上的检视机制：透过计划-&gt;实行-&gt;检视-&gt;增进的循环，让自己从每次的经验中有所反省和收获。上面的说法比较枯燥，就拿我个人来举例吧，从小学一年级开始，我就对数学很感兴趣，喜欢看一些趣味性的数学书，还经常自以为很厉害，主动寻找“难题”去“考”父母和老师，这其实就是一种出于本能的自主学习过程。后来，我出于对电脑编程的喜爱，出于对计算机的掌控中获得的欣喜感和满足感，编程培训课如无意外我从不缺课，平时还主动上网学习电脑编程知识、了解电脑信息和发展动态，同时，由于编程和设计需要用到大量知识，我也不放松自己对数学、物理、英语、语文甚至美术的学习。如果说小时候对数学难题的解题过程是一种懵懂的自主学习的初级状态，那么之后对编程和相关知识的自主学习就是在了解自我，了解环境的基础上，充分利用现有的时间、精力和资源，通过各种努力，达到自主学习的进阶状态。</p><p>同学们，“没有比人更高的山，没有比脚更长的路”，前行的路就在我们自己脚下，命运之门的钥匙就在我们自己手中。让我们从点滴做起，让自主学习成为持之以恒的一种习惯，成为我们自主的生活方式。我衷心祝愿每一位同学能克服自身的惰性，付以恒心与毅力，走向属于你自己的成功！</p><p>谢谢大家！</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>演讲稿</tag>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>尊重客观规律</title>
    <link href="/posts/8f132c87/"/>
    <url>/posts/8f132c87/</url>
    
    <content type="html"><![CDATA[<p>只有尊重客观规律，才能事有所成。西门豹出任邺令，破除封建迷信，转而挖掘渠道、灌溉农田，治理了邺城常有的水灾；鲧以堵治水而无能为力，大禹改堵为疏，完成了治水的大业。这些都是以对客观规律的尊重而得到的成果，也证明了人类若是要认识和改造世界，必须先尊重客观规律。青藏铁路只从西宁修到了格尔木就不再延伸，这份阻碍并非因为资源，而是来源于人们对客观规律的践行——在当时的条件下，这样的施工若是继续下去一定会对当地，甚至整个中国的生态造成破坏。人们不断只有尊重、探索客观规律，才能更好的造福社会。</p><p>尊重客观规律，是在践行宇宙的真理。“橘生淮南则为橘，生于淮北则为枳，叶徒相似，其实味不同。所以然者何？水土异也。”柑橘在南方能长出甜美饱满的果实，但在北方就只能结出味苦的枸橘。英国文艺复兴时期散文家、哲学家弗朗西斯·培根曾经说过：“只有顺从自然，才能驾驭自然。” 世间万物皆有其自身的规律，许多事物也万万不能强求，“强扭的瓜不甜”。瓜一旦成熟，其瓜蒂部分便会变得干枯，自动脱落，很容易摘；而若是瓜还并未成熟，那么瓜蒂部分必然长得很结实，要想把瓜摘下来就一定要使劲扭。如此摘下的瓜自然都是未成熟的，又怎可能甜？规律是亘古永存的，其具有客观性与普遍性。柑会变成枸橘、瓜会没有甜味，这一切的改变都是客观规律使然。“昔者海鸟止于鲁郊，鲁侯御而觞之于庙。奏《九韶》以为乐，具太牢以为膳。鸟乃眩视忧悲，不敢食一脔，不敢饮一杯，三日而死。”“宋人有闵其苗之不长而揠之者，芒芒然归，谓其人曰：“今日病矣！予助苗长矣！”其子趋而往视之，苗则槁矣。”鲁侯养鸟、揠苗助长，都是不遵守客观规律而造成的后果·。如此可以看出，规律的存在和发生作用都以一定的客观条件为基础，在不具备其根据和条件的情况下，人为的要求某个规律存在和发生作用是不可能的。综上所述，在实际生活中，规律是不可抗拒的。也只有按规律办事，才可能达到所需要的目的。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牺牲少数保护多数是不正义的——一辩发言</title>
    <link href="/posts/bff2b1a/"/>
    <url>/posts/bff2b1a/</url>
    
    <content type="html"><![CDATA[<p>尊敬的老师及评委们，大家好！我们的观点十分明确，即牺牲少数保护多数是不正义的。请注意辩题中的措辞，是“不正义”而远非“邪恶”。不正义并非与正义成对立的关系，而是互补——任何称不上正义的行为都可以称之为不正义。不正义不是一个极端的点，而是除了正义这个点外的整条线。所以换句话说，我们认为，牺牲少数保护多数的行为不配称之为正义。“牺牲”本义指古希腊哲学家柏拉图在《理想国》中曾表明正义是客观存在的，所以并不存在所谓“相对的正义”，也不可能从两个角度分别看待一件事正义与否并得出不同的答案。既然我们已知牺牲少数保护多数从某些角度上来看并非正义，那么这件事自然便一直不在正义的范畴之中，于是其只能是不正义的。</p><p>著名德意志哲学家，德国古典哲学创始人伊曼努尔·康德认为：人，是目的本身，即在任何时候任何人(甚至上帝) 都不能把他只是当作工具来加以利用。若是牺牲少数来保护多数，那不正是把少数人放在了可以随时被“牺牲”、被消耗的“工具”的位置上吗？恶也油然而生。这样的行为无论如何加以粉饰也不可能被称之为正义。人同样存在最高权力，高过任何外界利益总和。我们拥有我们自身，是自由的个体。在此基础上可以构建出人人平等的前提，所以“使社会利益最大化”的行为，即牺牲少数保护多数并非正义。</p><p>常常有一句话说“公平即正义”，但是其逻辑性趋近于无。“正”即合于法则的（合于法律的）、规矩的（指相对的两方面中积极的一面），而“义”则是公正合宜的道理或举动（合乎正义或公益的）。所以可以得出正义是指合于法则的公正合宜的行为。而公平，“公”与“私”相对，指属于国家或集体的；“平“则是指一般的，故而“公平”的意思是指集中而大多适用的道理。自然“牺牲少数保护多数”的行为只属于公平而非正义。</p><p>我们可以举一个例子，为了救活十个即将饿死的人，杀死其中一个人作食物给另外九个人吃，这样做对吗？从结果上看，活下来的人数比死去的人多，似乎就应该按照这样的办法去做。不过我们可以深思一下，假若按照上述价值观去做，虽然短时间内使社会利益得到了最大化，但是如此侵犯个人的基本权利最终会使社会整体幸福度降低。从长远看，若这种做法流行起来，社会将变得鸡犬不宁人人惶惶不可终日。</p><p>最后，我们社会的发展，社会的价值的提升，并不是通过牺牲少数人，牺牲弱势群体来达到的，而是通过平衡社会中不同阶级之间的关系，来使社会达到一种动态的平衡。当弱者出现时我们每个人献出一点爱让他们变得强大。当少数人的利益与多数人的利益冲突时，我们虽然会使少部分人做出牺牲来达到利益的最大化，但是我们不会自诩正义，我们心中会永远记得那些为多数而牺牲的少数，并为补偿他们而不懈奋斗着，因为“无正当补偿便不能剥夺”原则是对共同利益的最好保护。那些剥夺了他人的权益还自称正义的人是这个世界上最大的暴徒。</p><p>综上所述，我方认为牺牲少数保护多数是不正义的。谢谢！</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
      <category>辩论</category>
      
    </categories>
    
    
    <tags>
      
      <tag>演讲稿</tag>
      
      <tag>辩论</tag>
      
      <tag>牺牲</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《四世同堂》读后感</title>
    <link href="/posts/92674965/"/>
    <url>/posts/92674965/</url>
    
    <content type="html"><![CDATA[<p>学期末老师列了一条长长的书单，让我们选择两本来写读后感。正巧以前听闻过老舍先生的《四世同堂》，于是便选择了它与另外一本书。在我的印象中，老舍先生的书里我只看《骆驼祥子》。当然肯定不止这一本，只是忘了其它书的名字罢了。</p><p>但书到货之后我震惊了，因为这本书完全不像我想的那样。这本，不，应该是这套书比我以前所读过的所有书都要厚。而在真实的读过一遍这本书后我却才发现。这个厚度也不算什么，因为它的剧情真的非常好。</p><p>《四世同堂》是老舍最著名的长篇小说，这部百万字的巨著描述了卢沟桥事件爆发的一九三七年至日本投降的八年间北京普通市民遭受到的残酷压迫与统治，以及他们面对生与死的自尊与自省。老舍这部书中展示了北平沦陷区一群普通人的生活。通过祁老人、瑞丰、瑞宣、韵梅、钱诗人、小文夫妇、李四爷、白巡长、孙七、小崔、马老太太、常二爷、小妞妞以及大赤包、招弟等人物形象，表现出民族存亡之际，真善美与假恶丑的斗争，崇高的民族气节和苟且偷安、助纣为虐的对照。</p><p>老舍在《四世同堂》中对于人物性格的刻画及其的用心，而刻画出的任务同样的非常立体。比如在描写汉奸时：冠晓荷与蓝东阳是小说中的汉奸形象代表，“无事乱飞是苍蝇的工作，而乱飞是早晚会碰到一只死老鼠或一堆牛粪，冠先生是个很体面的苍蝇。”而老舍先生用极妙的笔法对蓝东阳道：“蓝东阳的相貌先引起试官的注意。他长得三分像人，七分倒像鬼。日本人觉得他的相貌是一种资格与保证——这样的人，是地道的汉奸胚子，永远忠于他的主人，而且最会欺压良善。东阳的脸足以引起他的注意，恰好他的举止与态度又是那么卑贱的出众，他得到了宣传处处长。”</p><p>而放远了看，实际上，老舍先生描写的这个时代下的中国正是二战期间法西斯侵略活动的最好的印证。读书的时候很容易就会联系到以前看过的海明威著作的《永别了，武器》。这本书讲的是一战期间的故事。一战时交战双方的目的主要是瓜分殖民地，争夺市场和原料产地；二战法西斯国家不仅要打败对方，而且要在全世界范围内建立法西斯制度。这也就解释了为什么日本区区一个弹丸之地，竟然有吞并整个东南亚的野心，且近乎于成功了。书中有写“短腿小鬼可不管你是否是它的一条狗，只要它认为你可疑，不值得信任或没有利用的价值了，旋即投狱、折磨、杀死，没有丝毫的理由。”这就是日本人的强盗逻辑，这就是这个民族嗜血成性的侵略本性。只有我们自己手握武器，狠狠地痛击它，它才能乖乖地缩回乌龟头，在它的小岛上蛰伏不动。</p><p>回归书中，回归二战，回归北平。其实无论在什么时代，谁都想过着安适美好的日子，可是当祖国受到侵略，当侵略者剥夺人们正常生活的权力，每一个有正义感和民族感的普通老百姓都会用自己的方式来保卫自己的家园的想法，但是这不可能。人只能在愤激反抗所博得的美名与背负骂名的存活中选择一个。选择其中一边的人是有的，而这些人恰恰会是被后人熟记、明知的。大部分老百姓什么也没有选，而是站在它们之间，想着苟且偷生。我为汉奸们可悲，更为那些觉醒后勇于反抗的人们感到欢欣鼓舞。小说中的一些次要人物就像我们揭示了老百姓们可悲的一面。他们因为一点蝇头小利便偏向了侵略者一方。以往拳打汉奸的金三爷，因为日本人带来的好生意转而感激，之后甚至出卖了钱默吟先生。年轻貌美的招弟，堕落成一个出卖肉体的女人，却还以此为荣。这些没有是非观的行为无疑是贪念在作祟。最后，当抗战最终胜利，人们仿佛才想起了报仇，结尾几个小伙子想找日本老太婆报仇的事再次让人嗤笑和而叹息。人们已经不怎样能高兴起来了，八年的风雨飘摇，战争给人民带来了无尽的苦难，给中国大地留下了累累伤痕。我们不应忘记这段屈辱的过去，要时刻铭记那段冰风冷雨的历史，创造辉煌的未来。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>读后感</tag>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>浅探魏晋名士的精神世界</title>
    <link href="/posts/d29e300c/"/>
    <url>/posts/d29e300c/</url>
    
    <content type="html"><![CDATA[<p>提起魏晋，“名士风流”四个字是现代人对它的基本认知，在中华民族几千年的历史长河中，也唯有魏晋南北朝时期独有的世族门阀在政治、经济、文化领域与皇权分庭抗礼甚至占主导地位的条件下，才能形成“魏晋风度”这一独特的文化现象。代表家族如王谢世家，代表人物如竹林七贤等，除了留下大量诗歌、书法、音乐等文化遗产外，还留下了处变不惊、旷达任率、不拘礼法、风神潇洒、不滞于物的精神风貌和思想风格供后世研究探讨。</p><p>魏晋名士如此“特立独行”的精神世界，它的形成有一个长期过程。东汉末年开始的南北分裂和战乱，党锢之祸、黄巾起义、三国鼎立、司马氏篡权，百多年的血雨腥风，动荡不安，使“汉末名教”作为思想束缚的礼教开始崩塌，士人们不再对皇权盲目崇拜，开始拥有了自我意识，而其中一些有识之士不安于现状，不断追求思想上的创新与突破。他们会去对规则本身的合理性进行考虑，以探寻规则外的广阔天地；他们不仅行为上不愿再受规则的束缚，精神世界也同样不甘压迫；他们开始探索宇宙自然与人生本体的关系，追求新的思辨哲理。</p><p>现在看这些名士们的行为，可以发现其实连带着魏晋风度本身，有些只是反常的叛逆性极强的怪异举动，可以认为是在名教长时间压迫下的剧烈反弹。甚至会出现一些较为过激的行为，如在《世说新语》任诞篇中对刘伶的记载：“刘伶恒纵酒放达，或脱衣裸形在屋中。人见讥之，伶曰：我以天地为栋宇，屋市为裈衣，诸君何为入我裈中？”如此行为，只能称得上是“率性而为，任诞放达”了，其叛逆性之强不容否认。</p><p>除了战乱，魏晋时期残酷的政治清洗同样令人不安，无论是个人的生命还是家族的命运，全都在统治者、权贵的争权夺势中难以独善，所以魏晋士人在放达不羁的行为中也折射出深深的忧惧和哀伤。故而反抗礼教的名士们便只得走向崇尚老庄，酗酒佯狂，傲啸山林，不与时务的道路，个人认为，这一点是促成魏晋风度中“隐居”行为的重要因素。而从嵇康的性情刚直，阮籍纵酒放达等都能看出些许佐证。</p><p>在这样政治黑暗，礼教束缚的年代，尽管出现了文人集体失语的现象，但魏晋名士的特点就是不会停止对成为累赘的礼教的批判与反抗，不会停止对自由人格的永恒追求。在魏晋名士眼中，自由就是顺从自己的天性，任性而为，随心而动。他们具有超脱世俗自由独立的人格理想，所以能一边否定外界社会一边重构自我人格，“人生贵得适意尔”。随着道教的兴起、佛教的传入，开创出儒道互补的士大夫精神，奠定了中国知识分子的人格基础，不可不谓影响深远。</p><p>当然任何事情都有其两面性。对于魏晋名士的思想和行为，被后世最为诟病的是“五石散”的服用和空谈玄理的风气。或出于养生、或出于美容、或出于对长生的追求、或出于身份地位的昭示，士人们刻意忽视它的副作用，使服用五石散成为一种“时尚”，造成了了大量人力物力的浪费和对身体的伤害。甚至连家境并不富裕、买不起五石散的人们都会争相模仿：当众倒地，自称“石发”。闹出不少笑话。在《太平广记》中《启颜录﹒魏市人》便有“有一人，于市门前卧，宛转称热”的记载，可见一斑。而魏晋名士的清谈，考验的是口才和思辨，但从开始的成就自己的政治抱负发展到只关心自己一家一姓一族的得失，崇拜浮虚、寄情酒色、不管国事，致使朝野颓唐，甚至间接导致了西晋的亡国，从此流传下来“清谈误国”这句话。</p><p>动荡时期的不安全处境和残酷的政治斗争中，要么顺应环境保全生命，要么纵情于山水追求的精神解放，要么饮酒服药带来短暂的麻痹，这种焦灼矛盾的状态或许就是魏晋名士精神世界的形成原因，我们在研究和探索的过程中，不应该将狂放、酗酒、服药等视为风流，而忽视了它所产生的时代背景，不能只看到他们狂放洒脱的一面，更要看到深刻沉重的一面。</p><p>我认为，魏晋名士之所以为名士，不是因为不羁和自由，而是因为才学。如竹林七贤中阮籍的诗歌、山涛的文集、嵇康的文集和音乐等等，更有世家中的高门大户王家的书法和谢家的政治成就。但是他们中的大多数却选择清谈、避世，选择隐居甚至堕落。精神上的虚无主义，使他们留名后世，却在当时无所作为，未能为动荡的社会做些什么，亦未能解救悲苦的百姓。历史上每逢乱世，必会产生开放的思想，并由此造福于百姓，有破有立。唯有魏晋名士，思想开放却是破而未立。他们的反抗仅仅只是反抗，却未有切实可行的主张去改变社会现状。</p><p>所以，魏晋风度对当世可能仅仅是一种浮于表面的行为艺术，一种看破世俗的有识之士的无能呐喊，一场雷声大雨点小的思想革命。虽然为后世留下了丰富的文学经典，但却几乎未在当时的社会中产生任何正向作用。名士们的精神世界中除了繁多的思想外，难说是否有未民生的思考，抑或是仅仅停留在了“人生贵得适意尔”的“适意”上。故而我们既要学习他们对自由与创新的向往，更要善于学习，善于以辩证的思想去看待他们本身、他们的行为及他们的精神世界，而非盲目追随。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>《钢铁是怎样炼成的》读后感</title>
    <link href="/posts/bb5ce830/"/>
    <url>/posts/bb5ce830/</url>
    
    <content type="html"><![CDATA[<p>一个人的人生应当这样度过：当他回首往事时，不因虚度年华而悔恨，也不因碌碌无为而羞耻。</p><p align="right">——题记</p><p>保尔是一个无私的人，他总是把党和祖国的利益放在第一位。在战争年代，保尔情愿与父兄们一起上战场；为保卫苏维埃政权，他甘愿同外国武装干涉者和白匪军拼个你死我活。这些都表现保尔了甘愿为革命事业的献身精神。在如此的艰难岁月中，他却能将自己全部的热情投入到了和平劳动之中。虽然他为国家、党与人民做过如此大的贡献，但他却从未骄傲过，也从未考虑过个人的名利、地位，而只想多为党和人民做点事情。党叫他修铁路，他答应;党调他当团干部，他同意——而且都是拼命地做。为了革命他甚至可以牺牲自己个人的私生活，即爱情。他虽然爱丽达，但受到了“牛虻”的影响，所以想要“彻底献身于革命事业”，最后按照“牛虻”的方式与她不告而别。在保尔全身瘫痪、双目失明后，他仍然想继续为党工作。这些都正如他所言：“我的整个生命和全部精力，都献给了世界上最壮丽的事业——为人类的解放而斗争。”</p><p>保尔是一个于平凡且伟大的人物。在他的一生中，一直没有过什么惊天动地的伟大业绩：他总是从最平凡的小事做起。面对疾病的沉重打击，虽然他也曾产生过自杀的念头，但是保尔后来也认识到了这是一种任性和不负责任，于是他又重拾了对生活的信心。也正是因为作者的这种塑造，所以保尔才会让我们感受到一种真实感。他是伟大的，也是平凡的。他既是在不断的困境与不幸中真正被煅炼的钢铁，也是一个有血有肉的、让人感到亲切的人。</p><p>书中对于保尔残疾后形象的塑造也同样不乏。保尔因不幸而残疾，但尽管自己身体行动不便，他也用自己顽强的毅力克服了种种困难。他在残疾后毫不灰心，反而更加的刻苦学习与奋力工作，同时还开始了文学创作。即使是他双目失明后他也未动摇过其信念，只是拿起了笔，摸索着尝试写作。即便是每写一字，他都需要付出常人根本无法想象的艰辛劳动他也坚持了下来，由此最后他才终于写出了小说《在艰苦暴风里诞生》的一部分。保尔是一个普通的革命战士，但却有着这样钢铁般的坚强意志，这与共产主义事业的召唤是不可分割的。他投身于革命事业，一次又一次的创造着奇迹。</p><p>世界上基本没有什么是天生的，所有事物都只有在经过火焰的煅炼后才可以使自身得到不断地升华。保尔是，我们也是。我们每一个人都只有树立伟大的理想、执着的追求，并且在正确的拼搏道路上不断砥砺前行，他才不会被生活的火焰所摧毁，不会被不幸的塑造所扭曲。这样的人会在一段段人生经历中坚强、成熟起来，去绽放自己的力量、迎接更好的自己。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>读后感</tag>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>About Food</title>
    <link href="/posts/53c0d957/"/>
    <url>/posts/53c0d957/</url>
    
    <content type="html"><![CDATA[<p>Hello everybody!</p><p>Fast food is come from Ancient Roman. At that time, many people didn’t have enough money to buy or rent a house with a kitchen. So many people could only buy food from street vendors. At the same time, there were some pilgrims to Rome to buy fast food, too. That’s the first kind of fast food. And now, fast food has become popular all over the world.</p><p>Fast food is tasty, but there are some criticisms of fast food. Lots of fast food are rich in calories as they include considerable amounts of mayonnaise, cheese, salt, fried meat, and oil, thus containing high fat content. Excessive consumption of fatty ingredients such as these results in unbalanced diet. Children who eat fast food tend to eat less fiber, milk, fruits, and non-starchy vegetables. And even adults, like the school’s foreign teacher, Daniel. He likes to eat fast food and snacks. He usually buys snacks after class. Have you seen him? He is very fat and looked very old. But he is only in his 20s. I took his class while I was still in the class GUHONGMING. He hardly ever came upstairs. Because he was too fat to hold his weight. So we always have his class on the first floor. But don’t worry, it happens that some other foods are healthy and good for us, which is also the content of our next section - healthy food.</p><p>There are also some other food besides fast food, like vegetables and fruits. We can call then as healthy foods. They can help our body in many ways. First of all, there are many vitamins in them, such as vitamin C, which is very important for the human’s body. In the past, crews on the boat caught on a disease called scurvy. Then they found out a way to cure the disease: eat fruits and vegetables which are rich in vitamin C. So now we can see that healthy food such as fruits and vegetables are very important and good for our human’s body.</p><p>Besides, there are some foods that are healthy and have many proteins, such as meat. Proteins play a major role in ensuring your overall well-being. Meanwhile, it is one of the most important components of every cell presenting in the body. In our daily life, we mainly eat vegetables and meat. With the improvement of people’s living standards, people’s interest in meat is getting lower and lower. Many people eat vegetables and fruits as their staple food, and female friends stop eating meat in order to keep fit. But people do not eat meat will lead to inadequate protein intake, will lead to physical weakness, decreased resistance, fatigue, cold, lack of energy, memory loss, low quality of life, affect work and study. So now we can see the importance of healthy food. Let’s eat more healthy food and eat less fast food! Don’t forget that healthy food is good for your body and fast food is not.</p>]]></content>
    
    
    <categories>
      
      <category>英语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>演讲稿</tag>
      
      <tag>纯英文</tag>
      
      <tag>English</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正常，荒谬——《局外人》读后感</title>
    <link href="/posts/7b015599/"/>
    <url>/posts/7b015599/</url>
    
    <content type="html"><![CDATA[<p>我不是这里的人，也不是别处的人。世界只是一片陌生的景物，我的精神在此无依无靠，一切与己无关。</p><p align="right">——题记</p><p>《局外人》书中的主人公默尔索虽不能说是冷漠无情，但也是不同于常人的。对于日常起居方面而言，他和大多数人一样。但是他又和大多数人不一样，他并不习惯于使用普通人通用的情感表达方式：他不像大多数人会在母亲，一个赋予他生命、哺育其成长的人的葬礼上嚎啕大哭；而他只是沉默着，甚至心中只想着为什么不早点结束，这样才能回去睡觉。像一个局外人一般，好似任何事情都与他毫无关联。这也是书中对他的第一处道德审判，即养老院中老人对丝毫没有伤心感受的默尔索的不正常的关注。</p><p>但是这一场审判是必要的吗？我们有必要在他人的审判之下临时更改自己深信不疑的观点吗？默尔索没有这么做，所以他才没有在母亲的葬礼上哭泣，亦或者是动那么一点点情。他认为死亡原本就是一件自然而然的事情。可是恰恰是因为这样，他才违背了人们约定俗成的道德准则，也为后文中他的悲剧结局埋下了伏笔。</p><p>默尔索之后在一种不明不白的状态下以一种正当防卫的姿态杀死了一位阿拉伯人，本身可以判定减刑的事件却正是因为他的“不近人情”——默尔索对任何问题的回答都太过客观，让人感觉不到人情味——而被记者过度渲染，引起了人们对这个案件的过度关注与检察官疯狂对默尔索人格的诋毁抨击。整个过程，默尔索被排挤在外，只剩下了法官与律师、证人的接触，并且谈论的主题还不是这一起案子，而是对默尔索本人的争论，对默尔索的“不孝”的争论。人们就像约定好了一样，顺利地，没有理由地将默尔索判以死刑。</p><p>正是因为默尔索的为人处世方式才引得了人们的过分联想。而在整个案件中，几乎所有人都被一种主观的想法所引导，认为他就是一个冷漠无情的杀人犯。可是他真的是一个冷酷无情的杀人犯么？深入了解他的人，喜欢他。泛泛接触过的人却想置他于死地。他仅仅是热爱这个城市，也真正懂得享受当下的美好而已。</p><p>正如他所言，一切都“不是我的错”，可是很多事情本就是这样自然而然发生了。</p><p>直至默尔索死刑之前他才展现出了一个真实的自己——一个思念自己母亲、怀念儿的日子的人。他开始感到害怕，恐惧死亡，恐惧狱卒的脚步声，恐惧黎明…人都会死，可是大多数人都可以用五十年以上的时间来一点一点消磨这种恐惧，消磨死亡这件事。但当这五十年的恐惧，突然一下子被压缩到了一天里面，在那一天里，一个普通人会想什么呢?或许大多数人会选择寻找情感寄托吧，选择信奉了某一个神，他们通过神鬼来为自己开脱，缓解自己内心的愧疚与不安。可是默尔索依旧没有这么做，对事件始终有着理性且客观认知的他并没有相信神鬼之说。他在被判死刑后，虽然神甫仍然在不依不饶教导默尔索，可他无动于衷，甚至于愤怒、爆发了。</p><p>这本书看似是谈主人公的荒谬、不合常理，可其实是反应社会的荒谬及民众的盲目从众。而事实上，这本书中，只有所谓的局外人才是真正清醒的正常人。</p>]]></content>
    
    
    <categories>
      
      <category>文学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>文学</tag>
      
      <tag>作文</tag>
      
      <tag>读后感</tag>
      
      <tag>议论文</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
